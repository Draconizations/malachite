window.storyFormat({"name":"Malachite","version":"0.1.0","description":"A very work in progress story format using nunjucks and signals.","proofing":false,"license":"MIT","setup":"","source":"<!doctype html>\n<html>\n  <head>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <meta charset=\"utf-8\" />\n    <title>{{STORY_NAME}}</title>\n  </head>\n  <body>\n    {{STORY_DATA}}\n    <tw-story>\n      <tw-passage></tw-passage>\n    </tw-story>\n    <script title=\"malachite\">\n      (function () {\n\t'use strict';\n\n\tvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\n\tfunction getDefaultExportFromCjs (x) {\n\t\treturn x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n\t}\n\n\tfunction getAugmentedNamespace(n) {\n\t  if (n.__esModule) return n;\n\t  var f = n.default;\n\t\tif (typeof f == \"function\") {\n\t\t\tvar a = function a () {\n\t\t\t\tif (this instanceof a) {\n\t        return Reflect.construct(f, arguments, this.constructor);\n\t\t\t\t}\n\t\t\t\treturn f.apply(this, arguments);\n\t\t\t};\n\t\t\ta.prototype = f.prototype;\n\t  } else a = {};\n\t  Object.defineProperty(a, '__esModule', {value: true});\n\t\tObject.keys(n).forEach(function (k) {\n\t\t\tvar d = Object.getOwnPropertyDescriptor(n, k);\n\t\t\tObject.defineProperty(a, k, d.get ? d : {\n\t\t\t\tenumerable: true,\n\t\t\t\tget: function () {\n\t\t\t\t\treturn n[k];\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\treturn a;\n\t}\n\n\tvar lib$9 = {exports: {}};\n\n\tvar ArrayProto = Array.prototype;\n\tvar ObjProto = Object.prototype;\n\tvar escapeMap = {\n\t    '&': '&amp;',\n\t    '\"': '&quot;',\n\t    '\\'': '&#39;',\n\t    '<': '&lt;',\n\t    '>': '&gt;',\n\t    '\\\\': '&#92;'\n\t};\n\tvar escapeRegex = /[&\"'<>\\\\]/g;\n\tvar _exports$1 = lib$9.exports = {};\n\tfunction hasOwnProp(obj, k) {\n\t    return ObjProto.hasOwnProperty.call(obj, k);\n\t}\n\t_exports$1.hasOwnProp = hasOwnProp;\n\tfunction lookupEscape(ch) {\n\t    return escapeMap[ch];\n\t}\n\tfunction _prettifyError$1(path, withInternals, err) {\n\t    if (!err.Update) {\n\t        // not one of ours, cast it\n\t        err = new _exports$1.TemplateError(err);\n\t    }\n\t    err.Update(path);\n\t    // Unless they marked the dev flag, show them a trace from here\n\t    if (!withInternals) {\n\t        var old = err;\n\t        err = new Error(old.message);\n\t        err.name = old.name;\n\t    }\n\t    return err;\n\t}\n\t_exports$1._prettifyError = _prettifyError$1;\n\tfunction TemplateError$1(message, lineno, colno) {\n\t    var err;\n\t    var cause;\n\t    if (message instanceof Error) {\n\t        cause = message;\n\t        message = cause.name + \": \" + cause.message;\n\t    }\n\t    if (Object.setPrototypeOf) {\n\t        err = new Error(message);\n\t        Object.setPrototypeOf(err, TemplateError$1.prototype);\n\t    } else {\n\t        err = this;\n\t        Object.defineProperty(err, 'message', {\n\t            enumerable: false,\n\t            writable: true,\n\t            value: message\n\t        });\n\t    }\n\t    Object.defineProperty(err, 'name', {\n\t        value: 'Template render error'\n\t    });\n\t    if (Error.captureStackTrace) {\n\t        Error.captureStackTrace(err, this.constructor);\n\t    }\n\t    var getStack;\n\t    if (cause) {\n\t        var stackDescriptor = Object.getOwnPropertyDescriptor(cause, 'stack');\n\t        getStack = stackDescriptor && (stackDescriptor.get || function() {\n\t            return stackDescriptor.value;\n\t        });\n\t        if (!getStack) {\n\t            getStack = function getStack() {\n\t                return cause.stack;\n\t            };\n\t        }\n\t    } else {\n\t        var stack = new Error(message).stack;\n\t        getStack = function getStack() {\n\t            return stack;\n\t        };\n\t    }\n\t    Object.defineProperty(err, 'stack', {\n\t        get: function get() {\n\t            return getStack.call(err);\n\t        }\n\t    });\n\t    Object.defineProperty(err, 'cause', {\n\t        value: cause\n\t    });\n\t    err.lineno = lineno;\n\t    err.colno = colno;\n\t    err.firstUpdate = true;\n\t    err.Update = function Update(path) {\n\t        var msg = '(' + (path || 'unknown path') + ')';\n\t        // only show lineno + colno next to path of template\n\t        // where error occurred\n\t        if (this.firstUpdate) {\n\t            if (this.lineno && this.colno) {\n\t                msg += \" [Line \" + this.lineno + \", Column \" + this.colno + \"]\";\n\t            } else if (this.lineno) {\n\t                msg += \" [Line \" + this.lineno + \"]\";\n\t            }\n\t        }\n\t        msg += '\\n ';\n\t        if (this.firstUpdate) {\n\t            msg += ' ';\n\t        }\n\t        this.message = msg + (this.message || '');\n\t        this.firstUpdate = false;\n\t        return this;\n\t    };\n\t    return err;\n\t}\n\tif (Object.setPrototypeOf) {\n\t    Object.setPrototypeOf(TemplateError$1.prototype, Error.prototype);\n\t} else {\n\t    TemplateError$1.prototype = Object.create(Error.prototype, {\n\t        constructor: {\n\t            value: TemplateError$1\n\t        }\n\t    });\n\t}\n\t_exports$1.TemplateError = TemplateError$1;\n\tfunction escape$2(val) {\n\t    return val.replace(escapeRegex, lookupEscape);\n\t}\n\t_exports$1.escape = escape$2;\n\tfunction isFunction$1(obj) {\n\t    return ObjProto.toString.call(obj) === '[object Function]';\n\t}\n\t_exports$1.isFunction = isFunction$1;\n\tfunction isArray(obj) {\n\t    return ObjProto.toString.call(obj) === '[object Array]';\n\t}\n\t_exports$1.isArray = isArray;\n\tfunction isString$2(obj) {\n\t    return ObjProto.toString.call(obj) === '[object String]';\n\t}\n\t_exports$1.isString = isString$2;\n\tfunction isObject$1(obj) {\n\t    return ObjProto.toString.call(obj) === '[object Object]';\n\t}\n\t_exports$1.isObject = isObject$1;\n\t/**\n\t * @param {string|number} attr\n\t * @returns {(string|number)[]}\n\t * @private\n\t */ function _prepareAttributeParts(attr) {\n\t    if (!attr) {\n\t        return [];\n\t    }\n\t    if (typeof attr === 'string') {\n\t        return attr.split('.');\n\t    }\n\t    return [\n\t        attr\n\t    ];\n\t}\n\t/**\n\t * @param {string}   attribute      Attribute value. Dots allowed.\n\t * @returns {function(Object): *}\n\t */ function getAttrGetter(attribute) {\n\t    var parts = _prepareAttributeParts(attribute);\n\t    return function attrGetter(item) {\n\t        var _item = item;\n\t        for(var i = 0; i < parts.length; i++){\n\t            var part = parts[i];\n\t            // If item is not an object, and we still got parts to handle, it means\n\t            // that something goes wrong. Just roll out to undefined in that case.\n\t            if (hasOwnProp(_item, part)) {\n\t                _item = _item[part];\n\t            } else {\n\t                return undefined;\n\t            }\n\t        }\n\t        return _item;\n\t    };\n\t}\n\t_exports$1.getAttrGetter = getAttrGetter;\n\tfunction groupBy(obj, val, throwOnUndefined) {\n\t    var result = {};\n\t    var iterator = isFunction$1(val) ? val : getAttrGetter(val);\n\t    for(var i = 0; i < obj.length; i++){\n\t        var value = obj[i];\n\t        var key = iterator(value, i);\n\t        if (key === undefined && throwOnUndefined === true) {\n\t            throw new TypeError(\"groupby: attribute \\\"\" + val + \"\\\" resolved to undefined\");\n\t        }\n\t        (result[key] || (result[key] = [])).push(value);\n\t    }\n\t    return result;\n\t}\n\t_exports$1.groupBy = groupBy;\n\tfunction toArray(obj) {\n\t    return Array.prototype.slice.call(obj);\n\t}\n\t_exports$1.toArray = toArray;\n\tfunction without(array) {\n\t    var result = [];\n\t    if (!array) {\n\t        return result;\n\t    }\n\t    var length = array.length;\n\t    var contains = toArray(arguments).slice(1);\n\t    var index = -1;\n\t    while(++index < length){\n\t        if (indexOf(contains, array[index]) === -1) {\n\t            result.push(array[index]);\n\t        }\n\t    }\n\t    return result;\n\t}\n\t_exports$1.without = without;\n\tfunction repeat(char_, n) {\n\t    var str = '';\n\t    for(var i = 0; i < n; i++){\n\t        str += char_;\n\t    }\n\t    return str;\n\t}\n\t_exports$1.repeat = repeat;\n\tfunction each(obj, func, context) {\n\t    if (obj == null) {\n\t        return;\n\t    }\n\t    if (ArrayProto.forEach && obj.forEach === ArrayProto.forEach) {\n\t        obj.forEach(func, context);\n\t    } else if (obj.length === +obj.length) {\n\t        for(var i = 0, l = obj.length; i < l; i++){\n\t            func.call(context, obj[i], i, obj);\n\t        }\n\t    }\n\t}\n\t_exports$1.each = each;\n\tfunction map$1(obj, func) {\n\t    var results = [];\n\t    if (obj == null) {\n\t        return results;\n\t    }\n\t    if (ArrayProto.map && obj.map === ArrayProto.map) {\n\t        return obj.map(func);\n\t    }\n\t    for(var i = 0; i < obj.length; i++){\n\t        results[results.length] = func(obj[i], i);\n\t    }\n\t    if (obj.length === +obj.length) {\n\t        results.length = obj.length;\n\t    }\n\t    return results;\n\t}\n\t_exports$1.map = map$1;\n\tfunction asyncIter(arr, iter, cb) {\n\t    var i = -1;\n\t    function next() {\n\t        i++;\n\t        if (i < arr.length) {\n\t            iter(arr[i], i, next, cb);\n\t        } else {\n\t            cb();\n\t        }\n\t    }\n\t    next();\n\t}\n\t_exports$1.asyncIter = asyncIter;\n\tfunction asyncFor(obj, iter, cb) {\n\t    var keys = keys_(obj || {});\n\t    var len = keys.length;\n\t    var i = -1;\n\t    function next() {\n\t        i++;\n\t        var k = keys[i];\n\t        if (i < len) {\n\t            iter(k, obj[k], i, len, next);\n\t        } else {\n\t            cb();\n\t        }\n\t    }\n\t    next();\n\t}\n\t_exports$1.asyncFor = asyncFor;\n\tfunction indexOf(arr, searchElement, fromIndex) {\n\t    return Array.prototype.indexOf.call(arr || [], searchElement, fromIndex);\n\t}\n\t_exports$1.indexOf = indexOf;\n\tfunction keys_(obj) {\n\t    /* eslint-disable no-restricted-syntax */ var arr = [];\n\t    for(var k in obj){\n\t        if (hasOwnProp(obj, k)) {\n\t            arr.push(k);\n\t        }\n\t    }\n\t    return arr;\n\t}\n\t_exports$1.keys = keys_;\n\tfunction _entries(obj) {\n\t    return keys_(obj).map(function(k) {\n\t        return [\n\t            k,\n\t            obj[k]\n\t        ];\n\t    });\n\t}\n\t_exports$1._entries = _entries;\n\tfunction _values(obj) {\n\t    return keys_(obj).map(function(k) {\n\t        return obj[k];\n\t    });\n\t}\n\t_exports$1._values = _values;\n\tfunction extend(obj1, obj2) {\n\t    obj1 = obj1 || {};\n\t    keys_(obj2).forEach(function(k) {\n\t        obj1[k] = obj2[k];\n\t    });\n\t    return obj1;\n\t}\n\t_exports$1._assign = _exports$1.extend = extend;\n\tfunction inOperator(key, val) {\n\t    if (isArray(val) || isString$2(val)) {\n\t        return val.indexOf(key) !== -1;\n\t    } else if (isObject$1(val)) {\n\t        return key in val;\n\t    }\n\t    throw new Error('Cannot use \"in\" operator to search for \"' + key + '\" in unexpected types.');\n\t}\n\t_exports$1.inOperator = inOperator;\n\tvar libExports = lib$9.exports;\n\n\tvar global$1 = (typeof global !== \"undefined\" ? global :\n\t  typeof self !== \"undefined\" ? self :\n\t  typeof window !== \"undefined\" ? window : {});\n\n\t// shim for using process in browser\n\t// based off https://github.com/defunctzombie/node-process/blob/master/browser.js\n\n\tfunction defaultSetTimout() {\n\t    throw new Error('setTimeout has not been defined');\n\t}\n\tfunction defaultClearTimeout () {\n\t    throw new Error('clearTimeout has not been defined');\n\t}\n\tvar cachedSetTimeout = defaultSetTimout;\n\tvar cachedClearTimeout = defaultClearTimeout;\n\tif (typeof global$1.setTimeout === 'function') {\n\t    cachedSetTimeout = setTimeout;\n\t}\n\tif (typeof global$1.clearTimeout === 'function') {\n\t    cachedClearTimeout = clearTimeout;\n\t}\n\n\tfunction runTimeout(fun) {\n\t    if (cachedSetTimeout === setTimeout) {\n\t        //normal enviroments in sane situations\n\t        return setTimeout(fun, 0);\n\t    }\n\t    // if setTimeout wasn't available but was latter defined\n\t    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n\t        cachedSetTimeout = setTimeout;\n\t        return setTimeout(fun, 0);\n\t    }\n\t    try {\n\t        // when when somebody has screwed with setTimeout but no I.E. maddness\n\t        return cachedSetTimeout(fun, 0);\n\t    } catch(e){\n\t        try {\n\t            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n\t            return cachedSetTimeout.call(null, fun, 0);\n\t        } catch(e){\n\t            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n\t            return cachedSetTimeout.call(this, fun, 0);\n\t        }\n\t    }\n\n\n\t}\n\tfunction runClearTimeout(marker) {\n\t    if (cachedClearTimeout === clearTimeout) {\n\t        //normal enviroments in sane situations\n\t        return clearTimeout(marker);\n\t    }\n\t    // if clearTimeout wasn't available but was latter defined\n\t    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n\t        cachedClearTimeout = clearTimeout;\n\t        return clearTimeout(marker);\n\t    }\n\t    try {\n\t        // when when somebody has screwed with setTimeout but no I.E. maddness\n\t        return cachedClearTimeout(marker);\n\t    } catch (e){\n\t        try {\n\t            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n\t            return cachedClearTimeout.call(null, marker);\n\t        } catch (e){\n\t            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n\t            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n\t            return cachedClearTimeout.call(this, marker);\n\t        }\n\t    }\n\n\n\n\t}\n\tvar queue$1 = [];\n\tvar draining = false;\n\tvar currentQueue;\n\tvar queueIndex = -1;\n\n\tfunction cleanUpNextTick() {\n\t    if (!draining || !currentQueue) {\n\t        return;\n\t    }\n\t    draining = false;\n\t    if (currentQueue.length) {\n\t        queue$1 = currentQueue.concat(queue$1);\n\t    } else {\n\t        queueIndex = -1;\n\t    }\n\t    if (queue$1.length) {\n\t        drainQueue();\n\t    }\n\t}\n\n\tfunction drainQueue() {\n\t    if (draining) {\n\t        return;\n\t    }\n\t    var timeout = runTimeout(cleanUpNextTick);\n\t    draining = true;\n\n\t    var len = queue$1.length;\n\t    while(len) {\n\t        currentQueue = queue$1;\n\t        queue$1 = [];\n\t        while (++queueIndex < len) {\n\t            if (currentQueue) {\n\t                currentQueue[queueIndex].run();\n\t            }\n\t        }\n\t        queueIndex = -1;\n\t        len = queue$1.length;\n\t    }\n\t    currentQueue = null;\n\t    draining = false;\n\t    runClearTimeout(timeout);\n\t}\n\tfunction nextTick(fun) {\n\t    var args = new Array(arguments.length - 1);\n\t    if (arguments.length > 1) {\n\t        for (var i = 1; i < arguments.length; i++) {\n\t            args[i - 1] = arguments[i];\n\t        }\n\t    }\n\t    queue$1.push(new Item(fun, args));\n\t    if (queue$1.length === 1 && !draining) {\n\t        runTimeout(drainQueue);\n\t    }\n\t}\n\t// v8 likes predictible objects\n\tfunction Item(fun, array) {\n\t    this.fun = fun;\n\t    this.array = array;\n\t}\n\tItem.prototype.run = function () {\n\t    this.fun.apply(null, this.array);\n\t};\n\tvar title$1 = 'browser';\n\tvar platform = 'browser';\n\tvar browser = true;\n\tvar env = {};\n\tvar argv = [];\n\tvar version$1 = ''; // empty string to avoid regexp issues\n\tvar versions = {};\n\tvar release = {};\n\tvar config$1 = {};\n\n\tfunction noop() {}\n\n\tvar on = noop;\n\tvar addListener = noop;\n\tvar once = noop;\n\tvar off = noop;\n\tvar removeListener = noop;\n\tvar removeAllListeners = noop;\n\tvar emit = noop;\n\n\tfunction binding(name) {\n\t    throw new Error('process.binding is not supported');\n\t}\n\n\tfunction cwd () { return '/' }\n\tfunction chdir (dir) {\n\t    throw new Error('process.chdir is not supported');\n\t}function umask() { return 0; }\n\n\t// from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js\n\tvar performance = global$1.performance || {};\n\tvar performanceNow =\n\t  performance.now        ||\n\t  performance.mozNow     ||\n\t  performance.msNow      ||\n\t  performance.oNow       ||\n\t  performance.webkitNow  ||\n\t  function(){ return (new Date()).getTime() };\n\n\t// generate timestamp or delta\n\t// see http://nodejs.org/api/process.html#process_process_hrtime\n\tfunction hrtime(previousTimestamp){\n\t  var clocktime = performanceNow.call(performance)*1e-3;\n\t  var seconds = Math.floor(clocktime);\n\t  var nanoseconds = Math.floor((clocktime%1)*1e9);\n\t  if (previousTimestamp) {\n\t    seconds = seconds - previousTimestamp[0];\n\t    nanoseconds = nanoseconds - previousTimestamp[1];\n\t    if (nanoseconds<0) {\n\t      seconds--;\n\t      nanoseconds += 1e9;\n\t    }\n\t  }\n\t  return [seconds,nanoseconds]\n\t}\n\n\tvar startTime = new Date();\n\tfunction uptime() {\n\t  var currentTime = new Date();\n\t  var dif = currentTime - startTime;\n\t  return dif / 1000;\n\t}\n\n\tvar browser$1 = {\n\t  nextTick: nextTick,\n\t  title: title$1,\n\t  browser: browser,\n\t  env: env,\n\t  argv: argv,\n\t  version: version$1,\n\t  versions: versions,\n\t  on: on,\n\t  addListener: addListener,\n\t  once: once,\n\t  off: off,\n\t  removeListener: removeListener,\n\t  removeAllListeners: removeAllListeners,\n\t  emit: emit,\n\t  binding: binding,\n\t  cwd: cwd,\n\t  chdir: chdir,\n\t  umask: umask,\n\t  hrtime: hrtime,\n\t  platform: platform,\n\t  release: release,\n\t  config: config$1,\n\t  uptime: uptime\n\t};\n\n\tvar domain$1;\n\n\t// This constructor is used to store event handlers. Instantiating this is\n\t// faster than explicitly calling `Object.create(null)` to get a \"clean\" empty\n\t// object (tested with v8 v4.9).\n\tfunction EventHandlers() {}\n\tEventHandlers.prototype = Object.create(null);\n\n\tfunction EventEmitter$1() {\n\t  EventEmitter$1.init.call(this);\n\t}\n\n\t// nodejs oddity\n\t// require('events') === require('events').EventEmitter\n\tEventEmitter$1.EventEmitter = EventEmitter$1;\n\n\tEventEmitter$1.usingDomains = false;\n\n\tEventEmitter$1.prototype.domain = undefined;\n\tEventEmitter$1.prototype._events = undefined;\n\tEventEmitter$1.prototype._maxListeners = undefined;\n\n\t// By default EventEmitters will print a warning if more than 10 listeners are\n\t// added to it. This is a useful default which helps finding memory leaks.\n\tEventEmitter$1.defaultMaxListeners = 10;\n\n\tEventEmitter$1.init = function() {\n\t  this.domain = null;\n\t  if (EventEmitter$1.usingDomains) {\n\t    // if there is an active domain, then attach to it.\n\t    if (domain$1.active) ;\n\t  }\n\n\t  if (!this._events || this._events === Object.getPrototypeOf(this)._events) {\n\t    this._events = new EventHandlers();\n\t    this._eventsCount = 0;\n\t  }\n\n\t  this._maxListeners = this._maxListeners || undefined;\n\t};\n\n\t// Obviously not all Emitters should be limited to 10. This function allows\n\t// that to be increased. Set to zero for unlimited.\n\tEventEmitter$1.prototype.setMaxListeners = function setMaxListeners(n) {\n\t  if (typeof n !== 'number' || n < 0 || isNaN(n))\n\t    throw new TypeError('\"n\" argument must be a positive number');\n\t  this._maxListeners = n;\n\t  return this;\n\t};\n\n\tfunction $getMaxListeners(that) {\n\t  if (that._maxListeners === undefined)\n\t    return EventEmitter$1.defaultMaxListeners;\n\t  return that._maxListeners;\n\t}\n\n\tEventEmitter$1.prototype.getMaxListeners = function getMaxListeners() {\n\t  return $getMaxListeners(this);\n\t};\n\n\t// These standalone emit* functions are used to optimize calling of event\n\t// handlers for fast cases because emit() itself often has a variable number of\n\t// arguments and can be deoptimized because of that. These functions always have\n\t// the same number of arguments and thus do not get deoptimized, so the code\n\t// inside them can execute faster.\n\tfunction emitNone(handler, isFn, self) {\n\t  if (isFn)\n\t    handler.call(self);\n\t  else {\n\t    var len = handler.length;\n\t    var listeners = arrayClone(handler, len);\n\t    for (var i = 0; i < len; ++i)\n\t      listeners[i].call(self);\n\t  }\n\t}\n\tfunction emitOne(handler, isFn, self, arg1) {\n\t  if (isFn)\n\t    handler.call(self, arg1);\n\t  else {\n\t    var len = handler.length;\n\t    var listeners = arrayClone(handler, len);\n\t    for (var i = 0; i < len; ++i)\n\t      listeners[i].call(self, arg1);\n\t  }\n\t}\n\tfunction emitTwo(handler, isFn, self, arg1, arg2) {\n\t  if (isFn)\n\t    handler.call(self, arg1, arg2);\n\t  else {\n\t    var len = handler.length;\n\t    var listeners = arrayClone(handler, len);\n\t    for (var i = 0; i < len; ++i)\n\t      listeners[i].call(self, arg1, arg2);\n\t  }\n\t}\n\tfunction emitThree(handler, isFn, self, arg1, arg2, arg3) {\n\t  if (isFn)\n\t    handler.call(self, arg1, arg2, arg3);\n\t  else {\n\t    var len = handler.length;\n\t    var listeners = arrayClone(handler, len);\n\t    for (var i = 0; i < len; ++i)\n\t      listeners[i].call(self, arg1, arg2, arg3);\n\t  }\n\t}\n\n\tfunction emitMany(handler, isFn, self, args) {\n\t  if (isFn)\n\t    handler.apply(self, args);\n\t  else {\n\t    var len = handler.length;\n\t    var listeners = arrayClone(handler, len);\n\t    for (var i = 0; i < len; ++i)\n\t      listeners[i].apply(self, args);\n\t  }\n\t}\n\n\tEventEmitter$1.prototype.emit = function emit(type) {\n\t  var er, handler, len, args, i, events, domain;\n\t  var doError = (type === 'error');\n\n\t  events = this._events;\n\t  if (events)\n\t    doError = (doError && events.error == null);\n\t  else if (!doError)\n\t    return false;\n\n\t  domain = this.domain;\n\n\t  // If there is no 'error' event listener then throw.\n\t  if (doError) {\n\t    er = arguments[1];\n\t    if (domain) {\n\t      if (!er)\n\t        er = new Error('Uncaught, unspecified \"error\" event');\n\t      er.domainEmitter = this;\n\t      er.domain = domain;\n\t      er.domainThrown = false;\n\t      domain.emit('error', er);\n\t    } else if (er instanceof Error) {\n\t      throw er; // Unhandled 'error' event\n\t    } else {\n\t      // At least give some kind of context to the user\n\t      var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n\t      err.context = er;\n\t      throw err;\n\t    }\n\t    return false;\n\t  }\n\n\t  handler = events[type];\n\n\t  if (!handler)\n\t    return false;\n\n\t  var isFn = typeof handler === 'function';\n\t  len = arguments.length;\n\t  switch (len) {\n\t    // fast cases\n\t    case 1:\n\t      emitNone(handler, isFn, this);\n\t      break;\n\t    case 2:\n\t      emitOne(handler, isFn, this, arguments[1]);\n\t      break;\n\t    case 3:\n\t      emitTwo(handler, isFn, this, arguments[1], arguments[2]);\n\t      break;\n\t    case 4:\n\t      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);\n\t      break;\n\t    // slower\n\t    default:\n\t      args = new Array(len - 1);\n\t      for (i = 1; i < len; i++)\n\t        args[i - 1] = arguments[i];\n\t      emitMany(handler, isFn, this, args);\n\t  }\n\n\t  return true;\n\t};\n\n\tfunction _addListener(target, type, listener, prepend) {\n\t  var m;\n\t  var events;\n\t  var existing;\n\n\t  if (typeof listener !== 'function')\n\t    throw new TypeError('\"listener\" argument must be a function');\n\n\t  events = target._events;\n\t  if (!events) {\n\t    events = target._events = new EventHandlers();\n\t    target._eventsCount = 0;\n\t  } else {\n\t    // To avoid recursion in the case that type === \"newListener\"! Before\n\t    // adding it to the listeners, first emit \"newListener\".\n\t    if (events.newListener) {\n\t      target.emit('newListener', type,\n\t                  listener.listener ? listener.listener : listener);\n\n\t      // Re-assign `events` because a newListener handler could have caused the\n\t      // this._events to be assigned to a new object\n\t      events = target._events;\n\t    }\n\t    existing = events[type];\n\t  }\n\n\t  if (!existing) {\n\t    // Optimize the case of one listener. Don't need the extra array object.\n\t    existing = events[type] = listener;\n\t    ++target._eventsCount;\n\t  } else {\n\t    if (typeof existing === 'function') {\n\t      // Adding the second element, need to change to array.\n\t      existing = events[type] = prepend ? [listener, existing] :\n\t                                          [existing, listener];\n\t    } else {\n\t      // If we've already got an array, just append.\n\t      if (prepend) {\n\t        existing.unshift(listener);\n\t      } else {\n\t        existing.push(listener);\n\t      }\n\t    }\n\n\t    // Check for listener leak\n\t    if (!existing.warned) {\n\t      m = $getMaxListeners(target);\n\t      if (m && m > 0 && existing.length > m) {\n\t        existing.warned = true;\n\t        var w = new Error('Possible EventEmitter memory leak detected. ' +\n\t                            existing.length + ' ' + type + ' listeners added. ' +\n\t                            'Use emitter.setMaxListeners() to increase limit');\n\t        w.name = 'MaxListenersExceededWarning';\n\t        w.emitter = target;\n\t        w.type = type;\n\t        w.count = existing.length;\n\t        emitWarning(w);\n\t      }\n\t    }\n\t  }\n\n\t  return target;\n\t}\n\tfunction emitWarning(e) {\n\t  typeof console.warn === 'function' ? console.warn(e) : console.log(e);\n\t}\n\tEventEmitter$1.prototype.addListener = function addListener(type, listener) {\n\t  return _addListener(this, type, listener, false);\n\t};\n\n\tEventEmitter$1.prototype.on = EventEmitter$1.prototype.addListener;\n\n\tEventEmitter$1.prototype.prependListener =\n\t    function prependListener(type, listener) {\n\t      return _addListener(this, type, listener, true);\n\t    };\n\n\tfunction _onceWrap(target, type, listener) {\n\t  var fired = false;\n\t  function g() {\n\t    target.removeListener(type, g);\n\t    if (!fired) {\n\t      fired = true;\n\t      listener.apply(target, arguments);\n\t    }\n\t  }\n\t  g.listener = listener;\n\t  return g;\n\t}\n\n\tEventEmitter$1.prototype.once = function once(type, listener) {\n\t  if (typeof listener !== 'function')\n\t    throw new TypeError('\"listener\" argument must be a function');\n\t  this.on(type, _onceWrap(this, type, listener));\n\t  return this;\n\t};\n\n\tEventEmitter$1.prototype.prependOnceListener =\n\t    function prependOnceListener(type, listener) {\n\t      if (typeof listener !== 'function')\n\t        throw new TypeError('\"listener\" argument must be a function');\n\t      this.prependListener(type, _onceWrap(this, type, listener));\n\t      return this;\n\t    };\n\n\t// emits a 'removeListener' event iff the listener was removed\n\tEventEmitter$1.prototype.removeListener =\n\t    function removeListener(type, listener) {\n\t      var list, events, position, i, originalListener;\n\n\t      if (typeof listener !== 'function')\n\t        throw new TypeError('\"listener\" argument must be a function');\n\n\t      events = this._events;\n\t      if (!events)\n\t        return this;\n\n\t      list = events[type];\n\t      if (!list)\n\t        return this;\n\n\t      if (list === listener || (list.listener && list.listener === listener)) {\n\t        if (--this._eventsCount === 0)\n\t          this._events = new EventHandlers();\n\t        else {\n\t          delete events[type];\n\t          if (events.removeListener)\n\t            this.emit('removeListener', type, list.listener || listener);\n\t        }\n\t      } else if (typeof list !== 'function') {\n\t        position = -1;\n\n\t        for (i = list.length; i-- > 0;) {\n\t          if (list[i] === listener ||\n\t              (list[i].listener && list[i].listener === listener)) {\n\t            originalListener = list[i].listener;\n\t            position = i;\n\t            break;\n\t          }\n\t        }\n\n\t        if (position < 0)\n\t          return this;\n\n\t        if (list.length === 1) {\n\t          list[0] = undefined;\n\t          if (--this._eventsCount === 0) {\n\t            this._events = new EventHandlers();\n\t            return this;\n\t          } else {\n\t            delete events[type];\n\t          }\n\t        } else {\n\t          spliceOne(list, position);\n\t        }\n\n\t        if (events.removeListener)\n\t          this.emit('removeListener', type, originalListener || listener);\n\t      }\n\n\t      return this;\n\t    };\n\t    \n\t// Alias for removeListener added in NodeJS 10.0\n\t// https://nodejs.org/api/events.html#events_emitter_off_eventname_listener\n\tEventEmitter$1.prototype.off = function(type, listener){\n\t    return this.removeListener(type, listener);\n\t};\n\n\tEventEmitter$1.prototype.removeAllListeners =\n\t    function removeAllListeners(type) {\n\t      var listeners, events;\n\n\t      events = this._events;\n\t      if (!events)\n\t        return this;\n\n\t      // not listening for removeListener, no need to emit\n\t      if (!events.removeListener) {\n\t        if (arguments.length === 0) {\n\t          this._events = new EventHandlers();\n\t          this._eventsCount = 0;\n\t        } else if (events[type]) {\n\t          if (--this._eventsCount === 0)\n\t            this._events = new EventHandlers();\n\t          else\n\t            delete events[type];\n\t        }\n\t        return this;\n\t      }\n\n\t      // emit removeListener for all listeners on all events\n\t      if (arguments.length === 0) {\n\t        var keys = Object.keys(events);\n\t        for (var i = 0, key; i < keys.length; ++i) {\n\t          key = keys[i];\n\t          if (key === 'removeListener') continue;\n\t          this.removeAllListeners(key);\n\t        }\n\t        this.removeAllListeners('removeListener');\n\t        this._events = new EventHandlers();\n\t        this._eventsCount = 0;\n\t        return this;\n\t      }\n\n\t      listeners = events[type];\n\n\t      if (typeof listeners === 'function') {\n\t        this.removeListener(type, listeners);\n\t      } else if (listeners) {\n\t        // LIFO order\n\t        do {\n\t          this.removeListener(type, listeners[listeners.length - 1]);\n\t        } while (listeners[0]);\n\t      }\n\n\t      return this;\n\t    };\n\n\tEventEmitter$1.prototype.listeners = function listeners(type) {\n\t  var evlistener;\n\t  var ret;\n\t  var events = this._events;\n\n\t  if (!events)\n\t    ret = [];\n\t  else {\n\t    evlistener = events[type];\n\t    if (!evlistener)\n\t      ret = [];\n\t    else if (typeof evlistener === 'function')\n\t      ret = [evlistener.listener || evlistener];\n\t    else\n\t      ret = unwrapListeners(evlistener);\n\t  }\n\n\t  return ret;\n\t};\n\n\tEventEmitter$1.listenerCount = function(emitter, type) {\n\t  if (typeof emitter.listenerCount === 'function') {\n\t    return emitter.listenerCount(type);\n\t  } else {\n\t    return listenerCount.call(emitter, type);\n\t  }\n\t};\n\n\tEventEmitter$1.prototype.listenerCount = listenerCount;\n\tfunction listenerCount(type) {\n\t  var events = this._events;\n\n\t  if (events) {\n\t    var evlistener = events[type];\n\n\t    if (typeof evlistener === 'function') {\n\t      return 1;\n\t    } else if (evlistener) {\n\t      return evlistener.length;\n\t    }\n\t  }\n\n\t  return 0;\n\t}\n\n\tEventEmitter$1.prototype.eventNames = function eventNames() {\n\t  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];\n\t};\n\n\t// About 1.5x faster than the two-arg version of Array#splice().\n\tfunction spliceOne(list, index) {\n\t  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)\n\t    list[i] = list[k];\n\t  list.pop();\n\t}\n\n\tfunction arrayClone(arr, i) {\n\t  var copy = new Array(i);\n\t  while (i--)\n\t    copy[i] = arr[i];\n\t  return copy;\n\t}\n\n\tfunction unwrapListeners(arr) {\n\t  var ret = new Array(arr.length);\n\t  for (var i = 0; i < ret.length; ++i) {\n\t    ret[i] = arr[i].listener || arr[i];\n\t  }\n\t  return ret;\n\t}\n\n\tvar _polyfillNode_events = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tEventEmitter: EventEmitter$1,\n\t\tdefault: EventEmitter$1\n\t});\n\n\tvar inherits;\n\tif (typeof Object.create === 'function'){\n\t  inherits = function inherits(ctor, superCtor) {\n\t    // implementation from standard node.js 'util' module\n\t    ctor.super_ = superCtor;\n\t    ctor.prototype = Object.create(superCtor.prototype, {\n\t      constructor: {\n\t        value: ctor,\n\t        enumerable: false,\n\t        writable: true,\n\t        configurable: true\n\t      }\n\t    });\n\t  };\n\t} else {\n\t  inherits = function inherits(ctor, superCtor) {\n\t    ctor.super_ = superCtor;\n\t    var TempCtor = function () {};\n\t    TempCtor.prototype = superCtor.prototype;\n\t    ctor.prototype = new TempCtor();\n\t    ctor.prototype.constructor = ctor;\n\t  };\n\t}\n\n\t/*\n\t<!-- LICENSEFILE/ -->\n\n\t<h1>License</h1>\n\n\tUnless stated otherwise all works are:\n\n\t<ul><li>Copyright &copy; 2013+ <a href=\"http://bevry.me\">Bevry Pty Ltd</a></li></ul>\n\n\tand licensed under:\n\n\t<ul><li><a href=\"http://spdx.org/licenses/MIT.html\">MIT License</a></li></ul>\n\n\t<h2>MIT License</h2>\n\n\t<pre>\n\tPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n\tThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n\tTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\t</pre>\n\n\t<!-- /LICENSEFILE -->\n\t*/\n\t/*\n\tmodified by Calvin Metcalf to adhere to how the node one works a little better\n\t*/\n\tinherits(Domain, EventEmitter$1);\n\tfunction createEmitError(d) {\n\t  return emitError;\n\t  function emitError(e) {\n\t    d.emit('error', e);\n\t  }\n\t}\n\n\tfunction Domain() {\n\t  EventEmitter$1.call(this);\n\t  this.__emitError = createEmitError(this);\n\t}\n\tDomain.prototype.add = function (emitter) {\n\t  emitter.on('error', this.__emitError);\n\t};\n\tDomain.prototype.remove = function(emitter) {\n\t  emitter.removeListener('error', this.__emitError);\n\t};\n\tDomain.prototype.bind = function(fn) {\n\t  var emitError = this.__emitError;\n\t  return function() {\n\t    var args = Array.prototype.slice.call(arguments);\n\t    try {\n\t      fn.apply(null, args);\n\t    } catch (err) {\n\t      emitError(err);\n\t    }\n\t  }\n\t};\n\tDomain.prototype.intercept = function(fn) {\n\t  var emitError = this.__emitError;\n\t  return function(err) {\n\t    if (err) {\n\t      emitError(err);\n\t    } else {\n\t      var args = Array.prototype.slice.call(arguments, 1);\n\t      try {\n\t        fn.apply(null, args);\n\t      } catch (err) {\n\t        emitError(err);\n\t      }\n\t    }\n\t  }\n\t};\n\tDomain.prototype.run = function(fn) {\n\t  var emitError = this.__emitError;\n\t  try {\n\t    fn();\n\t  } catch (err) {\n\t    emitError(err);\n\t  }\n\t  return this\n\t};\n\tDomain.prototype.dispose = function() {\n\t  this.removeAllListeners();\n\t  return this\n\t};\n\tDomain.prototype.enter = Domain.prototype.exit = function() {\n\t  return this\n\t};\n\tfunction createDomain() {\n\t  return new Domain();\n\t}\n\tvar create = createDomain;\n\n\tvar _polyfillNode_domain = {\n\t  Domain: Domain,\n\t  createDomain: createDomain,\n\t  create: create\n\t};\n\n\tvar _polyfillNode_domain$1 = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tDomain: Domain,\n\t\tcreate: create,\n\t\tcreateDomain: createDomain,\n\t\tdefault: _polyfillNode_domain\n\t});\n\n\tvar require$$0$2 = /*@__PURE__*/getAugmentedNamespace(_polyfillNode_domain$1);\n\n\tvar domain; // The domain module is executed on demand\n\tvar hasSetImmediate = typeof setImmediate === \"function\";\n\t// Use the fastest means possible to execute a task in its own turn, with\n\t// priority over other events including network IO events in Node.js.\n\t//\n\t// An exception thrown by a task will permanently interrupt the processing of\n\t// subsequent tasks. The higher level `asap` function ensures that if an\n\t// exception is thrown by a task, that the task queue will continue flushing as\n\t// soon as possible, but if you use `rawAsap` directly, you are responsible to\n\t// either ensure that no exceptions are thrown from your task, or to manually\n\t// call `rawAsap.requestFlush` if an exception is thrown.\n\tvar raw = rawAsap$1;\n\tfunction rawAsap$1(task) {\n\t    if (!queue.length) {\n\t        requestFlush();\n\t        flushing = true;\n\t    }\n\t    // Avoids a function call\n\t    queue[queue.length] = task;\n\t}\n\tvar queue = [];\n\t// Once a flush has been requested, no further calls to `requestFlush` are\n\t// necessary until the next `flush` completes.\n\tvar flushing = false;\n\t// The position of the next task to execute in the task queue. This is\n\t// preserved between calls to `flush` so that it can be resumed if\n\t// a task throws an exception.\n\tvar index = 0;\n\t// If a task schedules additional tasks recursively, the task queue can grow\n\t// unbounded. To prevent memory excaustion, the task queue will periodically\n\t// truncate already-completed tasks.\n\tvar capacity = 1024;\n\t// The flush function processes all tasks that have been scheduled with\n\t// `rawAsap` unless and until one of those tasks throws an exception.\n\t// If a task throws an exception, `flush` ensures that its state will remain\n\t// consistent and will resume where it left off when called again.\n\t// However, `flush` does not make any arrangements to be called again if an\n\t// exception is thrown.\n\tfunction flush() {\n\t    while(index < queue.length){\n\t        var currentIndex = index;\n\t        // Advance the index before calling the task. This ensures that we will\n\t        // begin flushing on the next task the task throws an error.\n\t        index = index + 1;\n\t        queue[currentIndex].call();\n\t        // Prevent leaking memory for long chains of recursive calls to `asap`.\n\t        // If we call `asap` within tasks scheduled by `asap`, the queue will\n\t        // grow, but to avoid an O(n) walk for every task we execute, we don't\n\t        // shift tasks off the queue after they have been executed.\n\t        // Instead, we periodically shift 1024 tasks off the queue.\n\t        if (index > capacity) {\n\t            // Manually shift all values starting at the index back to the\n\t            // beginning of the queue.\n\t            for(var scan = 0, newLength = queue.length - index; scan < newLength; scan++){\n\t                queue[scan] = queue[scan + index];\n\t            }\n\t            queue.length -= index;\n\t            index = 0;\n\t        }\n\t    }\n\t    queue.length = 0;\n\t    index = 0;\n\t    flushing = false;\n\t}\n\trawAsap$1.requestFlush = requestFlush;\n\tfunction requestFlush() {\n\t    // Ensure flushing is not bound to any domain.\n\t    // It is not sufficient to exit the domain, because domains exist on a stack.\n\t    // To execute code outside of any domain, the following dance is necessary.\n\t    var parentDomain = browser$1.domain;\n\t    if (parentDomain) {\n\t        if (!domain) {\n\t            // Lazy execute the domain module.\n\t            // Only employed if the user elects to use domains.\n\t            domain = require$$0$2;\n\t        }\n\t        domain.active = browser$1.domain = null;\n\t    }\n\t    // `setImmediate` is slower that `process.nextTick`, but `process.nextTick`\n\t    // cannot handle recursion.\n\t    // `requestFlush` will only be called recursively from `asap.js`, to resume\n\t    // flushing after an error is thrown into a domain.\n\t    // Conveniently, `setImmediate` was introduced in the same version\n\t    // `process.nextTick` started throwing recursion errors.\n\t    if (flushing && hasSetImmediate) {\n\t        setImmediate(flush);\n\t    } else {\n\t        browser$1.nextTick(flush);\n\t    }\n\t    if (parentDomain) {\n\t        domain.active = browser$1.domain = parentDomain;\n\t    }\n\t}\n\n\tvar rawAsap = raw;\n\tvar freeTasks = [];\n\t/**\n\t * Calls a task as soon as possible after returning, in its own event, with\n\t * priority over IO events. An exception thrown in a task can be handled by\n\t * `process.on(\"uncaughtException\") or `domain.on(\"error\")`, but will otherwise\n\t * crash the process. If the error is handled, all subsequent tasks will\n\t * resume.\n\t *\n\t * @param {{call}} task A callable object, typically a function that takes no\n\t * arguments.\n\t */ var asap_1 = asap$1;\n\tfunction asap$1(task) {\n\t    var rawTask;\n\t    if (freeTasks.length) {\n\t        rawTask = freeTasks.pop();\n\t    } else {\n\t        rawTask = new RawTask();\n\t    }\n\t    rawTask.task = task;\n\t    rawTask.domain = browser$1.domain;\n\t    rawAsap(rawTask);\n\t}\n\tfunction RawTask() {\n\t    this.task = null;\n\t    this.domain = null;\n\t}\n\tRawTask.prototype.call = function() {\n\t    if (this.domain) {\n\t        this.domain.enter();\n\t    }\n\t    var threw = true;\n\t    try {\n\t        this.task.call();\n\t        threw = false;\n\t        // If the task throws an exception (presumably) Node.js restores the\n\t        // domain stack for the next event.\n\t        if (this.domain) {\n\t            this.domain.exit();\n\t        }\n\t    } finally{\n\t        // We use try/finally and a threw flag to avoid messing up stack traces\n\t        // when we catch and release errors.\n\t        if (threw) {\n\t            // In Node.js, uncaught exceptions are considered fatal errors.\n\t            // Re-throw them to interrupt flushing!\n\t            // Ensure that flushing continues if an uncaught exception is\n\t            // suppressed listening process.on(\"uncaughtException\") or\n\t            // domain.on(\"error\").\n\t            rawAsap.requestFlush();\n\t        }\n\t        // If the task threw an error, we do not want to exit the domain here.\n\t        // Exiting the domain would prevent the domain from catching the error.\n\t        this.task = null;\n\t        this.domain = null;\n\t        freeTasks.push(this);\n\t    }\n\t};\n\n\tvar aSyncWaterfall = {exports: {}};\n\n\t(function(module) {\n\t    // MIT license (by Elan Shanker).\n\t    (function(globals) {\n\t        var executeSync = function() {\n\t            var args = Array.prototype.slice.call(arguments);\n\t            if (typeof args[0] === 'function') {\n\t                args[0].apply(null, args.splice(1));\n\t            }\n\t        };\n\t        var executeAsync = function(fn) {\n\t            if (typeof setImmediate === 'function') {\n\t                setImmediate(fn);\n\t            } else if (typeof browser$1 !== 'undefined' && browser$1.nextTick) {\n\t                browser$1.nextTick(fn);\n\t            } else {\n\t                setTimeout(fn, 0);\n\t            }\n\t        };\n\t        var makeIterator = function(tasks) {\n\t            var makeCallback = function(index) {\n\t                var fn = function() {\n\t                    if (tasks.length) {\n\t                        tasks[index].apply(null, arguments);\n\t                    }\n\t                    return fn.next();\n\t                };\n\t                fn.next = function() {\n\t                    return index < tasks.length - 1 ? makeCallback(index + 1) : null;\n\t                };\n\t                return fn;\n\t            };\n\t            return makeCallback(0);\n\t        };\n\t        var _isArray = Array.isArray || function(maybeArray) {\n\t            return Object.prototype.toString.call(maybeArray) === '[object Array]';\n\t        };\n\t        var waterfall = function(tasks, callback, forceAsync) {\n\t            var nextTick = forceAsync ? executeAsync : executeSync;\n\t            callback = callback || function() {};\n\t            if (!_isArray(tasks)) {\n\t                var err = new Error('First argument to waterfall must be an array of functions');\n\t                return callback(err);\n\t            }\n\t            if (!tasks.length) {\n\t                return callback();\n\t            }\n\t            var wrapIterator = function(iterator) {\n\t                return function(err) {\n\t                    if (err) {\n\t                        callback.apply(null, arguments);\n\t                        callback = function() {};\n\t                    } else {\n\t                        var args = Array.prototype.slice.call(arguments, 1);\n\t                        var next = iterator.next();\n\t                        if (next) {\n\t                            args.push(wrapIterator(next));\n\t                        } else {\n\t                            args.push(callback);\n\t                        }\n\t                        nextTick(function() {\n\t                            iterator.apply(null, args);\n\t                        });\n\t                    }\n\t                };\n\t            };\n\t            wrapIterator(makeIterator(tasks))();\n\t        };\n\t        if (module.exports) {\n\t            module.exports = waterfall; // CommonJS\n\t        } else {\n\t            globals.waterfall = waterfall; // <script>\n\t        }\n\t    })(commonjsGlobal);\n\t})(aSyncWaterfall);\n\tvar aSyncWaterfallExports = aSyncWaterfall.exports;\n\n\tvar lib$8 = libExports;\n\tvar whitespaceChars = \" \\n\\t\\r\\xA0\";\n\tvar delimChars = '()[]{}%*-+~/#,:|.<>=!';\n\tvar intChars = '0123456789';\n\tvar BLOCK_START = '{%';\n\tvar BLOCK_END = '%}';\n\tvar VARIABLE_START = '{{';\n\tvar VARIABLE_END = '}}';\n\tvar COMMENT_START = '{#';\n\tvar COMMENT_END = '#}';\n\tvar TOKEN_STRING = 'string';\n\tvar TOKEN_WHITESPACE = 'whitespace';\n\tvar TOKEN_DATA = 'data';\n\tvar TOKEN_BLOCK_START = 'block-start';\n\tvar TOKEN_BLOCK_END = 'block-end';\n\tvar TOKEN_VARIABLE_START = 'variable-start';\n\tvar TOKEN_VARIABLE_END = 'variable-end';\n\tvar TOKEN_COMMENT = 'comment';\n\tvar TOKEN_LEFT_PAREN = 'left-paren';\n\tvar TOKEN_RIGHT_PAREN = 'right-paren';\n\tvar TOKEN_LEFT_BRACKET = 'left-bracket';\n\tvar TOKEN_RIGHT_BRACKET = 'right-bracket';\n\tvar TOKEN_LEFT_CURLY = 'left-curly';\n\tvar TOKEN_RIGHT_CURLY = 'right-curly';\n\tvar TOKEN_OPERATOR = 'operator';\n\tvar TOKEN_COMMA = 'comma';\n\tvar TOKEN_COLON = 'colon';\n\tvar TOKEN_TILDE = 'tilde';\n\tvar TOKEN_PIPE = 'pipe';\n\tvar TOKEN_INT = 'int';\n\tvar TOKEN_FLOAT = 'float';\n\tvar TOKEN_BOOLEAN = 'boolean';\n\tvar TOKEN_NONE = 'none';\n\tvar TOKEN_SYMBOL = 'symbol';\n\tvar TOKEN_SPECIAL = 'special';\n\tvar TOKEN_REGEX = 'regex';\n\tfunction token(type, value, lineno, colno) {\n\t    return {\n\t        type: type,\n\t        value: value,\n\t        lineno: lineno,\n\t        colno: colno\n\t    };\n\t}\n\tvar Tokenizer = /*#__PURE__*/ function() {\n\t    function Tokenizer(str, opts) {\n\t        this.str = str;\n\t        this.index = 0;\n\t        this.len = str.length;\n\t        this.lineno = 0;\n\t        this.colno = 0;\n\t        this.in_code = false;\n\t        opts = opts || {};\n\t        var tags = opts.tags || {};\n\t        this.tags = {\n\t            BLOCK_START: tags.blockStart || BLOCK_START,\n\t            BLOCK_END: tags.blockEnd || BLOCK_END,\n\t            VARIABLE_START: tags.variableStart || VARIABLE_START,\n\t            VARIABLE_END: tags.variableEnd || VARIABLE_END,\n\t            COMMENT_START: tags.commentStart || COMMENT_START,\n\t            COMMENT_END: tags.commentEnd || COMMENT_END\n\t        };\n\t        this.trimBlocks = !!opts.trimBlocks;\n\t        this.lstripBlocks = !!opts.lstripBlocks;\n\t    }\n\t    var _proto = Tokenizer.prototype;\n\t    _proto.nextToken = function nextToken() {\n\t        var lineno = this.lineno;\n\t        var colno = this.colno;\n\t        var tok;\n\t        if (this.in_code) {\n\t            // Otherwise, if we are in a block parse it as code\n\t            var cur = this.current();\n\t            if (this.isFinished()) {\n\t                // We have nothing else to parse\n\t                return null;\n\t            } else if (cur === '\"' || cur === '\\'') {\n\t                // We've hit a string\n\t                return token(TOKEN_STRING, this._parseString(cur), lineno, colno);\n\t            } else if (tok = this._extract(whitespaceChars)) {\n\t                // We hit some whitespace\n\t                return token(TOKEN_WHITESPACE, tok, lineno, colno);\n\t            } else if ((tok = this._extractString(this.tags.BLOCK_END)) || (tok = this._extractString('-' + this.tags.BLOCK_END))) {\n\t                // Special check for the block end tag\n\t                //\n\t                // It is a requirement that start and end tags are composed of\n\t                // delimiter characters (%{}[] etc), and our code always\n\t                // breaks on delimiters so we can assume the token parsing\n\t                // doesn't consume these elsewhere\n\t                this.in_code = false;\n\t                if (this.trimBlocks) {\n\t                    cur = this.current();\n\t                    if (cur === '\\n') {\n\t                        // Skip newline\n\t                        this.forward();\n\t                    } else if (cur === '\\r') {\n\t                        // Skip CRLF newline\n\t                        this.forward();\n\t                        cur = this.current();\n\t                        if (cur === '\\n') {\n\t                            this.forward();\n\t                        } else {\n\t                            // Was not a CRLF, so go back\n\t                            this.back();\n\t                        }\n\t                    }\n\t                }\n\t                return token(TOKEN_BLOCK_END, tok, lineno, colno);\n\t            } else if ((tok = this._extractString(this.tags.VARIABLE_END)) || (tok = this._extractString('-' + this.tags.VARIABLE_END))) {\n\t                // Special check for variable end tag (see above)\n\t                this.in_code = false;\n\t                return token(TOKEN_VARIABLE_END, tok, lineno, colno);\n\t            } else if (cur === 'r' && this.str.charAt(this.index + 1) === '/') {\n\t                // Skip past 'r/'.\n\t                this.forwardN(2);\n\t                // Extract until the end of the regex -- / ends it, \\/ does not.\n\t                var regexBody = '';\n\t                while(!this.isFinished()){\n\t                    if (this.current() === '/' && this.previous() !== '\\\\') {\n\t                        this.forward();\n\t                        break;\n\t                    } else {\n\t                        regexBody += this.current();\n\t                        this.forward();\n\t                    }\n\t                }\n\t                // Check for flags.\n\t                // The possible flags are according to https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/RegExp)\n\t                var POSSIBLE_FLAGS = [\n\t                    'g',\n\t                    'i',\n\t                    'm',\n\t                    'y'\n\t                ];\n\t                var regexFlags = '';\n\t                while(!this.isFinished()){\n\t                    var isCurrentAFlag = POSSIBLE_FLAGS.indexOf(this.current()) !== -1;\n\t                    if (isCurrentAFlag) {\n\t                        regexFlags += this.current();\n\t                        this.forward();\n\t                    } else {\n\t                        break;\n\t                    }\n\t                }\n\t                return token(TOKEN_REGEX, {\n\t                    body: regexBody,\n\t                    flags: regexFlags\n\t                }, lineno, colno);\n\t            } else if (delimChars.indexOf(cur) !== -1) {\n\t                // We've hit a delimiter (a special char like a bracket)\n\t                this.forward();\n\t                var complexOps = [\n\t                    '==',\n\t                    '===',\n\t                    '!=',\n\t                    '!==',\n\t                    '<=',\n\t                    '>=',\n\t                    '//',\n\t                    '**'\n\t                ];\n\t                var curComplex = cur + this.current();\n\t                var type;\n\t                if (lib$8.indexOf(complexOps, curComplex) !== -1) {\n\t                    this.forward();\n\t                    cur = curComplex;\n\t                    // See if this is a strict equality/inequality comparator\n\t                    if (lib$8.indexOf(complexOps, curComplex + this.current()) !== -1) {\n\t                        cur = curComplex + this.current();\n\t                        this.forward();\n\t                    }\n\t                }\n\t                switch(cur){\n\t                    case '(':\n\t                        type = TOKEN_LEFT_PAREN;\n\t                        break;\n\t                    case ')':\n\t                        type = TOKEN_RIGHT_PAREN;\n\t                        break;\n\t                    case '[':\n\t                        type = TOKEN_LEFT_BRACKET;\n\t                        break;\n\t                    case ']':\n\t                        type = TOKEN_RIGHT_BRACKET;\n\t                        break;\n\t                    case '{':\n\t                        type = TOKEN_LEFT_CURLY;\n\t                        break;\n\t                    case '}':\n\t                        type = TOKEN_RIGHT_CURLY;\n\t                        break;\n\t                    case ',':\n\t                        type = TOKEN_COMMA;\n\t                        break;\n\t                    case ':':\n\t                        type = TOKEN_COLON;\n\t                        break;\n\t                    case '~':\n\t                        type = TOKEN_TILDE;\n\t                        break;\n\t                    case '|':\n\t                        type = TOKEN_PIPE;\n\t                        break;\n\t                    default:\n\t                        type = TOKEN_OPERATOR;\n\t                }\n\t                return token(type, cur, lineno, colno);\n\t            } else {\n\t                // We are not at whitespace or a delimiter, so extract the\n\t                // text and parse it\n\t                tok = this._extractUntil(whitespaceChars + delimChars);\n\t                if (tok.match(/^[-+]?[0-9]+$/)) {\n\t                    if (this.current() === '.') {\n\t                        this.forward();\n\t                        var dec = this._extract(intChars);\n\t                        return token(TOKEN_FLOAT, tok + '.' + dec, lineno, colno);\n\t                    } else {\n\t                        return token(TOKEN_INT, tok, lineno, colno);\n\t                    }\n\t                } else if (tok.match(/^(true|false)$/)) {\n\t                    return token(TOKEN_BOOLEAN, tok, lineno, colno);\n\t                } else if (tok === 'none') {\n\t                    return token(TOKEN_NONE, tok, lineno, colno);\n\t                /*\n\t           * Added to make the test `null is null` evaluate truthily.\n\t           * Otherwise, Nunjucks will look up null in the context and\n\t           * return `undefined`, which is not what we want. This *may* have\n\t           * consequences is someone is using null in their templates as a\n\t           * variable.\n\t           */ } else if (tok === 'null') {\n\t                    return token(TOKEN_NONE, tok, lineno, colno);\n\t                } else if (tok) {\n\t                    return token(TOKEN_SYMBOL, tok, lineno, colno);\n\t                } else {\n\t                    throw new Error('Unexpected value while parsing: ' + tok);\n\t                }\n\t            }\n\t        } else {\n\t            // Parse out the template text, breaking on tag\n\t            // delimiters because we need to look for block/variable start\n\t            // tags (don't use the full delimChars for optimization)\n\t            var beginChars = this.tags.BLOCK_START.charAt(0) + this.tags.VARIABLE_START.charAt(0) + this.tags.COMMENT_START.charAt(0) + this.tags.COMMENT_END.charAt(0);\n\t            if (this.isFinished()) {\n\t                return null;\n\t            } else if ((tok = this._extractString(this.tags.BLOCK_START + '-')) || (tok = this._extractString(this.tags.BLOCK_START))) {\n\t                this.in_code = true;\n\t                return token(TOKEN_BLOCK_START, tok, lineno, colno);\n\t            } else if ((tok = this._extractString(this.tags.VARIABLE_START + '-')) || (tok = this._extractString(this.tags.VARIABLE_START))) {\n\t                this.in_code = true;\n\t                return token(TOKEN_VARIABLE_START, tok, lineno, colno);\n\t            } else {\n\t                tok = '';\n\t                var data;\n\t                var inComment = false;\n\t                if (this._matches(this.tags.COMMENT_START)) {\n\t                    inComment = true;\n\t                    tok = this._extractString(this.tags.COMMENT_START);\n\t                }\n\t                // Continually consume text, breaking on the tag delimiter\n\t                // characters and checking to see if it's a start tag.\n\t                //\n\t                // We could hit the end of the template in the middle of\n\t                // our looping, so check for the null return value from\n\t                // _extractUntil\n\t                while((data = this._extractUntil(beginChars)) !== null){\n\t                    tok += data;\n\t                    if ((this._matches(this.tags.BLOCK_START) || this._matches(this.tags.VARIABLE_START) || this._matches(this.tags.COMMENT_START)) && !inComment) {\n\t                        if (this.lstripBlocks && this._matches(this.tags.BLOCK_START) && this.colno > 0 && this.colno <= tok.length) {\n\t                            var lastLine = tok.slice(-this.colno);\n\t                            if (/^\\s+$/.test(lastLine)) {\n\t                                // Remove block leading whitespace from beginning of the string\n\t                                tok = tok.slice(0, -this.colno);\n\t                                if (!tok.length) {\n\t                                    // All data removed, collapse to avoid unnecessary nodes\n\t                                    // by returning next token (block start)\n\t                                    return this.nextToken();\n\t                                }\n\t                            }\n\t                        }\n\t                        break;\n\t                    } else if (this._matches(this.tags.COMMENT_END)) {\n\t                        if (!inComment) {\n\t                            throw new Error('unexpected end of comment');\n\t                        }\n\t                        tok += this._extractString(this.tags.COMMENT_END);\n\t                        break;\n\t                    } else {\n\t                        // It does not match any tag, so add the character and\n\t                        // carry on\n\t                        tok += this.current();\n\t                        this.forward();\n\t                    }\n\t                }\n\t                if (data === null && inComment) {\n\t                    throw new Error('expected end of comment, got end of file');\n\t                }\n\t                return token(inComment ? TOKEN_COMMENT : TOKEN_DATA, tok, lineno, colno);\n\t            }\n\t        }\n\t    };\n\t    _proto._parseString = function _parseString(delimiter) {\n\t        this.forward();\n\t        var str = '';\n\t        while(!this.isFinished() && this.current() !== delimiter){\n\t            var cur = this.current();\n\t            if (cur === '\\\\') {\n\t                this.forward();\n\t                switch(this.current()){\n\t                    case 'n':\n\t                        str += '\\n';\n\t                        break;\n\t                    case 't':\n\t                        str += '\\t';\n\t                        break;\n\t                    case 'r':\n\t                        str += '\\r';\n\t                        break;\n\t                    default:\n\t                        str += this.current();\n\t                }\n\t                this.forward();\n\t            } else {\n\t                str += cur;\n\t                this.forward();\n\t            }\n\t        }\n\t        this.forward();\n\t        return str;\n\t    };\n\t    _proto._matches = function _matches(str) {\n\t        if (this.index + str.length > this.len) {\n\t            return null;\n\t        }\n\t        var m = this.str.slice(this.index, this.index + str.length);\n\t        return m === str;\n\t    };\n\t    _proto._extractString = function _extractString(str) {\n\t        if (this._matches(str)) {\n\t            this.forwardN(str.length);\n\t            return str;\n\t        }\n\t        return null;\n\t    };\n\t    _proto._extractUntil = function _extractUntil(charString) {\n\t        // Extract all non-matching chars, with the default matching set\n\t        // to everything\n\t        return this._extractMatching(true, charString || '');\n\t    };\n\t    _proto._extract = function _extract(charString) {\n\t        // Extract all matching chars (no default, so charString must be\n\t        // explicit)\n\t        return this._extractMatching(false, charString);\n\t    };\n\t    _proto._extractMatching = function _extractMatching(breakOnMatch, charString) {\n\t        // Pull out characters until a breaking char is hit.\n\t        // If breakOnMatch is false, a non-matching char stops it.\n\t        // If breakOnMatch is true, a matching char stops it.\n\t        if (this.isFinished()) {\n\t            return null;\n\t        }\n\t        var first = charString.indexOf(this.current());\n\t        // Only proceed if the first character doesn't meet our condition\n\t        if (breakOnMatch && first === -1 || !breakOnMatch && first !== -1) {\n\t            var t = this.current();\n\t            this.forward();\n\t            // And pull out all the chars one at a time until we hit a\n\t            // breaking char\n\t            var idx = charString.indexOf(this.current());\n\t            while((breakOnMatch && idx === -1 || !breakOnMatch && idx !== -1) && !this.isFinished()){\n\t                t += this.current();\n\t                this.forward();\n\t                idx = charString.indexOf(this.current());\n\t            }\n\t            return t;\n\t        }\n\t        return '';\n\t    };\n\t    _proto._extractRegex = function _extractRegex(regex) {\n\t        var matches = this.currentStr().match(regex);\n\t        if (!matches) {\n\t            return null;\n\t        }\n\t        // Move forward whatever was matched\n\t        this.forwardN(matches[0].length);\n\t        return matches;\n\t    };\n\t    _proto.isFinished = function isFinished() {\n\t        return this.index >= this.len;\n\t    };\n\t    _proto.forwardN = function forwardN(n) {\n\t        for(var i = 0; i < n; i++){\n\t            this.forward();\n\t        }\n\t    };\n\t    _proto.forward = function forward() {\n\t        this.index++;\n\t        if (this.previous() === '\\n') {\n\t            this.lineno++;\n\t            this.colno = 0;\n\t        } else {\n\t            this.colno++;\n\t        }\n\t    };\n\t    _proto.backN = function backN(n) {\n\t        for(var i = 0; i < n; i++){\n\t            this.back();\n\t        }\n\t    };\n\t    _proto.back = function back() {\n\t        this.index--;\n\t        if (this.current() === '\\n') {\n\t            this.lineno--;\n\t            var idx = this.src.lastIndexOf('\\n', this.index - 1);\n\t            if (idx === -1) {\n\t                this.colno = this.index;\n\t            } else {\n\t                this.colno = this.index - idx;\n\t            }\n\t        } else {\n\t            this.colno--;\n\t        }\n\t    };\n\t    _proto.current = function current() {\n\t        if (!this.isFinished()) {\n\t            return this.str.charAt(this.index);\n\t        }\n\t        return '';\n\t    };\n\t    _proto.currentStr = function currentStr() {\n\t        if (!this.isFinished()) {\n\t            return this.str.substr(this.index);\n\t        }\n\t        return '';\n\t    };\n\t    _proto.previous = function previous() {\n\t        return this.str.charAt(this.index - 1);\n\t    };\n\t    return Tokenizer;\n\t}();\n\tvar lexer$2 = {\n\t    lex: function lex(src, opts) {\n\t        return new Tokenizer(src, opts);\n\t    },\n\t    TOKEN_STRING: TOKEN_STRING,\n\t    TOKEN_WHITESPACE: TOKEN_WHITESPACE,\n\t    TOKEN_DATA: TOKEN_DATA,\n\t    TOKEN_BLOCK_START: TOKEN_BLOCK_START,\n\t    TOKEN_BLOCK_END: TOKEN_BLOCK_END,\n\t    TOKEN_VARIABLE_START: TOKEN_VARIABLE_START,\n\t    TOKEN_VARIABLE_END: TOKEN_VARIABLE_END,\n\t    TOKEN_COMMENT: TOKEN_COMMENT,\n\t    TOKEN_LEFT_PAREN: TOKEN_LEFT_PAREN,\n\t    TOKEN_RIGHT_PAREN: TOKEN_RIGHT_PAREN,\n\t    TOKEN_LEFT_BRACKET: TOKEN_LEFT_BRACKET,\n\t    TOKEN_RIGHT_BRACKET: TOKEN_RIGHT_BRACKET,\n\t    TOKEN_LEFT_CURLY: TOKEN_LEFT_CURLY,\n\t    TOKEN_RIGHT_CURLY: TOKEN_RIGHT_CURLY,\n\t    TOKEN_OPERATOR: TOKEN_OPERATOR,\n\t    TOKEN_COMMA: TOKEN_COMMA,\n\t    TOKEN_COLON: TOKEN_COLON,\n\t    TOKEN_TILDE: TOKEN_TILDE,\n\t    TOKEN_PIPE: TOKEN_PIPE,\n\t    TOKEN_INT: TOKEN_INT,\n\t    TOKEN_FLOAT: TOKEN_FLOAT,\n\t    TOKEN_BOOLEAN: TOKEN_BOOLEAN,\n\t    TOKEN_NONE: TOKEN_NONE,\n\t    TOKEN_SYMBOL: TOKEN_SYMBOL,\n\t    TOKEN_SPECIAL: TOKEN_SPECIAL,\n\t    TOKEN_REGEX: TOKEN_REGEX\n\t};\n\n\tvar require$$0$1 = /*@__PURE__*/getAugmentedNamespace(_polyfillNode_events);\n\n\t// A simple class system, more documentation to come\n\tfunction _defineProperties$1(target, props) {\n\t    for(var i = 0; i < props.length; i++){\n\t        var descriptor = props[i];\n\t        descriptor.enumerable = descriptor.enumerable || false;\n\t        descriptor.configurable = true;\n\t        if (\"value\" in descriptor) descriptor.writable = true;\n\t        Object.defineProperty(target, _toPropertyKey$1(descriptor.key), descriptor);\n\t    }\n\t}\n\tfunction _createClass$1(Constructor, protoProps, staticProps) {\n\t    if (protoProps) _defineProperties$1(Constructor.prototype, protoProps);\n\t    Object.defineProperty(Constructor, \"prototype\", {\n\t        writable: false\n\t    });\n\t    return Constructor;\n\t}\n\tfunction _toPropertyKey$1(arg) {\n\t    var key = _toPrimitive$1(arg, \"string\");\n\t    return typeof key === \"symbol\" ? key : String(key);\n\t}\n\tfunction _toPrimitive$1(input, hint) {\n\t    if (typeof input !== \"object\" || input === null) return input;\n\t    var prim = input[Symbol.toPrimitive];\n\t    if (prim !== undefined) {\n\t        var res = prim.call(input, hint);\n\t        if (typeof res !== \"object\") return res;\n\t        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n\t    }\n\t    return (String )(input);\n\t}\n\tfunction _inheritsLoose$7(subClass, superClass) {\n\t    subClass.prototype = Object.create(superClass.prototype);\n\t    subClass.prototype.constructor = subClass;\n\t    _setPrototypeOf$7(subClass, superClass);\n\t}\n\tfunction _setPrototypeOf$7(o, p) {\n\t    _setPrototypeOf$7 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n\t        o.__proto__ = p;\n\t        return o;\n\t    };\n\t    return _setPrototypeOf$7(o, p);\n\t}\n\tvar EventEmitter = require$$0$1;\n\tvar lib$7 = libExports;\n\tfunction parentWrap(parent, prop) {\n\t    if (typeof parent !== 'function' || typeof prop !== 'function') {\n\t        return prop;\n\t    }\n\t    return function wrap() {\n\t        // Save the current parent method\n\t        var tmp = this.parent;\n\t        // Set parent to the previous method, call, and restore\n\t        this.parent = parent;\n\t        var res = prop.apply(this, arguments);\n\t        this.parent = tmp;\n\t        return res;\n\t    };\n\t}\n\tfunction extendClass(cls, name, props) {\n\t    props = props || {};\n\t    lib$7.keys(props).forEach(function(k) {\n\t        props[k] = parentWrap(cls.prototype[k], props[k]);\n\t    });\n\t    var subclass = /*#__PURE__*/ function(_cls) {\n\t        _inheritsLoose$7(subclass, _cls);\n\t        function subclass() {\n\t            return _cls.apply(this, arguments) || this;\n\t        }\n\t        _createClass$1(subclass, [\n\t            {\n\t                key: \"typename\",\n\t                get: function get() {\n\t                    return name;\n\t                }\n\t            }\n\t        ]);\n\t        return subclass;\n\t    }(cls);\n\t    lib$7._assign(subclass.prototype, props);\n\t    return subclass;\n\t}\n\tvar Obj$4 = /*#__PURE__*/ function() {\n\t    function Obj() {\n\t        // Unfortunately necessary for backwards compatibility\n\t        this.init.apply(this, arguments);\n\t    }\n\t    var _proto = Obj.prototype;\n\t    _proto.init = function init() {};\n\t    Obj.extend = function extend(name, props) {\n\t        if (typeof name === 'object') {\n\t            props = name;\n\t            name = 'anonymous';\n\t        }\n\t        return extendClass(this, name, props);\n\t    };\n\t    _createClass$1(Obj, [\n\t        {\n\t            key: \"typename\",\n\t            get: function get() {\n\t                return this.constructor.name;\n\t            }\n\t        }\n\t    ]);\n\t    return Obj;\n\t}();\n\tvar EmitterObj$2 = /*#__PURE__*/ function(_EventEmitter) {\n\t    _inheritsLoose$7(EmitterObj, _EventEmitter);\n\t    function EmitterObj() {\n\t        var _this2;\n\t        var _this;\n\t        _this = _EventEmitter.call(this) || this;\n\t        // Unfortunately necessary for backwards compatibility\n\t        (_this2 = _this).init.apply(_this2, arguments);\n\t        return _this;\n\t    }\n\t    var _proto2 = EmitterObj.prototype;\n\t    _proto2.init = function init() {};\n\t    EmitterObj.extend = function extend(name, props) {\n\t        if (typeof name === 'object') {\n\t            props = name;\n\t            name = 'anonymous';\n\t        }\n\t        return extendClass(this, name, props);\n\t    };\n\t    _createClass$1(EmitterObj, [\n\t        {\n\t            key: \"typename\",\n\t            get: function get() {\n\t                return this.constructor.name;\n\t            }\n\t        }\n\t    ]);\n\t    return EmitterObj;\n\t}(EventEmitter);\n\tvar object = {\n\t    Obj: Obj$4,\n\t    EmitterObj: EmitterObj$2\n\t};\n\n\tfunction _defineProperties(target, props) {\n\t    for(var i = 0; i < props.length; i++){\n\t        var descriptor = props[i];\n\t        descriptor.enumerable = descriptor.enumerable || false;\n\t        descriptor.configurable = true;\n\t        if (\"value\" in descriptor) descriptor.writable = true;\n\t        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n\t    }\n\t}\n\tfunction _createClass(Constructor, protoProps, staticProps) {\n\t    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n\t    Object.defineProperty(Constructor, \"prototype\", {\n\t        writable: false\n\t    });\n\t    return Constructor;\n\t}\n\tfunction _toPropertyKey(arg) {\n\t    var key = _toPrimitive(arg, \"string\");\n\t    return typeof key === \"symbol\" ? key : String(key);\n\t}\n\tfunction _toPrimitive(input, hint) {\n\t    if (typeof input !== \"object\" || input === null) return input;\n\t    var prim = input[Symbol.toPrimitive];\n\t    if (prim !== undefined) {\n\t        var res = prim.call(input, hint);\n\t        if (typeof res !== \"object\") return res;\n\t        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n\t    }\n\t    return (String )(input);\n\t}\n\tfunction _inheritsLoose$6(subClass, superClass) {\n\t    subClass.prototype = Object.create(superClass.prototype);\n\t    subClass.prototype.constructor = subClass;\n\t    _setPrototypeOf$6(subClass, superClass);\n\t}\n\tfunction _setPrototypeOf$6(o, p) {\n\t    _setPrototypeOf$6 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n\t        o.__proto__ = p;\n\t        return o;\n\t    };\n\t    return _setPrototypeOf$6(o, p);\n\t}\n\tvar _require$6 = object, Obj$3 = _require$6.Obj;\n\tfunction traverseAndCheck(obj, type, results) {\n\t    if (obj instanceof type) {\n\t        results.push(obj);\n\t    }\n\t    if (obj instanceof Node) {\n\t        obj.findAll(type, results);\n\t    }\n\t}\n\tvar Node = /*#__PURE__*/ function(_Obj) {\n\t    _inheritsLoose$6(Node, _Obj);\n\t    function Node() {\n\t        return _Obj.apply(this, arguments) || this;\n\t    }\n\t    var _proto = Node.prototype;\n\t    _proto.init = function init(lineno, colno) {\n\t        var _arguments = arguments, _this = this;\n\t        for(var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++){\n\t            args[_key - 2] = arguments[_key];\n\t        }\n\t        this.lineno = lineno;\n\t        this.colno = colno;\n\t        this.fields.forEach(function(field, i) {\n\t            // The first two args are line/col numbers, so offset by 2\n\t            var val = _arguments[i + 2];\n\t            // Fields should never be undefined, but null. It makes\n\t            // testing easier to normalize values.\n\t            if (val === undefined) {\n\t                val = null;\n\t            }\n\t            _this[field] = val;\n\t        });\n\t    };\n\t    _proto.findAll = function findAll(type, results) {\n\t        var _this2 = this;\n\t        results = results || [];\n\t        if (this instanceof NodeList) {\n\t            this.children.forEach(function(child) {\n\t                return traverseAndCheck(child, type, results);\n\t            });\n\t        } else {\n\t            this.fields.forEach(function(field) {\n\t                return traverseAndCheck(_this2[field], type, results);\n\t            });\n\t        }\n\t        return results;\n\t    };\n\t    _proto.iterFields = function iterFields(func) {\n\t        var _this3 = this;\n\t        this.fields.forEach(function(field) {\n\t            func(_this3[field], field);\n\t        });\n\t    };\n\t    return Node;\n\t}(Obj$3); // Abstract nodes\n\tvar Value = /*#__PURE__*/ function(_Node) {\n\t    _inheritsLoose$6(Value, _Node);\n\t    function Value() {\n\t        return _Node.apply(this, arguments) || this;\n\t    }\n\t    _createClass(Value, [\n\t        {\n\t            key: \"typename\",\n\t            get: function get() {\n\t                return 'Value';\n\t            }\n\t        },\n\t        {\n\t            key: \"fields\",\n\t            get: function get() {\n\t                return [\n\t                    'value'\n\t                ];\n\t            }\n\t        }\n\t    ]);\n\t    return Value;\n\t}(Node); // Concrete nodes\n\tvar NodeList = /*#__PURE__*/ function(_Node2) {\n\t    _inheritsLoose$6(NodeList, _Node2);\n\t    function NodeList() {\n\t        return _Node2.apply(this, arguments) || this;\n\t    }\n\t    var _proto2 = NodeList.prototype;\n\t    _proto2.init = function init(lineno, colno, nodes) {\n\t        _Node2.prototype.init.call(this, lineno, colno, nodes || []);\n\t    };\n\t    _proto2.addChild = function addChild(node) {\n\t        this.children.push(node);\n\t    };\n\t    _createClass(NodeList, [\n\t        {\n\t            key: \"typename\",\n\t            get: function get() {\n\t                return 'NodeList';\n\t            }\n\t        },\n\t        {\n\t            key: \"fields\",\n\t            get: function get() {\n\t                return [\n\t                    'children'\n\t                ];\n\t            }\n\t        }\n\t    ]);\n\t    return NodeList;\n\t}(Node);\n\tvar Root = NodeList.extend('Root');\n\tvar Literal = Value.extend('Literal');\n\tvar _Symbol = Value.extend('Symbol');\n\tvar Group = NodeList.extend('Group');\n\tvar ArrayNode = NodeList.extend('Array');\n\tvar Pair = Node.extend('Pair', {\n\t    fields: [\n\t        'key',\n\t        'value'\n\t    ]\n\t});\n\tvar Dict = NodeList.extend('Dict');\n\tvar LookupVal = Node.extend('LookupVal', {\n\t    fields: [\n\t        'target',\n\t        'val'\n\t    ]\n\t});\n\tvar If = Node.extend('If', {\n\t    fields: [\n\t        'cond',\n\t        'body',\n\t        'else_'\n\t    ]\n\t});\n\tvar IfAsync = If.extend('IfAsync');\n\tvar InlineIf = Node.extend('InlineIf', {\n\t    fields: [\n\t        'cond',\n\t        'body',\n\t        'else_'\n\t    ]\n\t});\n\tvar For = Node.extend('For', {\n\t    fields: [\n\t        'arr',\n\t        'name',\n\t        'body',\n\t        'else_'\n\t    ]\n\t});\n\tvar AsyncEach = For.extend('AsyncEach');\n\tvar AsyncAll = For.extend('AsyncAll');\n\tvar Macro = Node.extend('Macro', {\n\t    fields: [\n\t        'name',\n\t        'args',\n\t        'body'\n\t    ]\n\t});\n\tvar Caller = Macro.extend('Caller');\n\tvar Import = Node.extend('Import', {\n\t    fields: [\n\t        'template',\n\t        'target',\n\t        'withContext'\n\t    ]\n\t});\n\tvar FromImport = /*#__PURE__*/ function(_Node3) {\n\t    _inheritsLoose$6(FromImport, _Node3);\n\t    function FromImport() {\n\t        return _Node3.apply(this, arguments) || this;\n\t    }\n\t    var _proto3 = FromImport.prototype;\n\t    _proto3.init = function init(lineno, colno, template, names, withContext) {\n\t        _Node3.prototype.init.call(this, lineno, colno, template, names || new NodeList(), withContext);\n\t    };\n\t    _createClass(FromImport, [\n\t        {\n\t            key: \"typename\",\n\t            get: function get() {\n\t                return 'FromImport';\n\t            }\n\t        },\n\t        {\n\t            key: \"fields\",\n\t            get: function get() {\n\t                return [\n\t                    'template',\n\t                    'names',\n\t                    'withContext'\n\t                ];\n\t            }\n\t        }\n\t    ]);\n\t    return FromImport;\n\t}(Node);\n\tvar FunCall = Node.extend('FunCall', {\n\t    fields: [\n\t        'name',\n\t        'args'\n\t    ]\n\t});\n\tvar Filter = FunCall.extend('Filter');\n\tvar FilterAsync = Filter.extend('FilterAsync', {\n\t    fields: [\n\t        'name',\n\t        'args',\n\t        'symbol'\n\t    ]\n\t});\n\tvar KeywordArgs = Dict.extend('KeywordArgs');\n\tvar Block = Node.extend('Block', {\n\t    fields: [\n\t        'name',\n\t        'body'\n\t    ]\n\t});\n\tvar Super = Node.extend('Super', {\n\t    fields: [\n\t        'blockName',\n\t        'symbol'\n\t    ]\n\t});\n\tvar TemplateRef = Node.extend('TemplateRef', {\n\t    fields: [\n\t        'template'\n\t    ]\n\t});\n\tvar Extends = TemplateRef.extend('Extends');\n\tvar Include = Node.extend('Include', {\n\t    fields: [\n\t        'template',\n\t        'ignoreMissing'\n\t    ]\n\t});\n\tvar Set$1 = Node.extend('Set', {\n\t    fields: [\n\t        'targets',\n\t        'value'\n\t    ]\n\t});\n\tvar Switch = Node.extend('Switch', {\n\t    fields: [\n\t        'expr',\n\t        'cases',\n\t        'default'\n\t    ]\n\t});\n\tvar Case = Node.extend('Case', {\n\t    fields: [\n\t        'cond',\n\t        'body'\n\t    ]\n\t});\n\tvar Output = NodeList.extend('Output');\n\tvar Capture = Node.extend('Capture', {\n\t    fields: [\n\t        'body'\n\t    ]\n\t});\n\tvar TemplateData = Literal.extend('TemplateData');\n\tvar UnaryOp = Node.extend('UnaryOp', {\n\t    fields: [\n\t        'target'\n\t    ]\n\t});\n\tvar BinOp = Node.extend('BinOp', {\n\t    fields: [\n\t        'left',\n\t        'right'\n\t    ]\n\t});\n\tvar In = BinOp.extend('In');\n\tvar Is = BinOp.extend('Is');\n\tvar Or = BinOp.extend('Or');\n\tvar And = BinOp.extend('And');\n\tvar Not = UnaryOp.extend('Not');\n\tvar Add = BinOp.extend('Add');\n\tvar Concat = BinOp.extend('Concat');\n\tvar Sub = BinOp.extend('Sub');\n\tvar Mul = BinOp.extend('Mul');\n\tvar Div = BinOp.extend('Div');\n\tvar FloorDiv = BinOp.extend('FloorDiv');\n\tvar Mod = BinOp.extend('Mod');\n\tvar Pow = BinOp.extend('Pow');\n\tvar Neg = UnaryOp.extend('Neg');\n\tvar Pos = UnaryOp.extend('Pos');\n\tvar Compare = Node.extend('Compare', {\n\t    fields: [\n\t        'expr',\n\t        'ops'\n\t    ]\n\t});\n\tvar CompareOperand = Node.extend('CompareOperand', {\n\t    fields: [\n\t        'expr',\n\t        'type'\n\t    ]\n\t});\n\tvar CallExtension = Node.extend('CallExtension', {\n\t    init: function init(ext, prop, args, contentArgs) {\n\t        this.parent();\n\t        this.extName = ext.__name || ext;\n\t        this.prop = prop;\n\t        this.args = args || new NodeList();\n\t        this.contentArgs = contentArgs || [];\n\t        this.autoescape = ext.autoescape;\n\t    },\n\t    fields: [\n\t        'extName',\n\t        'prop',\n\t        'args',\n\t        'contentArgs'\n\t    ]\n\t});\n\tvar CallExtensionAsync = CallExtension.extend('CallExtensionAsync');\n\t// This is hacky, but this is just a debugging function anyway\n\tfunction print(str, indent, inline) {\n\t    var lines = str.split('\\n');\n\t    lines.forEach(function(line, i) {\n\t        if (line && (inline && i > 0 || !inline)) {\n\t            browser$1.stdout.write(' '.repeat(indent));\n\t        }\n\t        var nl = i === lines.length - 1 ? '' : '\\n';\n\t        browser$1.stdout.write(\"\" + line + nl);\n\t    });\n\t}\n\t// Print the AST in a nicely formatted tree format for debuggin\n\tfunction printNodes(node, indent) {\n\t    indent = indent || 0;\n\t    print(node.typename + ': ', indent);\n\t    if (node instanceof NodeList) {\n\t        print('\\n');\n\t        node.children.forEach(function(n) {\n\t            printNodes(n, indent + 2);\n\t        });\n\t    } else if (node instanceof CallExtension) {\n\t        print(node.extName + \".\" + node.prop + \"\\n\");\n\t        if (node.args) {\n\t            printNodes(node.args, indent + 2);\n\t        }\n\t        if (node.contentArgs) {\n\t            node.contentArgs.forEach(function(n) {\n\t                printNodes(n, indent + 2);\n\t            });\n\t        }\n\t    } else {\n\t        var nodes = [];\n\t        var props = null;\n\t        node.iterFields(function(val, fieldName) {\n\t            if (val instanceof Node) {\n\t                nodes.push([\n\t                    fieldName,\n\t                    val\n\t                ]);\n\t            } else {\n\t                props = props || {};\n\t                props[fieldName] = val;\n\t            }\n\t        });\n\t        if (props) {\n\t            print(JSON.stringify(props, null, 2) + '\\n', null, true);\n\t        } else {\n\t            print('\\n');\n\t        }\n\t        nodes.forEach(function(_ref) {\n\t            var fieldName = _ref[0], n = _ref[1];\n\t            print(\"[\" + fieldName + \"] =>\", indent + 2);\n\t            printNodes(n, indent + 4);\n\t        });\n\t    }\n\t}\n\tvar nodes$4 = {\n\t    Node: Node,\n\t    Root: Root,\n\t    NodeList: NodeList,\n\t    Value: Value,\n\t    Literal: Literal,\n\t    Symbol: _Symbol,\n\t    Group: Group,\n\t    Array: ArrayNode,\n\t    Pair: Pair,\n\t    Dict: Dict,\n\t    Output: Output,\n\t    Capture: Capture,\n\t    TemplateData: TemplateData,\n\t    If: If,\n\t    IfAsync: IfAsync,\n\t    InlineIf: InlineIf,\n\t    For: For,\n\t    AsyncEach: AsyncEach,\n\t    AsyncAll: AsyncAll,\n\t    Macro: Macro,\n\t    Caller: Caller,\n\t    Import: Import,\n\t    FromImport: FromImport,\n\t    FunCall: FunCall,\n\t    Filter: Filter,\n\t    FilterAsync: FilterAsync,\n\t    KeywordArgs: KeywordArgs,\n\t    Block: Block,\n\t    Super: Super,\n\t    Extends: Extends,\n\t    Include: Include,\n\t    Set: Set$1,\n\t    Switch: Switch,\n\t    Case: Case,\n\t    LookupVal: LookupVal,\n\t    BinOp: BinOp,\n\t    In: In,\n\t    Is: Is,\n\t    Or: Or,\n\t    And: And,\n\t    Not: Not,\n\t    Add: Add,\n\t    Concat: Concat,\n\t    Sub: Sub,\n\t    Mul: Mul,\n\t    Div: Div,\n\t    FloorDiv: FloorDiv,\n\t    Mod: Mod,\n\t    Pow: Pow,\n\t    Neg: Neg,\n\t    Pos: Pos,\n\t    Compare: Compare,\n\t    CompareOperand: CompareOperand,\n\t    CallExtension: CallExtension,\n\t    CallExtensionAsync: CallExtensionAsync,\n\t    printNodes: printNodes\n\t};\n\n\tfunction _inheritsLoose$5(subClass, superClass) {\n\t    subClass.prototype = Object.create(superClass.prototype);\n\t    subClass.prototype.constructor = subClass;\n\t    _setPrototypeOf$5(subClass, superClass);\n\t}\n\tfunction _setPrototypeOf$5(o, p) {\n\t    _setPrototypeOf$5 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n\t        o.__proto__ = p;\n\t        return o;\n\t    };\n\t    return _setPrototypeOf$5(o, p);\n\t}\n\tvar lexer$1 = lexer$2;\n\tvar nodes$3 = nodes$4;\n\tvar Obj$2 = object.Obj;\n\tvar lib$6 = libExports;\n\tvar Parser = /*#__PURE__*/ function(_Obj) {\n\t    _inheritsLoose$5(Parser, _Obj);\n\t    function Parser() {\n\t        return _Obj.apply(this, arguments) || this;\n\t    }\n\t    var _proto = Parser.prototype;\n\t    _proto.init = function init(tokens) {\n\t        this.tokens = tokens;\n\t        this.peeked = null;\n\t        this.breakOnBlocks = null;\n\t        this.dropLeadingWhitespace = false;\n\t        this.extensions = [];\n\t    };\n\t    _proto.nextToken = function nextToken(withWhitespace) {\n\t        var tok;\n\t        if (this.peeked) {\n\t            if (!withWhitespace && this.peeked.type === lexer$1.TOKEN_WHITESPACE) {\n\t                this.peeked = null;\n\t            } else {\n\t                tok = this.peeked;\n\t                this.peeked = null;\n\t                return tok;\n\t            }\n\t        }\n\t        tok = this.tokens.nextToken();\n\t        if (!withWhitespace) {\n\t            while(tok && tok.type === lexer$1.TOKEN_WHITESPACE){\n\t                tok = this.tokens.nextToken();\n\t            }\n\t        }\n\t        return tok;\n\t    };\n\t    _proto.peekToken = function peekToken() {\n\t        this.peeked = this.peeked || this.nextToken();\n\t        return this.peeked;\n\t    };\n\t    _proto.pushToken = function pushToken(tok) {\n\t        if (this.peeked) {\n\t            throw new Error('pushToken: can only push one token on between reads');\n\t        }\n\t        this.peeked = tok;\n\t    };\n\t    _proto.error = function error(msg, lineno, colno) {\n\t        if (lineno === undefined || colno === undefined) {\n\t            var tok = this.peekToken() || {};\n\t            lineno = tok.lineno;\n\t            colno = tok.colno;\n\t        }\n\t        if (lineno !== undefined) {\n\t            lineno += 1;\n\t        }\n\t        if (colno !== undefined) {\n\t            colno += 1;\n\t        }\n\t        return new lib$6.TemplateError(msg, lineno, colno);\n\t    };\n\t    _proto.fail = function fail(msg, lineno, colno) {\n\t        throw this.error(msg, lineno, colno);\n\t    };\n\t    _proto.skip = function skip(type) {\n\t        var tok = this.nextToken();\n\t        if (!tok || tok.type !== type) {\n\t            this.pushToken(tok);\n\t            return false;\n\t        }\n\t        return true;\n\t    };\n\t    _proto.expect = function expect(type) {\n\t        var tok = this.nextToken();\n\t        if (tok.type !== type) {\n\t            this.fail('expected ' + type + ', got ' + tok.type, tok.lineno, tok.colno);\n\t        }\n\t        return tok;\n\t    };\n\t    _proto.skipValue = function skipValue(type, val) {\n\t        var tok = this.nextToken();\n\t        if (!tok || tok.type !== type || tok.value !== val) {\n\t            this.pushToken(tok);\n\t            return false;\n\t        }\n\t        return true;\n\t    };\n\t    _proto.skipSymbol = function skipSymbol(val) {\n\t        return this.skipValue(lexer$1.TOKEN_SYMBOL, val);\n\t    };\n\t    _proto.advanceAfterBlockEnd = function advanceAfterBlockEnd(name) {\n\t        var tok;\n\t        if (!name) {\n\t            tok = this.peekToken();\n\t            if (!tok) {\n\t                this.fail('unexpected end of file');\n\t            }\n\t            if (tok.type !== lexer$1.TOKEN_SYMBOL) {\n\t                this.fail('advanceAfterBlockEnd: expected symbol token or ' + 'explicit name to be passed');\n\t            }\n\t            name = this.nextToken().value;\n\t        }\n\t        tok = this.nextToken();\n\t        if (tok && tok.type === lexer$1.TOKEN_BLOCK_END) {\n\t            if (tok.value.charAt(0) === '-') {\n\t                this.dropLeadingWhitespace = true;\n\t            }\n\t        } else {\n\t            this.fail('expected block end in ' + name + ' statement');\n\t        }\n\t        return tok;\n\t    };\n\t    _proto.advanceAfterVariableEnd = function advanceAfterVariableEnd() {\n\t        var tok = this.nextToken();\n\t        if (tok && tok.type === lexer$1.TOKEN_VARIABLE_END) {\n\t            this.dropLeadingWhitespace = tok.value.charAt(tok.value.length - this.tokens.tags.VARIABLE_END.length - 1) === '-';\n\t        } else {\n\t            this.pushToken(tok);\n\t            this.fail('expected variable end');\n\t        }\n\t    };\n\t    _proto.parseFor = function parseFor() {\n\t        var forTok = this.peekToken();\n\t        var node;\n\t        var endBlock;\n\t        if (this.skipSymbol('for')) {\n\t            node = new nodes$3.For(forTok.lineno, forTok.colno);\n\t            endBlock = 'endfor';\n\t        } else if (this.skipSymbol('asyncEach')) {\n\t            node = new nodes$3.AsyncEach(forTok.lineno, forTok.colno);\n\t            endBlock = 'endeach';\n\t        } else if (this.skipSymbol('asyncAll')) {\n\t            node = new nodes$3.AsyncAll(forTok.lineno, forTok.colno);\n\t            endBlock = 'endall';\n\t        } else {\n\t            this.fail('parseFor: expected for{Async}', forTok.lineno, forTok.colno);\n\t        }\n\t        node.name = this.parsePrimary();\n\t        if (!(node.name instanceof nodes$3.Symbol)) {\n\t            this.fail('parseFor: variable name expected for loop');\n\t        }\n\t        var type = this.peekToken().type;\n\t        if (type === lexer$1.TOKEN_COMMA) {\n\t            // key/value iteration\n\t            var key = node.name;\n\t            node.name = new nodes$3.Array(key.lineno, key.colno);\n\t            node.name.addChild(key);\n\t            while(this.skip(lexer$1.TOKEN_COMMA)){\n\t                var prim = this.parsePrimary();\n\t                node.name.addChild(prim);\n\t            }\n\t        }\n\t        if (!this.skipSymbol('in')) {\n\t            this.fail('parseFor: expected \"in\" keyword for loop', forTok.lineno, forTok.colno);\n\t        }\n\t        node.arr = this.parseExpression();\n\t        this.advanceAfterBlockEnd(forTok.value);\n\t        node.body = this.parseUntilBlocks(endBlock, 'else');\n\t        if (this.skipSymbol('else')) {\n\t            this.advanceAfterBlockEnd('else');\n\t            node.else_ = this.parseUntilBlocks(endBlock);\n\t        }\n\t        this.advanceAfterBlockEnd();\n\t        return node;\n\t    };\n\t    _proto.parseMacro = function parseMacro() {\n\t        var macroTok = this.peekToken();\n\t        if (!this.skipSymbol('macro')) {\n\t            this.fail('expected macro');\n\t        }\n\t        var name = this.parsePrimary(true);\n\t        var args = this.parseSignature();\n\t        var node = new nodes$3.Macro(macroTok.lineno, macroTok.colno, name, args);\n\t        this.advanceAfterBlockEnd(macroTok.value);\n\t        node.body = this.parseUntilBlocks('endmacro');\n\t        this.advanceAfterBlockEnd();\n\t        return node;\n\t    };\n\t    _proto.parseCall = function parseCall() {\n\t        // a call block is parsed as a normal FunCall, but with an added\n\t        // 'caller' kwarg which is a Caller node.\n\t        var callTok = this.peekToken();\n\t        if (!this.skipSymbol('call')) {\n\t            this.fail('expected call');\n\t        }\n\t        var callerArgs = this.parseSignature(true) || new nodes$3.NodeList();\n\t        var macroCall = this.parsePrimary();\n\t        this.advanceAfterBlockEnd(callTok.value);\n\t        var body = this.parseUntilBlocks('endcall');\n\t        this.advanceAfterBlockEnd();\n\t        var callerName = new nodes$3.Symbol(callTok.lineno, callTok.colno, 'caller');\n\t        var callerNode = new nodes$3.Caller(callTok.lineno, callTok.colno, callerName, callerArgs, body);\n\t        // add the additional caller kwarg, adding kwargs if necessary\n\t        var args = macroCall.args.children;\n\t        if (!(args[args.length - 1] instanceof nodes$3.KeywordArgs)) {\n\t            args.push(new nodes$3.KeywordArgs());\n\t        }\n\t        var kwargs = args[args.length - 1];\n\t        kwargs.addChild(new nodes$3.Pair(callTok.lineno, callTok.colno, callerName, callerNode));\n\t        return new nodes$3.Output(callTok.lineno, callTok.colno, [\n\t            macroCall\n\t        ]);\n\t    };\n\t    _proto.parseWithContext = function parseWithContext() {\n\t        var tok = this.peekToken();\n\t        var withContext = null;\n\t        if (this.skipSymbol('with')) {\n\t            withContext = true;\n\t        } else if (this.skipSymbol('without')) {\n\t            withContext = false;\n\t        }\n\t        if (withContext !== null) {\n\t            if (!this.skipSymbol('context')) {\n\t                this.fail('parseFrom: expected context after with/without', tok.lineno, tok.colno);\n\t            }\n\t        }\n\t        return withContext;\n\t    };\n\t    _proto.parseImport = function parseImport() {\n\t        var importTok = this.peekToken();\n\t        if (!this.skipSymbol('import')) {\n\t            this.fail('parseImport: expected import', importTok.lineno, importTok.colno);\n\t        }\n\t        var template = this.parseExpression();\n\t        if (!this.skipSymbol('as')) {\n\t            this.fail('parseImport: expected \"as\" keyword', importTok.lineno, importTok.colno);\n\t        }\n\t        var target = this.parseExpression();\n\t        var withContext = this.parseWithContext();\n\t        var node = new nodes$3.Import(importTok.lineno, importTok.colno, template, target, withContext);\n\t        this.advanceAfterBlockEnd(importTok.value);\n\t        return node;\n\t    };\n\t    _proto.parseFrom = function parseFrom() {\n\t        var fromTok = this.peekToken();\n\t        if (!this.skipSymbol('from')) {\n\t            this.fail('parseFrom: expected from');\n\t        }\n\t        var template = this.parseExpression();\n\t        if (!this.skipSymbol('import')) {\n\t            this.fail('parseFrom: expected import', fromTok.lineno, fromTok.colno);\n\t        }\n\t        var names = new nodes$3.NodeList();\n\t        var withContext;\n\t        while(1){\n\t            // eslint-disable-line no-constant-condition\n\t            var nextTok = this.peekToken();\n\t            if (nextTok.type === lexer$1.TOKEN_BLOCK_END) {\n\t                if (!names.children.length) {\n\t                    this.fail('parseFrom: Expected at least one import name', fromTok.lineno, fromTok.colno);\n\t                }\n\t                // Since we are manually advancing past the block end,\n\t                // need to keep track of whitespace control (normally\n\t                // this is done in `advanceAfterBlockEnd`\n\t                if (nextTok.value.charAt(0) === '-') {\n\t                    this.dropLeadingWhitespace = true;\n\t                }\n\t                this.nextToken();\n\t                break;\n\t            }\n\t            if (names.children.length > 0 && !this.skip(lexer$1.TOKEN_COMMA)) {\n\t                this.fail('parseFrom: expected comma', fromTok.lineno, fromTok.colno);\n\t            }\n\t            var name = this.parsePrimary();\n\t            if (name.value.charAt(0) === '_') {\n\t                this.fail('parseFrom: names starting with an underscore cannot be imported', name.lineno, name.colno);\n\t            }\n\t            if (this.skipSymbol('as')) {\n\t                var alias = this.parsePrimary();\n\t                names.addChild(new nodes$3.Pair(name.lineno, name.colno, name, alias));\n\t            } else {\n\t                names.addChild(name);\n\t            }\n\t            withContext = this.parseWithContext();\n\t        }\n\t        return new nodes$3.FromImport(fromTok.lineno, fromTok.colno, template, names, withContext);\n\t    };\n\t    _proto.parseBlock = function parseBlock() {\n\t        var tag = this.peekToken();\n\t        if (!this.skipSymbol('block')) {\n\t            this.fail('parseBlock: expected block', tag.lineno, tag.colno);\n\t        }\n\t        var node = new nodes$3.Block(tag.lineno, tag.colno);\n\t        node.name = this.parsePrimary();\n\t        if (!(node.name instanceof nodes$3.Symbol)) {\n\t            this.fail('parseBlock: variable name expected', tag.lineno, tag.colno);\n\t        }\n\t        this.advanceAfterBlockEnd(tag.value);\n\t        node.body = this.parseUntilBlocks('endblock');\n\t        this.skipSymbol('endblock');\n\t        this.skipSymbol(node.name.value);\n\t        var tok = this.peekToken();\n\t        if (!tok) {\n\t            this.fail('parseBlock: expected endblock, got end of file');\n\t        }\n\t        this.advanceAfterBlockEnd(tok.value);\n\t        return node;\n\t    };\n\t    _proto.parseExtends = function parseExtends() {\n\t        var tagName = 'extends';\n\t        var tag = this.peekToken();\n\t        if (!this.skipSymbol(tagName)) {\n\t            this.fail('parseTemplateRef: expected ' + tagName);\n\t        }\n\t        var node = new nodes$3.Extends(tag.lineno, tag.colno);\n\t        node.template = this.parseExpression();\n\t        this.advanceAfterBlockEnd(tag.value);\n\t        return node;\n\t    };\n\t    _proto.parseInclude = function parseInclude() {\n\t        var tagName = 'include';\n\t        var tag = this.peekToken();\n\t        if (!this.skipSymbol(tagName)) {\n\t            this.fail('parseInclude: expected ' + tagName);\n\t        }\n\t        var node = new nodes$3.Include(tag.lineno, tag.colno);\n\t        node.template = this.parseExpression();\n\t        if (this.skipSymbol('ignore') && this.skipSymbol('missing')) {\n\t            node.ignoreMissing = true;\n\t        }\n\t        this.advanceAfterBlockEnd(tag.value);\n\t        return node;\n\t    };\n\t    _proto.parseIf = function parseIf() {\n\t        var tag = this.peekToken();\n\t        var node;\n\t        if (this.skipSymbol('if') || this.skipSymbol('elif') || this.skipSymbol('elseif')) {\n\t            node = new nodes$3.If(tag.lineno, tag.colno);\n\t        } else if (this.skipSymbol('ifAsync')) {\n\t            node = new nodes$3.IfAsync(tag.lineno, tag.colno);\n\t        } else {\n\t            this.fail('parseIf: expected if, elif, or elseif', tag.lineno, tag.colno);\n\t        }\n\t        node.cond = this.parseExpression();\n\t        this.advanceAfterBlockEnd(tag.value);\n\t        node.body = this.parseUntilBlocks('elif', 'elseif', 'else', 'endif');\n\t        var tok = this.peekToken();\n\t        switch(tok && tok.value){\n\t            case 'elseif':\n\t            case 'elif':\n\t                node.else_ = this.parseIf();\n\t                break;\n\t            case 'else':\n\t                this.advanceAfterBlockEnd();\n\t                node.else_ = this.parseUntilBlocks('endif');\n\t                this.advanceAfterBlockEnd();\n\t                break;\n\t            case 'endif':\n\t                node.else_ = null;\n\t                this.advanceAfterBlockEnd();\n\t                break;\n\t            default:\n\t                this.fail('parseIf: expected elif, else, or endif, got end of file');\n\t        }\n\t        return node;\n\t    };\n\t    _proto.parseSet = function parseSet() {\n\t        var tag = this.peekToken();\n\t        if (!this.skipSymbol('set')) {\n\t            this.fail('parseSet: expected set', tag.lineno, tag.colno);\n\t        }\n\t        var node = new nodes$3.Set(tag.lineno, tag.colno, []);\n\t        var target;\n\t        while(target = this.parsePrimary()){\n\t            node.targets.push(target);\n\t            if (!this.skip(lexer$1.TOKEN_COMMA)) {\n\t                break;\n\t            }\n\t        }\n\t        if (!this.skipValue(lexer$1.TOKEN_OPERATOR, '=')) {\n\t            if (!this.skip(lexer$1.TOKEN_BLOCK_END)) {\n\t                this.fail('parseSet: expected = or block end in set tag', tag.lineno, tag.colno);\n\t            } else {\n\t                node.body = new nodes$3.Capture(tag.lineno, tag.colno, this.parseUntilBlocks('endset'));\n\t                node.value = null;\n\t                this.advanceAfterBlockEnd();\n\t            }\n\t        } else {\n\t            node.value = this.parseExpression();\n\t            this.advanceAfterBlockEnd(tag.value);\n\t        }\n\t        return node;\n\t    };\n\t    _proto.parseSwitch = function parseSwitch() {\n\t        /*\n\t     * Store the tag names in variables in case someone ever wants to\n\t     * customize this.\n\t     */ var switchStart = 'switch';\n\t        var switchEnd = 'endswitch';\n\t        var caseStart = 'case';\n\t        var caseDefault = 'default';\n\t        // Get the switch tag.\n\t        var tag = this.peekToken();\n\t        // fail early if we get some unexpected tag.\n\t        if (!this.skipSymbol(switchStart) && !this.skipSymbol(caseStart) && !this.skipSymbol(caseDefault)) {\n\t            this.fail('parseSwitch: expected \"switch,\" \"case\" or \"default\"', tag.lineno, tag.colno);\n\t        }\n\t        // parse the switch expression\n\t        var expr = this.parseExpression();\n\t        // advance until a start of a case, a default case or an endswitch.\n\t        this.advanceAfterBlockEnd(switchStart);\n\t        this.parseUntilBlocks(caseStart, caseDefault, switchEnd);\n\t        // this is the first case. it could also be an endswitch, we'll check.\n\t        var tok = this.peekToken();\n\t        // create new variables for our cases and default case.\n\t        var cases = [];\n\t        var defaultCase;\n\t        // while we're dealing with new cases nodes...\n\t        do {\n\t            // skip the start symbol and get the case expression\n\t            this.skipSymbol(caseStart);\n\t            var cond = this.parseExpression();\n\t            this.advanceAfterBlockEnd(switchStart);\n\t            // get the body of the case node and add it to the array of cases.\n\t            var body = this.parseUntilBlocks(caseStart, caseDefault, switchEnd);\n\t            cases.push(new nodes$3.Case(tok.line, tok.col, cond, body));\n\t            // get our next case\n\t            tok = this.peekToken();\n\t        }while (tok && tok.value === caseStart)\n\t        // we either have a default case or a switch end.\n\t        switch(tok.value){\n\t            case caseDefault:\n\t                this.advanceAfterBlockEnd();\n\t                defaultCase = this.parseUntilBlocks(switchEnd);\n\t                this.advanceAfterBlockEnd();\n\t                break;\n\t            case switchEnd:\n\t                this.advanceAfterBlockEnd();\n\t                break;\n\t            default:\n\t                // otherwise bail because EOF\n\t                this.fail('parseSwitch: expected \"case,\" \"default\" or \"endswitch,\" got EOF.');\n\t        }\n\t        // and return the switch node.\n\t        return new nodes$3.Switch(tag.lineno, tag.colno, expr, cases, defaultCase);\n\t    };\n\t    _proto.parseStatement = function parseStatement() {\n\t        var tok = this.peekToken();\n\t        var node;\n\t        if (tok.type !== lexer$1.TOKEN_SYMBOL) {\n\t            this.fail('tag name expected', tok.lineno, tok.colno);\n\t        }\n\t        if (this.breakOnBlocks && lib$6.indexOf(this.breakOnBlocks, tok.value) !== -1) {\n\t            return null;\n\t        }\n\t        switch(tok.value){\n\t            case 'raw':\n\t                return this.parseRaw();\n\t            case 'verbatim':\n\t                return this.parseRaw('verbatim');\n\t            case 'if':\n\t            case 'ifAsync':\n\t                return this.parseIf();\n\t            case 'for':\n\t            case 'asyncEach':\n\t            case 'asyncAll':\n\t                return this.parseFor();\n\t            case 'block':\n\t                return this.parseBlock();\n\t            case 'extends':\n\t                return this.parseExtends();\n\t            case 'include':\n\t                return this.parseInclude();\n\t            case 'set':\n\t                return this.parseSet();\n\t            case 'macro':\n\t                return this.parseMacro();\n\t            case 'call':\n\t                return this.parseCall();\n\t            case 'import':\n\t                return this.parseImport();\n\t            case 'from':\n\t                return this.parseFrom();\n\t            case 'filter':\n\t                return this.parseFilterStatement();\n\t            case 'switch':\n\t                return this.parseSwitch();\n\t            default:\n\t                if (this.extensions.length) {\n\t                    for(var i = 0; i < this.extensions.length; i++){\n\t                        var ext = this.extensions[i];\n\t                        if (lib$6.indexOf(ext.tags || [], tok.value) !== -1) {\n\t                            return ext.parse(this, nodes$3, lexer$1);\n\t                        }\n\t                    }\n\t                }\n\t                this.fail('unknown block tag: ' + tok.value, tok.lineno, tok.colno);\n\t        }\n\t        return node;\n\t    };\n\t    _proto.parseRaw = function parseRaw(tagName) {\n\t        tagName = tagName || 'raw';\n\t        var endTagName = 'end' + tagName;\n\t        // Look for upcoming raw blocks (ignore all other kinds of blocks)\n\t        var rawBlockRegex = new RegExp('([\\\\s\\\\S]*?){%\\\\s*(' + tagName + '|' + endTagName + ')\\\\s*(?=%})%}');\n\t        var rawLevel = 1;\n\t        var str = '';\n\t        var matches = null;\n\t        // Skip opening raw token\n\t        // Keep this token to track line and column numbers\n\t        var begun = this.advanceAfterBlockEnd();\n\t        // Exit when there's nothing to match\n\t        // or when we've found the matching \"endraw\" block\n\t        while((matches = this.tokens._extractRegex(rawBlockRegex)) && rawLevel > 0){\n\t            var all = matches[0];\n\t            var pre = matches[1];\n\t            var blockName = matches[2];\n\t            // Adjust rawlevel\n\t            if (blockName === tagName) {\n\t                rawLevel += 1;\n\t            } else if (blockName === endTagName) {\n\t                rawLevel -= 1;\n\t            }\n\t            // Add to str\n\t            if (rawLevel === 0) {\n\t                // We want to exclude the last \"endraw\"\n\t                str += pre;\n\t                // Move tokenizer to beginning of endraw block\n\t                this.tokens.backN(all.length - pre.length);\n\t            } else {\n\t                str += all;\n\t            }\n\t        }\n\t        return new nodes$3.Output(begun.lineno, begun.colno, [\n\t            new nodes$3.TemplateData(begun.lineno, begun.colno, str)\n\t        ]);\n\t    };\n\t    _proto.parsePostfix = function parsePostfix(node) {\n\t        var lookup;\n\t        var tok = this.peekToken();\n\t        while(tok){\n\t            if (tok.type === lexer$1.TOKEN_LEFT_PAREN) {\n\t                // Function call\n\t                node = new nodes$3.FunCall(tok.lineno, tok.colno, node, this.parseSignature());\n\t            } else if (tok.type === lexer$1.TOKEN_LEFT_BRACKET) {\n\t                // Reference\n\t                lookup = this.parseAggregate();\n\t                if (lookup.children.length > 1) {\n\t                    this.fail('invalid index');\n\t                }\n\t                node = new nodes$3.LookupVal(tok.lineno, tok.colno, node, lookup.children[0]);\n\t            } else if (tok.type === lexer$1.TOKEN_OPERATOR && tok.value === '.') {\n\t                // Reference\n\t                this.nextToken();\n\t                var val = this.nextToken();\n\t                if (val.type !== lexer$1.TOKEN_SYMBOL) {\n\t                    this.fail('expected name as lookup value, got ' + val.value, val.lineno, val.colno);\n\t                }\n\t                // Make a literal string because it's not a variable\n\t                // reference\n\t                lookup = new nodes$3.Literal(val.lineno, val.colno, val.value);\n\t                node = new nodes$3.LookupVal(tok.lineno, tok.colno, node, lookup);\n\t            } else {\n\t                break;\n\t            }\n\t            tok = this.peekToken();\n\t        }\n\t        return node;\n\t    };\n\t    _proto.parseExpression = function parseExpression() {\n\t        var node = this.parseInlineIf();\n\t        return node;\n\t    };\n\t    _proto.parseInlineIf = function parseInlineIf() {\n\t        var node = this.parseOr();\n\t        if (this.skipSymbol('if')) {\n\t            var condNode = this.parseOr();\n\t            var bodyNode = node;\n\t            node = new nodes$3.InlineIf(node.lineno, node.colno);\n\t            node.body = bodyNode;\n\t            node.cond = condNode;\n\t            if (this.skipSymbol('else')) {\n\t                node.else_ = this.parseOr();\n\t            } else {\n\t                node.else_ = null;\n\t            }\n\t        }\n\t        return node;\n\t    };\n\t    _proto.parseOr = function parseOr() {\n\t        var node = this.parseAnd();\n\t        while(this.skipSymbol('or')){\n\t            var node2 = this.parseAnd();\n\t            node = new nodes$3.Or(node.lineno, node.colno, node, node2);\n\t        }\n\t        return node;\n\t    };\n\t    _proto.parseAnd = function parseAnd() {\n\t        var node = this.parseNot();\n\t        while(this.skipSymbol('and')){\n\t            var node2 = this.parseNot();\n\t            node = new nodes$3.And(node.lineno, node.colno, node, node2);\n\t        }\n\t        return node;\n\t    };\n\t    _proto.parseNot = function parseNot() {\n\t        var tok = this.peekToken();\n\t        if (this.skipSymbol('not')) {\n\t            return new nodes$3.Not(tok.lineno, tok.colno, this.parseNot());\n\t        }\n\t        return this.parseIn();\n\t    };\n\t    _proto.parseIn = function parseIn() {\n\t        var node = this.parseIs();\n\t        while(1){\n\t            // eslint-disable-line no-constant-condition\n\t            // check if the next token is 'not'\n\t            var tok = this.nextToken();\n\t            if (!tok) {\n\t                break;\n\t            }\n\t            var invert = tok.type === lexer$1.TOKEN_SYMBOL && tok.value === 'not';\n\t            // if it wasn't 'not', put it back\n\t            if (!invert) {\n\t                this.pushToken(tok);\n\t            }\n\t            if (this.skipSymbol('in')) {\n\t                var node2 = this.parseIs();\n\t                node = new nodes$3.In(node.lineno, node.colno, node, node2);\n\t                if (invert) {\n\t                    node = new nodes$3.Not(node.lineno, node.colno, node);\n\t                }\n\t            } else {\n\t                // if we'd found a 'not' but this wasn't an 'in', put back the 'not'\n\t                if (invert) {\n\t                    this.pushToken(tok);\n\t                }\n\t                break;\n\t            }\n\t        }\n\t        return node;\n\t    };\n\t    _proto.parseIs = function parseIs() {\n\t        var node = this.parseCompare();\n\t        // look for an is\n\t        if (this.skipSymbol('is')) {\n\t            // look for a not\n\t            var not = this.skipSymbol('not');\n\t            // get the next node\n\t            var node2 = this.parseCompare();\n\t            // create an Is node using the next node and the info from our Is node.\n\t            node = new nodes$3.Is(node.lineno, node.colno, node, node2);\n\t            // if we have a Not, create a Not node from our Is node.\n\t            if (not) {\n\t                node = new nodes$3.Not(node.lineno, node.colno, node);\n\t            }\n\t        }\n\t        // return the node.\n\t        return node;\n\t    };\n\t    _proto.parseCompare = function parseCompare() {\n\t        var compareOps = [\n\t            '==',\n\t            '===',\n\t            '!=',\n\t            '!==',\n\t            '<',\n\t            '>',\n\t            '<=',\n\t            '>='\n\t        ];\n\t        var expr = this.parseConcat();\n\t        var ops = [];\n\t        while(1){\n\t            // eslint-disable-line no-constant-condition\n\t            var tok = this.nextToken();\n\t            if (!tok) {\n\t                break;\n\t            } else if (compareOps.indexOf(tok.value) !== -1) {\n\t                ops.push(new nodes$3.CompareOperand(tok.lineno, tok.colno, this.parseConcat(), tok.value));\n\t            } else {\n\t                this.pushToken(tok);\n\t                break;\n\t            }\n\t        }\n\t        if (ops.length) {\n\t            return new nodes$3.Compare(ops[0].lineno, ops[0].colno, expr, ops);\n\t        } else {\n\t            return expr;\n\t        }\n\t    };\n\t    _proto.parseConcat = function parseConcat() {\n\t        var node = this.parseAdd();\n\t        while(this.skipValue(lexer$1.TOKEN_TILDE, '~')){\n\t            var node2 = this.parseAdd();\n\t            node = new nodes$3.Concat(node.lineno, node.colno, node, node2);\n\t        }\n\t        return node;\n\t    };\n\t    _proto.parseAdd = function parseAdd() {\n\t        var node = this.parseSub();\n\t        while(this.skipValue(lexer$1.TOKEN_OPERATOR, '+')){\n\t            var node2 = this.parseSub();\n\t            node = new nodes$3.Add(node.lineno, node.colno, node, node2);\n\t        }\n\t        return node;\n\t    };\n\t    _proto.parseSub = function parseSub() {\n\t        var node = this.parseMul();\n\t        while(this.skipValue(lexer$1.TOKEN_OPERATOR, '-')){\n\t            var node2 = this.parseMul();\n\t            node = new nodes$3.Sub(node.lineno, node.colno, node, node2);\n\t        }\n\t        return node;\n\t    };\n\t    _proto.parseMul = function parseMul() {\n\t        var node = this.parseDiv();\n\t        while(this.skipValue(lexer$1.TOKEN_OPERATOR, '*')){\n\t            var node2 = this.parseDiv();\n\t            node = new nodes$3.Mul(node.lineno, node.colno, node, node2);\n\t        }\n\t        return node;\n\t    };\n\t    _proto.parseDiv = function parseDiv() {\n\t        var node = this.parseFloorDiv();\n\t        while(this.skipValue(lexer$1.TOKEN_OPERATOR, '/')){\n\t            var node2 = this.parseFloorDiv();\n\t            node = new nodes$3.Div(node.lineno, node.colno, node, node2);\n\t        }\n\t        return node;\n\t    };\n\t    _proto.parseFloorDiv = function parseFloorDiv() {\n\t        var node = this.parseMod();\n\t        while(this.skipValue(lexer$1.TOKEN_OPERATOR, '//')){\n\t            var node2 = this.parseMod();\n\t            node = new nodes$3.FloorDiv(node.lineno, node.colno, node, node2);\n\t        }\n\t        return node;\n\t    };\n\t    _proto.parseMod = function parseMod() {\n\t        var node = this.parsePow();\n\t        while(this.skipValue(lexer$1.TOKEN_OPERATOR, '%')){\n\t            var node2 = this.parsePow();\n\t            node = new nodes$3.Mod(node.lineno, node.colno, node, node2);\n\t        }\n\t        return node;\n\t    };\n\t    _proto.parsePow = function parsePow() {\n\t        var node = this.parseUnary();\n\t        while(this.skipValue(lexer$1.TOKEN_OPERATOR, '**')){\n\t            var node2 = this.parseUnary();\n\t            node = new nodes$3.Pow(node.lineno, node.colno, node, node2);\n\t        }\n\t        return node;\n\t    };\n\t    _proto.parseUnary = function parseUnary(noFilters) {\n\t        var tok = this.peekToken();\n\t        var node;\n\t        if (this.skipValue(lexer$1.TOKEN_OPERATOR, '-')) {\n\t            node = new nodes$3.Neg(tok.lineno, tok.colno, this.parseUnary(true));\n\t        } else if (this.skipValue(lexer$1.TOKEN_OPERATOR, '+')) {\n\t            node = new nodes$3.Pos(tok.lineno, tok.colno, this.parseUnary(true));\n\t        } else {\n\t            node = this.parsePrimary();\n\t        }\n\t        if (!noFilters) {\n\t            node = this.parseFilter(node);\n\t        }\n\t        return node;\n\t    };\n\t    _proto.parsePrimary = function parsePrimary(noPostfix) {\n\t        var tok = this.nextToken();\n\t        var val;\n\t        var node = null;\n\t        if (!tok) {\n\t            this.fail('expected expression, got end of file');\n\t        } else if (tok.type === lexer$1.TOKEN_STRING) {\n\t            val = tok.value;\n\t        } else if (tok.type === lexer$1.TOKEN_INT) {\n\t            val = parseInt(tok.value, 10);\n\t        } else if (tok.type === lexer$1.TOKEN_FLOAT) {\n\t            val = parseFloat(tok.value);\n\t        } else if (tok.type === lexer$1.TOKEN_BOOLEAN) {\n\t            if (tok.value === 'true') {\n\t                val = true;\n\t            } else if (tok.value === 'false') {\n\t                val = false;\n\t            } else {\n\t                this.fail('invalid boolean: ' + tok.value, tok.lineno, tok.colno);\n\t            }\n\t        } else if (tok.type === lexer$1.TOKEN_NONE) {\n\t            val = null;\n\t        } else if (tok.type === lexer$1.TOKEN_REGEX) {\n\t            val = new RegExp(tok.value.body, tok.value.flags);\n\t        }\n\t        if (val !== undefined) {\n\t            node = new nodes$3.Literal(tok.lineno, tok.colno, val);\n\t        } else if (tok.type === lexer$1.TOKEN_SYMBOL) {\n\t            node = new nodes$3.Symbol(tok.lineno, tok.colno, tok.value);\n\t        } else {\n\t            // See if it's an aggregate type, we need to push the\n\t            // current delimiter token back on\n\t            this.pushToken(tok);\n\t            node = this.parseAggregate();\n\t        }\n\t        if (!noPostfix) {\n\t            node = this.parsePostfix(node);\n\t        }\n\t        if (node) {\n\t            return node;\n\t        } else {\n\t            throw this.error(\"unexpected token: \" + tok.value, tok.lineno, tok.colno);\n\t        }\n\t    };\n\t    _proto.parseFilterName = function parseFilterName() {\n\t        var tok = this.expect(lexer$1.TOKEN_SYMBOL);\n\t        var name = tok.value;\n\t        while(this.skipValue(lexer$1.TOKEN_OPERATOR, '.')){\n\t            name += '.' + this.expect(lexer$1.TOKEN_SYMBOL).value;\n\t        }\n\t        return new nodes$3.Symbol(tok.lineno, tok.colno, name);\n\t    };\n\t    _proto.parseFilterArgs = function parseFilterArgs(node) {\n\t        if (this.peekToken().type === lexer$1.TOKEN_LEFT_PAREN) {\n\t            // Get a FunCall node and add the parameters to the\n\t            // filter\n\t            var call = this.parsePostfix(node);\n\t            return call.args.children;\n\t        }\n\t        return [];\n\t    };\n\t    _proto.parseFilter = function parseFilter(node) {\n\t        while(this.skip(lexer$1.TOKEN_PIPE)){\n\t            var name = this.parseFilterName();\n\t            node = new nodes$3.Filter(name.lineno, name.colno, name, new nodes$3.NodeList(name.lineno, name.colno, [\n\t                node\n\t            ].concat(this.parseFilterArgs(node))));\n\t        }\n\t        return node;\n\t    };\n\t    _proto.parseFilterStatement = function parseFilterStatement() {\n\t        var filterTok = this.peekToken();\n\t        if (!this.skipSymbol('filter')) {\n\t            this.fail('parseFilterStatement: expected filter');\n\t        }\n\t        var name = this.parseFilterName();\n\t        var args = this.parseFilterArgs(name);\n\t        this.advanceAfterBlockEnd(filterTok.value);\n\t        var body = new nodes$3.Capture(name.lineno, name.colno, this.parseUntilBlocks('endfilter'));\n\t        this.advanceAfterBlockEnd();\n\t        var node = new nodes$3.Filter(name.lineno, name.colno, name, new nodes$3.NodeList(name.lineno, name.colno, [\n\t            body\n\t        ].concat(args)));\n\t        return new nodes$3.Output(name.lineno, name.colno, [\n\t            node\n\t        ]);\n\t    };\n\t    _proto.parseAggregate = function parseAggregate() {\n\t        var tok = this.nextToken();\n\t        var node;\n\t        switch(tok.type){\n\t            case lexer$1.TOKEN_LEFT_PAREN:\n\t                node = new nodes$3.Group(tok.lineno, tok.colno);\n\t                break;\n\t            case lexer$1.TOKEN_LEFT_BRACKET:\n\t                node = new nodes$3.Array(tok.lineno, tok.colno);\n\t                break;\n\t            case lexer$1.TOKEN_LEFT_CURLY:\n\t                node = new nodes$3.Dict(tok.lineno, tok.colno);\n\t                break;\n\t            default:\n\t                return null;\n\t        }\n\t        while(1){\n\t            // eslint-disable-line no-constant-condition\n\t            var type = this.peekToken().type;\n\t            if (type === lexer$1.TOKEN_RIGHT_PAREN || type === lexer$1.TOKEN_RIGHT_BRACKET || type === lexer$1.TOKEN_RIGHT_CURLY) {\n\t                this.nextToken();\n\t                break;\n\t            }\n\t            if (node.children.length > 0) {\n\t                if (!this.skip(lexer$1.TOKEN_COMMA)) {\n\t                    this.fail('parseAggregate: expected comma after expression', tok.lineno, tok.colno);\n\t                }\n\t            }\n\t            if (node instanceof nodes$3.Dict) {\n\t                // TODO: check for errors\n\t                var key = this.parsePrimary();\n\t                // We expect a key/value pair for dicts, separated by a\n\t                // colon\n\t                if (!this.skip(lexer$1.TOKEN_COLON)) {\n\t                    this.fail('parseAggregate: expected colon after dict key', tok.lineno, tok.colno);\n\t                }\n\t                // TODO: check for errors\n\t                var value = this.parseExpression();\n\t                node.addChild(new nodes$3.Pair(key.lineno, key.colno, key, value));\n\t            } else {\n\t                // TODO: check for errors\n\t                var expr = this.parseExpression();\n\t                node.addChild(expr);\n\t            }\n\t        }\n\t        return node;\n\t    };\n\t    _proto.parseSignature = function parseSignature(tolerant, noParens) {\n\t        var tok = this.peekToken();\n\t        if (!noParens && tok.type !== lexer$1.TOKEN_LEFT_PAREN) {\n\t            if (tolerant) {\n\t                return null;\n\t            } else {\n\t                this.fail('expected arguments', tok.lineno, tok.colno);\n\t            }\n\t        }\n\t        if (tok.type === lexer$1.TOKEN_LEFT_PAREN) {\n\t            tok = this.nextToken();\n\t        }\n\t        var args = new nodes$3.NodeList(tok.lineno, tok.colno);\n\t        var kwargs = new nodes$3.KeywordArgs(tok.lineno, tok.colno);\n\t        var checkComma = false;\n\t        while(1){\n\t            // eslint-disable-line no-constant-condition\n\t            tok = this.peekToken();\n\t            if (!noParens && tok.type === lexer$1.TOKEN_RIGHT_PAREN) {\n\t                this.nextToken();\n\t                break;\n\t            } else if (noParens && tok.type === lexer$1.TOKEN_BLOCK_END) {\n\t                break;\n\t            }\n\t            if (checkComma && !this.skip(lexer$1.TOKEN_COMMA)) {\n\t                this.fail('parseSignature: expected comma after expression', tok.lineno, tok.colno);\n\t            } else {\n\t                var arg = this.parseExpression();\n\t                if (this.skipValue(lexer$1.TOKEN_OPERATOR, '=')) {\n\t                    kwargs.addChild(new nodes$3.Pair(arg.lineno, arg.colno, arg, this.parseExpression()));\n\t                } else {\n\t                    args.addChild(arg);\n\t                }\n\t            }\n\t            checkComma = true;\n\t        }\n\t        if (kwargs.children.length) {\n\t            args.addChild(kwargs);\n\t        }\n\t        return args;\n\t    };\n\t    _proto.parseUntilBlocks = function parseUntilBlocks() {\n\t        var prev = this.breakOnBlocks;\n\t        for(var _len = arguments.length, blockNames = new Array(_len), _key = 0; _key < _len; _key++){\n\t            blockNames[_key] = arguments[_key];\n\t        }\n\t        this.breakOnBlocks = blockNames;\n\t        var ret = this.parse();\n\t        this.breakOnBlocks = prev;\n\t        return ret;\n\t    };\n\t    _proto.parseNodes = function parseNodes() {\n\t        var tok;\n\t        var buf = [];\n\t        while(tok = this.nextToken()){\n\t            if (tok.type === lexer$1.TOKEN_DATA) {\n\t                var data = tok.value;\n\t                var nextToken = this.peekToken();\n\t                var nextVal = nextToken && nextToken.value;\n\t                // If the last token has \"-\" we need to trim the\n\t                // leading whitespace of the data. This is marked with\n\t                // the `dropLeadingWhitespace` variable.\n\t                if (this.dropLeadingWhitespace) {\n\t                    // TODO: this could be optimized (don't use regex)\n\t                    data = data.replace(/^\\s*/, '');\n\t                    this.dropLeadingWhitespace = false;\n\t                }\n\t                // Same for the succeeding block start token\n\t                if (nextToken && (nextToken.type === lexer$1.TOKEN_BLOCK_START && nextVal.charAt(nextVal.length - 1) === '-' || nextToken.type === lexer$1.TOKEN_VARIABLE_START && nextVal.charAt(this.tokens.tags.VARIABLE_START.length) === '-' || nextToken.type === lexer$1.TOKEN_COMMENT && nextVal.charAt(this.tokens.tags.COMMENT_START.length) === '-')) {\n\t                    // TODO: this could be optimized (don't use regex)\n\t                    data = data.replace(/\\s*$/, '');\n\t                }\n\t                buf.push(new nodes$3.Output(tok.lineno, tok.colno, [\n\t                    new nodes$3.TemplateData(tok.lineno, tok.colno, data)\n\t                ]));\n\t            } else if (tok.type === lexer$1.TOKEN_BLOCK_START) {\n\t                this.dropLeadingWhitespace = false;\n\t                var n = this.parseStatement();\n\t                if (!n) {\n\t                    break;\n\t                }\n\t                buf.push(n);\n\t            } else if (tok.type === lexer$1.TOKEN_VARIABLE_START) {\n\t                var e = this.parseExpression();\n\t                this.dropLeadingWhitespace = false;\n\t                this.advanceAfterVariableEnd();\n\t                buf.push(new nodes$3.Output(tok.lineno, tok.colno, [\n\t                    e\n\t                ]));\n\t            } else if (tok.type === lexer$1.TOKEN_COMMENT) {\n\t                this.dropLeadingWhitespace = tok.value.charAt(tok.value.length - this.tokens.tags.COMMENT_END.length - 1) === '-';\n\t            } else {\n\t                // Ignore comments, otherwise this should be an error\n\t                this.fail('Unexpected token at top-level: ' + tok.type, tok.lineno, tok.colno);\n\t            }\n\t        }\n\t        return buf;\n\t    };\n\t    _proto.parse = function parse() {\n\t        return new nodes$3.NodeList(0, 0, this.parseNodes());\n\t    };\n\t    _proto.parseAsRoot = function parseAsRoot() {\n\t        return new nodes$3.Root(0, 0, this.parseNodes());\n\t    };\n\t    return Parser;\n\t}(Obj$2); // var util = require('util');\n\t// var l = lexer.lex('{%- if x -%}\\n hello {% endif %}');\n\t// var t;\n\t// while((t = l.nextToken())) {\n\t//     console.log(util.inspect(t));\n\t// }\n\t// var p = new Parser(lexer.lex('hello {% filter title %}' +\n\t//                              'Hello madam how are you' +\n\t//                              '{% endfilter %}'));\n\t// var n = p.parseAsRoot();\n\t// nodes.printNodes(n);\n\tvar parser$2 = {\n\t    parse: function parse(src, extensions, opts) {\n\t        var p = new Parser(lexer$1.lex(src, opts));\n\t        if (extensions !== undefined) {\n\t            p.extensions = extensions;\n\t        }\n\t        return p.parseAsRoot();\n\t    },\n\t    Parser: Parser\n\t};\n\n\tvar nodes$2 = nodes$4;\n\tvar lib$5 = libExports;\n\tvar sym = 0;\n\tfunction gensym() {\n\t    return 'hole_' + sym++;\n\t}\n\t// copy-on-write version of map\n\tfunction mapCOW(arr, func) {\n\t    var res = null;\n\t    for(var i = 0; i < arr.length; i++){\n\t        var item = func(arr[i]);\n\t        if (item !== arr[i]) {\n\t            if (!res) {\n\t                res = arr.slice();\n\t            }\n\t            res[i] = item;\n\t        }\n\t    }\n\t    return res || arr;\n\t}\n\tfunction walk(ast, func, depthFirst) {\n\t    if (!(ast instanceof nodes$2.Node)) {\n\t        return ast;\n\t    }\n\t    if (!depthFirst) {\n\t        var astT = func(ast);\n\t        if (astT && astT !== ast) {\n\t            return astT;\n\t        }\n\t    }\n\t    if (ast instanceof nodes$2.NodeList) {\n\t        var children = mapCOW(ast.children, function(node) {\n\t            return walk(node, func, depthFirst);\n\t        });\n\t        if (children !== ast.children) {\n\t            ast = new nodes$2[ast.typename](ast.lineno, ast.colno, children);\n\t        }\n\t    } else if (ast instanceof nodes$2.CallExtension) {\n\t        var args = walk(ast.args, func, depthFirst);\n\t        var contentArgs = mapCOW(ast.contentArgs, function(node) {\n\t            return walk(node, func, depthFirst);\n\t        });\n\t        if (args !== ast.args || contentArgs !== ast.contentArgs) {\n\t            ast = new nodes$2[ast.typename](ast.extName, ast.prop, args, contentArgs);\n\t        }\n\t    } else {\n\t        var props = ast.fields.map(function(field) {\n\t            return ast[field];\n\t        });\n\t        var propsT = mapCOW(props, function(prop) {\n\t            return walk(prop, func, depthFirst);\n\t        });\n\t        if (propsT !== props) {\n\t            ast = new nodes$2[ast.typename](ast.lineno, ast.colno);\n\t            propsT.forEach(function(prop, i) {\n\t                ast[ast.fields[i]] = prop;\n\t            });\n\t        }\n\t    }\n\t    return depthFirst ? func(ast) || ast : ast;\n\t}\n\tfunction depthWalk(ast, func) {\n\t    return walk(ast, func, true);\n\t}\n\tfunction _liftFilters(node, asyncFilters, prop) {\n\t    var children = [];\n\t    var walked = depthWalk(prop ? node[prop] : node, function(descNode) {\n\t        var symbol;\n\t        if (descNode instanceof nodes$2.Block) {\n\t            return descNode;\n\t        } else if (descNode instanceof nodes$2.Filter && lib$5.indexOf(asyncFilters, descNode.name.value) !== -1 || descNode instanceof nodes$2.CallExtensionAsync) {\n\t            symbol = new nodes$2.Symbol(descNode.lineno, descNode.colno, gensym());\n\t            children.push(new nodes$2.FilterAsync(descNode.lineno, descNode.colno, descNode.name, descNode.args, symbol));\n\t        }\n\t        return symbol;\n\t    });\n\t    if (prop) {\n\t        node[prop] = walked;\n\t    } else {\n\t        node = walked;\n\t    }\n\t    if (children.length) {\n\t        children.push(node);\n\t        return new nodes$2.NodeList(node.lineno, node.colno, children);\n\t    } else {\n\t        return node;\n\t    }\n\t}\n\tfunction liftFilters(ast, asyncFilters) {\n\t    return depthWalk(ast, function(node) {\n\t        if (node instanceof nodes$2.Output) {\n\t            return _liftFilters(node, asyncFilters);\n\t        } else if (node instanceof nodes$2.Set) {\n\t            return _liftFilters(node, asyncFilters, 'value');\n\t        } else if (node instanceof nodes$2.For) {\n\t            return _liftFilters(node, asyncFilters, 'arr');\n\t        } else if (node instanceof nodes$2.If) {\n\t            return _liftFilters(node, asyncFilters, 'cond');\n\t        } else if (node instanceof nodes$2.CallExtension) {\n\t            return _liftFilters(node, asyncFilters, 'args');\n\t        } else {\n\t            return undefined;\n\t        }\n\t    });\n\t}\n\tfunction liftSuper(ast) {\n\t    return walk(ast, function(blockNode) {\n\t        if (!(blockNode instanceof nodes$2.Block)) {\n\t            return;\n\t        }\n\t        var hasSuper = false;\n\t        var symbol = gensym();\n\t        blockNode.body = walk(blockNode.body, function(node) {\n\t            // eslint-disable-line consistent-return\n\t            if (node instanceof nodes$2.FunCall && node.name.value === 'super') {\n\t                hasSuper = true;\n\t                return new nodes$2.Symbol(node.lineno, node.colno, symbol);\n\t            }\n\t        });\n\t        if (hasSuper) {\n\t            blockNode.body.children.unshift(new nodes$2.Super(0, 0, blockNode.name, new nodes$2.Symbol(0, 0, symbol)));\n\t        }\n\t    });\n\t}\n\tfunction convertStatements(ast) {\n\t    return depthWalk(ast, function(node) {\n\t        if (!(node instanceof nodes$2.If) && !(node instanceof nodes$2.For)) {\n\t            return undefined;\n\t        }\n\t        var async = false;\n\t        walk(node, function(child) {\n\t            if (child instanceof nodes$2.FilterAsync || child instanceof nodes$2.IfAsync || child instanceof nodes$2.AsyncEach || child instanceof nodes$2.AsyncAll || child instanceof nodes$2.CallExtensionAsync) {\n\t                async = true;\n\t                // Stop iterating by returning the node\n\t                return child;\n\t            }\n\t            return undefined;\n\t        });\n\t        if (async) {\n\t            if (node instanceof nodes$2.If) {\n\t                return new nodes$2.IfAsync(node.lineno, node.colno, node.cond, node.body, node.else_);\n\t            } else if (node instanceof nodes$2.For && !(node instanceof nodes$2.AsyncAll)) {\n\t                return new nodes$2.AsyncEach(node.lineno, node.colno, node.arr, node.name, node.body, node.else_);\n\t            }\n\t        }\n\t        return undefined;\n\t    });\n\t}\n\tfunction cps(ast, asyncFilters) {\n\t    return convertStatements(liftSuper(liftFilters(ast, asyncFilters)));\n\t}\n\tfunction transform(ast, asyncFilters) {\n\t    return cps(ast, asyncFilters || []);\n\t}\n\t// var parser = require('./parser');\n\t// var src = 'hello {% foo %}{% endfoo %} end';\n\t// var ast = transform(parser.parse(src, [new FooExtension()]), ['bar']);\n\t// nodes.printNodes(ast);\n\tvar transformer$1 = {\n\t    transform: transform\n\t};\n\n\tvar lib$4 = libExports;\n\tvar arrayFrom = Array.from;\n\tvar supportsIterators = typeof Symbol === 'function' && Symbol.iterator && typeof arrayFrom === 'function';\n\t// Frames keep track of scoping both at compile-time and run-time so\n\t// we know how to access variables. Block tags can introduce special\n\t// variables, for example.\n\tvar Frame$2 = /*#__PURE__*/ function() {\n\t    function Frame(parent, isolateWrites) {\n\t        this.variables = Object.create(null);\n\t        this.parent = parent;\n\t        this.topLevel = false;\n\t        // if this is true, writes (set) should never propagate upwards past\n\t        // this frame to its parent (though reads may).\n\t        this.isolateWrites = isolateWrites;\n\t    }\n\t    var _proto = Frame.prototype;\n\t    _proto.set = function set(name, val, resolveUp) {\n\t        // Allow variables with dots by automatically creating the\n\t        // nested structure\n\t        var parts = name.split('.');\n\t        var obj = this.variables;\n\t        var frame = this;\n\t        if (resolveUp) {\n\t            if (frame = this.resolve(parts[0], true)) {\n\t                frame.set(name, val);\n\t                return;\n\t            }\n\t        }\n\t        for(var i = 0; i < parts.length - 1; i++){\n\t            var id = parts[i];\n\t            if (!obj[id]) {\n\t                obj[id] = {};\n\t            }\n\t            obj = obj[id];\n\t        }\n\t        obj[parts[parts.length - 1]] = val;\n\t    };\n\t    _proto.get = function get(name) {\n\t        var val = this.variables[name];\n\t        if (val !== undefined) {\n\t            return val;\n\t        }\n\t        return null;\n\t    };\n\t    _proto.lookup = function lookup(name) {\n\t        var p = this.parent;\n\t        var val = this.variables[name];\n\t        if (val !== undefined) {\n\t            return val;\n\t        }\n\t        return p && p.lookup(name);\n\t    };\n\t    _proto.resolve = function resolve(name, forWrite) {\n\t        var p = forWrite && this.isolateWrites ? undefined : this.parent;\n\t        var val = this.variables[name];\n\t        if (val !== undefined) {\n\t            return this;\n\t        }\n\t        return p && p.resolve(name);\n\t    };\n\t    _proto.push = function push(isolateWrites) {\n\t        return new Frame(this, isolateWrites);\n\t    };\n\t    _proto.pop = function pop() {\n\t        return this.parent;\n\t    };\n\t    return Frame;\n\t}();\n\tfunction makeMacro(argNames, kwargNames, func) {\n\t    return function macro() {\n\t        for(var _len = arguments.length, macroArgs = new Array(_len), _key = 0; _key < _len; _key++){\n\t            macroArgs[_key] = arguments[_key];\n\t        }\n\t        var argCount = numArgs(macroArgs);\n\t        var args;\n\t        var kwargs = getKeywordArgs(macroArgs);\n\t        if (argCount > argNames.length) {\n\t            args = macroArgs.slice(0, argNames.length);\n\t            // Positional arguments that should be passed in as\n\t            // keyword arguments (essentially default values)\n\t            macroArgs.slice(args.length, argCount).forEach(function(val, i) {\n\t                if (i < kwargNames.length) {\n\t                    kwargs[kwargNames[i]] = val;\n\t                }\n\t            });\n\t            args.push(kwargs);\n\t        } else if (argCount < argNames.length) {\n\t            args = macroArgs.slice(0, argCount);\n\t            for(var i = argCount; i < argNames.length; i++){\n\t                var arg = argNames[i];\n\t                // Keyword arguments that should be passed as\n\t                // positional arguments, i.e. the caller explicitly\n\t                // used the name of a positional arg\n\t                args.push(kwargs[arg]);\n\t                delete kwargs[arg];\n\t            }\n\t            args.push(kwargs);\n\t        } else {\n\t            args = macroArgs;\n\t        }\n\t        return func.apply(this, args);\n\t    };\n\t}\n\tfunction makeKeywordArgs(obj) {\n\t    obj.__keywords = true;\n\t    return obj;\n\t}\n\tfunction isKeywordArgs(obj) {\n\t    return obj && Object.prototype.hasOwnProperty.call(obj, '__keywords');\n\t}\n\tfunction getKeywordArgs(args) {\n\t    var len = args.length;\n\t    if (len) {\n\t        var lastArg = args[len - 1];\n\t        if (isKeywordArgs(lastArg)) {\n\t            return lastArg;\n\t        }\n\t    }\n\t    return {};\n\t}\n\tfunction numArgs(args) {\n\t    var len = args.length;\n\t    if (len === 0) {\n\t        return 0;\n\t    }\n\t    var lastArg = args[len - 1];\n\t    if (isKeywordArgs(lastArg)) {\n\t        return len - 1;\n\t    } else {\n\t        return len;\n\t    }\n\t}\n\t// A SafeString object indicates that the string should not be\n\t// autoescaped. This happens magically because autoescaping only\n\t// occurs on primitive string objects.\n\tfunction SafeString(val) {\n\t    if (typeof val !== 'string') {\n\t        return val;\n\t    }\n\t    this.val = val;\n\t    this.length = val.length;\n\t}\n\tSafeString.prototype = Object.create(String.prototype, {\n\t    length: {\n\t        writable: true,\n\t        configurable: true,\n\t        value: 0\n\t    }\n\t});\n\tSafeString.prototype.valueOf = function valueOf() {\n\t    return this.val;\n\t};\n\tSafeString.prototype.toString = function toString() {\n\t    return this.val;\n\t};\n\tfunction copySafeness(dest, target) {\n\t    if (dest instanceof SafeString) {\n\t        return new SafeString(target);\n\t    }\n\t    return target.toString();\n\t}\n\tfunction markSafe(val) {\n\t    var type = typeof val;\n\t    if (type === 'string') {\n\t        return new SafeString(val);\n\t    } else if (type !== 'function') {\n\t        return val;\n\t    } else {\n\t        return function wrapSafe(args) {\n\t            var ret = val.apply(this, arguments);\n\t            if (typeof ret === 'string') {\n\t                return new SafeString(ret);\n\t            }\n\t            return ret;\n\t        };\n\t    }\n\t}\n\tfunction suppressValue(val, autoescape) {\n\t    val = val !== undefined && val !== null ? val : '';\n\t    if (autoescape && !(val instanceof SafeString)) {\n\t        val = lib$4.escape(val.toString());\n\t    }\n\t    return val;\n\t}\n\tfunction ensureDefined(val, lineno, colno) {\n\t    if (val === null || val === undefined) {\n\t        throw new lib$4.TemplateError('attempted to output null or undefined value', lineno + 1, colno + 1);\n\t    }\n\t    return val;\n\t}\n\tfunction memberLookup(obj, val) {\n\t    if (obj === undefined || obj === null) {\n\t        return undefined;\n\t    }\n\t    if (typeof obj[val] === 'function') {\n\t        return function() {\n\t            for(var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++){\n\t                args[_key2] = arguments[_key2];\n\t            }\n\t            return obj[val].apply(obj, args);\n\t        };\n\t    }\n\t    return obj[val];\n\t}\n\tfunction callWrap(obj, name, context, args) {\n\t    if (!obj) {\n\t        throw new Error('Unable to call `' + name + '`, which is undefined or falsey');\n\t    } else if (typeof obj !== 'function') {\n\t        throw new Error('Unable to call `' + name + '`, which is not a function');\n\t    }\n\t    return obj.apply(context, args);\n\t}\n\tfunction contextOrFrameLookup(context, frame, name) {\n\t    var val = frame.lookup(name);\n\t    return val !== undefined ? val : context.lookup(name);\n\t}\n\tfunction handleError$1(error, lineno, colno) {\n\t    if (error.lineno) {\n\t        return error;\n\t    } else {\n\t        return new lib$4.TemplateError(error, lineno, colno);\n\t    }\n\t}\n\tfunction asyncEach(arr, dimen, iter, cb) {\n\t    if (lib$4.isArray(arr)) {\n\t        var len = arr.length;\n\t        lib$4.asyncIter(arr, function iterCallback(item, i, next) {\n\t            switch(dimen){\n\t                case 1:\n\t                    iter(item, i, len, next);\n\t                    break;\n\t                case 2:\n\t                    iter(item[0], item[1], i, len, next);\n\t                    break;\n\t                case 3:\n\t                    iter(item[0], item[1], item[2], i, len, next);\n\t                    break;\n\t                default:\n\t                    item.push(i, len, next);\n\t                    iter.apply(this, item);\n\t            }\n\t        }, cb);\n\t    } else {\n\t        lib$4.asyncFor(arr, function iterCallback(key, val, i, len, next) {\n\t            iter(key, val, i, len, next);\n\t        }, cb);\n\t    }\n\t}\n\tfunction asyncAll(arr, dimen, func, cb) {\n\t    var finished = 0;\n\t    var len;\n\t    var outputArr;\n\t    function done(i, output) {\n\t        finished++;\n\t        outputArr[i] = output;\n\t        if (finished === len) {\n\t            cb(null, outputArr.join(''));\n\t        }\n\t    }\n\t    if (lib$4.isArray(arr)) {\n\t        len = arr.length;\n\t        outputArr = new Array(len);\n\t        if (len === 0) {\n\t            cb(null, '');\n\t        } else {\n\t            for(var i = 0; i < arr.length; i++){\n\t                var item = arr[i];\n\t                switch(dimen){\n\t                    case 1:\n\t                        func(item, i, len, done);\n\t                        break;\n\t                    case 2:\n\t                        func(item[0], item[1], i, len, done);\n\t                        break;\n\t                    case 3:\n\t                        func(item[0], item[1], item[2], i, len, done);\n\t                        break;\n\t                    default:\n\t                        item.push(i, len, done);\n\t                        func.apply(this, item);\n\t                }\n\t            }\n\t        }\n\t    } else {\n\t        var keys = lib$4.keys(arr || {});\n\t        len = keys.length;\n\t        outputArr = new Array(len);\n\t        if (len === 0) {\n\t            cb(null, '');\n\t        } else {\n\t            for(var _i = 0; _i < keys.length; _i++){\n\t                var k = keys[_i];\n\t                func(k, arr[k], _i, len, done);\n\t            }\n\t        }\n\t    }\n\t}\n\tfunction fromIterator(arr) {\n\t    if (typeof arr !== 'object' || arr === null || lib$4.isArray(arr)) {\n\t        return arr;\n\t    } else if (supportsIterators && Symbol.iterator in arr) {\n\t        return arrayFrom(arr);\n\t    } else {\n\t        return arr;\n\t    }\n\t}\n\tvar runtime$1 = {\n\t    Frame: Frame$2,\n\t    makeMacro: makeMacro,\n\t    makeKeywordArgs: makeKeywordArgs,\n\t    numArgs: numArgs,\n\t    suppressValue: suppressValue,\n\t    ensureDefined: ensureDefined,\n\t    memberLookup: memberLookup,\n\t    contextOrFrameLookup: contextOrFrameLookup,\n\t    callWrap: callWrap,\n\t    handleError: handleError$1,\n\t    isArray: lib$4.isArray,\n\t    keys: lib$4.keys,\n\t    SafeString: SafeString,\n\t    copySafeness: copySafeness,\n\t    markSafe: markSafe,\n\t    asyncEach: asyncEach,\n\t    asyncAll: asyncAll,\n\t    inOperator: lib$4.inOperator,\n\t    fromIterator: fromIterator\n\t};\n\n\tfunction _inheritsLoose$4(subClass, superClass) {\n\t    subClass.prototype = Object.create(superClass.prototype);\n\t    subClass.prototype.constructor = subClass;\n\t    _setPrototypeOf$4(subClass, superClass);\n\t}\n\tfunction _setPrototypeOf$4(o, p) {\n\t    _setPrototypeOf$4 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n\t        o.__proto__ = p;\n\t        return o;\n\t    };\n\t    return _setPrototypeOf$4(o, p);\n\t}\n\tvar parser$1 = parser$2;\n\tvar transformer = transformer$1;\n\tvar nodes$1 = nodes$4;\n\tvar _require$5 = libExports, TemplateError = _require$5.TemplateError;\n\tvar _require2$2 = runtime$1, Frame$1 = _require2$2.Frame;\n\tvar _require3 = object, Obj$1 = _require3.Obj;\n\t// These are all the same for now, but shouldn't be passed straight\n\t// through\n\tvar compareOps = {\n\t    '==': '==',\n\t    '===': '===',\n\t    '!=': '!=',\n\t    '!==': '!==',\n\t    '<': '<',\n\t    '>': '>',\n\t    '<=': '<=',\n\t    '>=': '>='\n\t};\n\tvar Compiler = /*#__PURE__*/ function(_Obj) {\n\t    _inheritsLoose$4(Compiler, _Obj);\n\t    function Compiler() {\n\t        return _Obj.apply(this, arguments) || this;\n\t    }\n\t    var _proto = Compiler.prototype;\n\t    _proto.init = function init(templateName, throwOnUndefined) {\n\t        this.templateName = templateName;\n\t        this.codebuf = [];\n\t        this.lastId = 0;\n\t        this.buffer = null;\n\t        this.bufferStack = [];\n\t        this._scopeClosers = '';\n\t        this.inBlock = false;\n\t        this.throwOnUndefined = throwOnUndefined;\n\t    };\n\t    _proto.fail = function fail(msg, lineno, colno) {\n\t        if (lineno !== undefined) {\n\t            lineno += 1;\n\t        }\n\t        if (colno !== undefined) {\n\t            colno += 1;\n\t        }\n\t        throw new TemplateError(msg, lineno, colno);\n\t    };\n\t    _proto._pushBuffer = function _pushBuffer() {\n\t        var id = this._tmpid();\n\t        this.bufferStack.push(this.buffer);\n\t        this.buffer = id;\n\t        this._emit(\"var \" + this.buffer + \" = \\\"\\\";\");\n\t        return id;\n\t    };\n\t    _proto._popBuffer = function _popBuffer() {\n\t        this.buffer = this.bufferStack.pop();\n\t    };\n\t    _proto._emit = function _emit(code) {\n\t        this.codebuf.push(code);\n\t    };\n\t    _proto._emitLine = function _emitLine(code) {\n\t        this._emit(code + '\\n');\n\t    };\n\t    _proto._emitLines = function _emitLines() {\n\t        var _this = this;\n\t        for(var _len = arguments.length, lines = new Array(_len), _key = 0; _key < _len; _key++){\n\t            lines[_key] = arguments[_key];\n\t        }\n\t        lines.forEach(function(line) {\n\t            return _this._emitLine(line);\n\t        });\n\t    };\n\t    _proto._emitFuncBegin = function _emitFuncBegin(node, name) {\n\t        this.buffer = 'output';\n\t        this._scopeClosers = '';\n\t        this._emitLine(\"function \" + name + \"(env, context, frame, runtime, cb) {\");\n\t        this._emitLine(\"var lineno = \" + node.lineno + \";\");\n\t        this._emitLine(\"var colno = \" + node.colno + \";\");\n\t        this._emitLine(\"var \" + this.buffer + \" = \\\"\\\";\");\n\t        this._emitLine('try {');\n\t    };\n\t    _proto._emitFuncEnd = function _emitFuncEnd(noReturn) {\n\t        if (!noReturn) {\n\t            this._emitLine('cb(null, ' + this.buffer + ');');\n\t        }\n\t        this._closeScopeLevels();\n\t        this._emitLine('} catch (e) {');\n\t        this._emitLine('  cb(runtime.handleError(e, lineno, colno));');\n\t        this._emitLine('}');\n\t        this._emitLine('}');\n\t        this.buffer = null;\n\t    };\n\t    _proto._addScopeLevel = function _addScopeLevel() {\n\t        this._scopeClosers += '})';\n\t    };\n\t    _proto._closeScopeLevels = function _closeScopeLevels() {\n\t        this._emitLine(this._scopeClosers + ';');\n\t        this._scopeClosers = '';\n\t    };\n\t    _proto._withScopedSyntax = function _withScopedSyntax(func) {\n\t        var _scopeClosers = this._scopeClosers;\n\t        this._scopeClosers = '';\n\t        func.call(this);\n\t        this._closeScopeLevels();\n\t        this._scopeClosers = _scopeClosers;\n\t    };\n\t    _proto._makeCallback = function _makeCallback(res) {\n\t        var err = this._tmpid();\n\t        return 'function(' + err + (res ? ',' + res : '') + ') {\\n' + 'if(' + err + ') { cb(' + err + '); return; }';\n\t    };\n\t    _proto._tmpid = function _tmpid() {\n\t        this.lastId++;\n\t        return 't_' + this.lastId;\n\t    };\n\t    _proto._templateName = function _templateName() {\n\t        return this.templateName == null ? 'undefined' : JSON.stringify(this.templateName);\n\t    };\n\t    _proto._compileChildren = function _compileChildren(node, frame) {\n\t        var _this2 = this;\n\t        node.children.forEach(function(child) {\n\t            _this2.compile(child, frame);\n\t        });\n\t    };\n\t    _proto._compileAggregate = function _compileAggregate(node, frame, startChar, endChar) {\n\t        var _this3 = this;\n\t        if (startChar) {\n\t            this._emit(startChar);\n\t        }\n\t        node.children.forEach(function(child, i) {\n\t            if (i > 0) {\n\t                _this3._emit(',');\n\t            }\n\t            _this3.compile(child, frame);\n\t        });\n\t        if (endChar) {\n\t            this._emit(endChar);\n\t        }\n\t    };\n\t    _proto._compileExpression = function _compileExpression(node, frame) {\n\t        // TODO: I'm not really sure if this type check is worth it or\n\t        // not.\n\t        this.assertType(node, nodes$1.Literal, nodes$1.Symbol, nodes$1.Group, nodes$1.Array, nodes$1.Dict, nodes$1.FunCall, nodes$1.Caller, nodes$1.Filter, nodes$1.LookupVal, nodes$1.Compare, nodes$1.InlineIf, nodes$1.In, nodes$1.Is, nodes$1.And, nodes$1.Or, nodes$1.Not, nodes$1.Add, nodes$1.Concat, nodes$1.Sub, nodes$1.Mul, nodes$1.Div, nodes$1.FloorDiv, nodes$1.Mod, nodes$1.Pow, nodes$1.Neg, nodes$1.Pos, nodes$1.Compare, nodes$1.NodeList);\n\t        this.compile(node, frame);\n\t    };\n\t    _proto.assertType = function assertType(node) {\n\t        for(var _len2 = arguments.length, types = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){\n\t            types[_key2 - 1] = arguments[_key2];\n\t        }\n\t        if (!types.some(function(t) {\n\t            return node instanceof t;\n\t        })) {\n\t            this.fail(\"assertType: invalid type: \" + node.typename, node.lineno, node.colno);\n\t        }\n\t    };\n\t    _proto.compileCallExtension = function compileCallExtension(node, frame, async) {\n\t        var _this4 = this;\n\t        var args = node.args;\n\t        var contentArgs = node.contentArgs;\n\t        var autoescape = typeof node.autoescape === 'boolean' ? node.autoescape : true;\n\t        if (!async) {\n\t            this._emit(this.buffer + \" += runtime.suppressValue(\");\n\t        }\n\t        this._emit(\"env.getExtension(\\\"\" + node.extName + \"\\\")[\\\"\" + node.prop + \"\\\"](\");\n\t        this._emit('context');\n\t        if (args || contentArgs) {\n\t            this._emit(',');\n\t        }\n\t        if (args) {\n\t            if (!(args instanceof nodes$1.NodeList)) {\n\t                this.fail('compileCallExtension: arguments must be a NodeList, ' + 'use `parser.parseSignature`');\n\t            }\n\t            args.children.forEach(function(arg, i) {\n\t                // Tag arguments are passed normally to the call. Note\n\t                // that keyword arguments are turned into a single js\n\t                // object as the last argument, if they exist.\n\t                _this4._compileExpression(arg, frame);\n\t                if (i !== args.children.length - 1 || contentArgs.length) {\n\t                    _this4._emit(',');\n\t                }\n\t            });\n\t        }\n\t        if (contentArgs.length) {\n\t            contentArgs.forEach(function(arg, i) {\n\t                if (i > 0) {\n\t                    _this4._emit(',');\n\t                }\n\t                if (arg) {\n\t                    _this4._emitLine('function(cb) {');\n\t                    _this4._emitLine('if(!cb) { cb = function(err) { if(err) { throw err; }}}');\n\t                    var id = _this4._pushBuffer();\n\t                    _this4._withScopedSyntax(function() {\n\t                        _this4.compile(arg, frame);\n\t                        _this4._emitLine(\"cb(null, \" + id + \");\");\n\t                    });\n\t                    _this4._popBuffer();\n\t                    _this4._emitLine(\"return \" + id + \";\");\n\t                    _this4._emitLine('}');\n\t                } else {\n\t                    _this4._emit('null');\n\t                }\n\t            });\n\t        }\n\t        if (async) {\n\t            var res = this._tmpid();\n\t            this._emitLine(', ' + this._makeCallback(res));\n\t            this._emitLine(this.buffer + \" += runtime.suppressValue(\" + res + \", \" + autoescape + \" && env.opts.autoescape);\");\n\t            this._addScopeLevel();\n\t        } else {\n\t            this._emit(')');\n\t            this._emit(\", \" + autoescape + \" && env.opts.autoescape);\\n\");\n\t        }\n\t    };\n\t    _proto.compileCallExtensionAsync = function compileCallExtensionAsync(node, frame) {\n\t        this.compileCallExtension(node, frame, true);\n\t    };\n\t    _proto.compileNodeList = function compileNodeList(node, frame) {\n\t        this._compileChildren(node, frame);\n\t    };\n\t    _proto.compileLiteral = function compileLiteral(node) {\n\t        if (typeof node.value === 'string') {\n\t            var val = node.value.replace(/\\\\/g, '\\\\\\\\');\n\t            val = val.replace(/\"/g, '\\\\\"');\n\t            val = val.replace(/\\n/g, '\\\\n');\n\t            val = val.replace(/\\r/g, '\\\\r');\n\t            val = val.replace(/\\t/g, '\\\\t');\n\t            val = val.replace(/\\u2028/g, \"\\\\u2028\");\n\t            this._emit(\"\\\"\" + val + \"\\\"\");\n\t        } else if (node.value === null) {\n\t            this._emit('null');\n\t        } else {\n\t            this._emit(node.value.toString());\n\t        }\n\t    };\n\t    _proto.compileSymbol = function compileSymbol(node, frame) {\n\t        var name = node.value;\n\t        var v = frame.lookup(name);\n\t        if (v) {\n\t            this._emit(v);\n\t        } else {\n\t            this._emit('runtime.contextOrFrameLookup(' + 'context, frame, \"' + name + '\")');\n\t        }\n\t    };\n\t    _proto.compileGroup = function compileGroup(node, frame) {\n\t        this._compileAggregate(node, frame, '(', ')');\n\t    };\n\t    _proto.compileArray = function compileArray(node, frame) {\n\t        this._compileAggregate(node, frame, '[', ']');\n\t    };\n\t    _proto.compileDict = function compileDict(node, frame) {\n\t        this._compileAggregate(node, frame, '{', '}');\n\t    };\n\t    _proto.compilePair = function compilePair(node, frame) {\n\t        var key = node.key;\n\t        var val = node.value;\n\t        if (key instanceof nodes$1.Symbol) {\n\t            key = new nodes$1.Literal(key.lineno, key.colno, key.value);\n\t        } else if (!(key instanceof nodes$1.Literal && typeof key.value === 'string')) {\n\t            this.fail('compilePair: Dict keys must be strings or names', key.lineno, key.colno);\n\t        }\n\t        this.compile(key, frame);\n\t        this._emit(': ');\n\t        this._compileExpression(val, frame);\n\t    };\n\t    _proto.compileInlineIf = function compileInlineIf(node, frame) {\n\t        this._emit('(');\n\t        this.compile(node.cond, frame);\n\t        this._emit('?');\n\t        this.compile(node.body, frame);\n\t        this._emit(':');\n\t        if (node.else_ !== null) {\n\t            this.compile(node.else_, frame);\n\t        } else {\n\t            this._emit('\"\"');\n\t        }\n\t        this._emit(')');\n\t    };\n\t    _proto.compileIn = function compileIn(node, frame) {\n\t        this._emit('runtime.inOperator(');\n\t        this.compile(node.left, frame);\n\t        this._emit(',');\n\t        this.compile(node.right, frame);\n\t        this._emit(')');\n\t    };\n\t    _proto.compileIs = function compileIs(node, frame) {\n\t        // first, we need to try to get the name of the test function, if it's a\n\t        // callable (i.e., has args) and not a symbol.\n\t        var right = node.right.name ? node.right.name.value : node.right.value;\n\t        this._emit('env.getTest(\"' + right + '\").call(context, ');\n\t        this.compile(node.left, frame);\n\t        // compile the arguments for the callable if they exist\n\t        if (node.right.args) {\n\t            this._emit(',');\n\t            this.compile(node.right.args, frame);\n\t        }\n\t        this._emit(') === true');\n\t    };\n\t    _proto._binOpEmitter = function _binOpEmitter(node, frame, str) {\n\t        this.compile(node.left, frame);\n\t        this._emit(str);\n\t        this.compile(node.right, frame);\n\t    };\n\t    _proto.compileOr = function compileOr(node, frame) {\n\t        return this._binOpEmitter(node, frame, ' || ');\n\t    };\n\t    _proto.compileAnd = function compileAnd(node, frame) {\n\t        return this._binOpEmitter(node, frame, ' && ');\n\t    };\n\t    _proto.compileAdd = function compileAdd(node, frame) {\n\t        return this._binOpEmitter(node, frame, ' + ');\n\t    };\n\t    _proto.compileConcat = function compileConcat(node, frame) {\n\t        return this._binOpEmitter(node, frame, ' + \"\" + ');\n\t    };\n\t    _proto.compileSub = function compileSub(node, frame) {\n\t        return this._binOpEmitter(node, frame, ' - ');\n\t    };\n\t    _proto.compileMul = function compileMul(node, frame) {\n\t        return this._binOpEmitter(node, frame, ' * ');\n\t    };\n\t    _proto.compileDiv = function compileDiv(node, frame) {\n\t        return this._binOpEmitter(node, frame, ' / ');\n\t    };\n\t    _proto.compileMod = function compileMod(node, frame) {\n\t        return this._binOpEmitter(node, frame, ' % ');\n\t    };\n\t    _proto.compileNot = function compileNot(node, frame) {\n\t        this._emit('!');\n\t        this.compile(node.target, frame);\n\t    };\n\t    _proto.compileFloorDiv = function compileFloorDiv(node, frame) {\n\t        this._emit('Math.floor(');\n\t        this.compile(node.left, frame);\n\t        this._emit(' / ');\n\t        this.compile(node.right, frame);\n\t        this._emit(')');\n\t    };\n\t    _proto.compilePow = function compilePow(node, frame) {\n\t        this._emit('Math.pow(');\n\t        this.compile(node.left, frame);\n\t        this._emit(', ');\n\t        this.compile(node.right, frame);\n\t        this._emit(')');\n\t    };\n\t    _proto.compileNeg = function compileNeg(node, frame) {\n\t        this._emit('-');\n\t        this.compile(node.target, frame);\n\t    };\n\t    _proto.compilePos = function compilePos(node, frame) {\n\t        this._emit('+');\n\t        this.compile(node.target, frame);\n\t    };\n\t    _proto.compileCompare = function compileCompare(node, frame) {\n\t        var _this5 = this;\n\t        this.compile(node.expr, frame);\n\t        node.ops.forEach(function(op) {\n\t            _this5._emit(\" \" + compareOps[op.type] + \" \");\n\t            _this5.compile(op.expr, frame);\n\t        });\n\t    };\n\t    _proto.compileLookupVal = function compileLookupVal(node, frame) {\n\t        this._emit('runtime.memberLookup((');\n\t        this._compileExpression(node.target, frame);\n\t        this._emit('),');\n\t        this._compileExpression(node.val, frame);\n\t        this._emit(')');\n\t    };\n\t    _proto._getNodeName = function _getNodeName(node) {\n\t        switch(node.typename){\n\t            case 'Symbol':\n\t                return node.value;\n\t            case 'FunCall':\n\t                return 'the return value of (' + this._getNodeName(node.name) + ')';\n\t            case 'LookupVal':\n\t                return this._getNodeName(node.target) + '[\"' + this._getNodeName(node.val) + '\"]';\n\t            case 'Literal':\n\t                return node.value.toString();\n\t            default:\n\t                return '--expression--';\n\t        }\n\t    };\n\t    _proto.compileFunCall = function compileFunCall(node, frame) {\n\t        // Keep track of line/col info at runtime by settings\n\t        // variables within an expression. An expression in javascript\n\t        // like (x, y, z) returns the last value, and x and y can be\n\t        // anything\n\t        this._emit('(lineno = ' + node.lineno + ', colno = ' + node.colno + ', ');\n\t        this._emit('runtime.callWrap(');\n\t        // Compile it as normal.\n\t        this._compileExpression(node.name, frame);\n\t        // Output the name of what we're calling so we can get friendly errors\n\t        // if the lookup fails.\n\t        this._emit(', \"' + this._getNodeName(node.name).replace(/\"/g, '\\\\\"') + '\", context, ');\n\t        this._compileAggregate(node.args, frame, '[', '])');\n\t        this._emit(')');\n\t    };\n\t    _proto.compileFilter = function compileFilter(node, frame) {\n\t        var name = node.name;\n\t        this.assertType(name, nodes$1.Symbol);\n\t        this._emit('env.getFilter(\"' + name.value + '\").call(context, ');\n\t        this._compileAggregate(node.args, frame);\n\t        this._emit(')');\n\t    };\n\t    _proto.compileFilterAsync = function compileFilterAsync(node, frame) {\n\t        var name = node.name;\n\t        var symbol = node.symbol.value;\n\t        this.assertType(name, nodes$1.Symbol);\n\t        frame.set(symbol, symbol);\n\t        this._emit('env.getFilter(\"' + name.value + '\").call(context, ');\n\t        this._compileAggregate(node.args, frame);\n\t        this._emitLine(', ' + this._makeCallback(symbol));\n\t        this._addScopeLevel();\n\t    };\n\t    _proto.compileKeywordArgs = function compileKeywordArgs(node, frame) {\n\t        this._emit('runtime.makeKeywordArgs(');\n\t        this.compileDict(node, frame);\n\t        this._emit(')');\n\t    };\n\t    _proto.compileSet = function compileSet(node, frame) {\n\t        var _this6 = this;\n\t        var ids = [];\n\t        // Lookup the variable names for each identifier and create\n\t        // new ones if necessary\n\t        node.targets.forEach(function(target) {\n\t            var name = target.value;\n\t            var id = frame.lookup(name);\n\t            if (id === null || id === undefined) {\n\t                id = _this6._tmpid();\n\t                // Note: This relies on js allowing scope across\n\t                // blocks, in case this is created inside an `if`\n\t                _this6._emitLine('var ' + id + ';');\n\t            }\n\t            ids.push(id);\n\t        });\n\t        if (node.value) {\n\t            this._emit(ids.join(' = ') + ' = ');\n\t            this._compileExpression(node.value, frame);\n\t            this._emitLine(';');\n\t        } else {\n\t            this._emit(ids.join(' = ') + ' = ');\n\t            this.compile(node.body, frame);\n\t            this._emitLine(';');\n\t        }\n\t        node.targets.forEach(function(target, i) {\n\t            var id = ids[i];\n\t            var name = target.value;\n\t            // We are running this for every var, but it's very\n\t            // uncommon to assign to multiple vars anyway\n\t            _this6._emitLine(\"frame.set(\\\"\" + name + \"\\\", \" + id + \", true);\");\n\t            _this6._emitLine('if(frame.topLevel) {');\n\t            _this6._emitLine(\"context.setVariable(\\\"\" + name + \"\\\", \" + id + \");\");\n\t            _this6._emitLine('}');\n\t            if (name.charAt(0) !== '_') {\n\t                _this6._emitLine('if(frame.topLevel) {');\n\t                _this6._emitLine(\"context.addExport(\\\"\" + name + \"\\\", \" + id + \");\");\n\t                _this6._emitLine('}');\n\t            }\n\t        });\n\t    };\n\t    _proto.compileSwitch = function compileSwitch(node, frame) {\n\t        var _this7 = this;\n\t        this._emit('switch (');\n\t        this.compile(node.expr, frame);\n\t        this._emit(') {');\n\t        node.cases.forEach(function(c, i) {\n\t            _this7._emit('case ');\n\t            _this7.compile(c.cond, frame);\n\t            _this7._emit(': ');\n\t            _this7.compile(c.body, frame);\n\t            // preserve fall-throughs\n\t            if (c.body.children.length) {\n\t                _this7._emitLine('break;');\n\t            }\n\t        });\n\t        if (node.default) {\n\t            this._emit('default:');\n\t            this.compile(node.default, frame);\n\t        }\n\t        this._emit('}');\n\t    };\n\t    _proto.compileIf = function compileIf(node, frame, async) {\n\t        var _this8 = this;\n\t        this._emit('if(');\n\t        this._compileExpression(node.cond, frame);\n\t        this._emitLine(') {');\n\t        this._withScopedSyntax(function() {\n\t            _this8.compile(node.body, frame);\n\t            if (async) {\n\t                _this8._emit('cb()');\n\t            }\n\t        });\n\t        if (node.else_) {\n\t            this._emitLine('}\\nelse {');\n\t            this._withScopedSyntax(function() {\n\t                _this8.compile(node.else_, frame);\n\t                if (async) {\n\t                    _this8._emit('cb()');\n\t                }\n\t            });\n\t        } else if (async) {\n\t            this._emitLine('}\\nelse {');\n\t            this._emit('cb()');\n\t        }\n\t        this._emitLine('}');\n\t    };\n\t    _proto.compileIfAsync = function compileIfAsync(node, frame) {\n\t        this._emit('(function(cb) {');\n\t        this.compileIf(node, frame, true);\n\t        this._emit('})(' + this._makeCallback());\n\t        this._addScopeLevel();\n\t    };\n\t    _proto._emitLoopBindings = function _emitLoopBindings(node, arr, i, len) {\n\t        var _this9 = this;\n\t        var bindings = [\n\t            {\n\t                name: 'index',\n\t                val: i + \" + 1\"\n\t            },\n\t            {\n\t                name: 'index0',\n\t                val: i\n\t            },\n\t            {\n\t                name: 'revindex',\n\t                val: len + \" - \" + i\n\t            },\n\t            {\n\t                name: 'revindex0',\n\t                val: len + \" - \" + i + \" - 1\"\n\t            },\n\t            {\n\t                name: 'first',\n\t                val: i + \" === 0\"\n\t            },\n\t            {\n\t                name: 'last',\n\t                val: i + \" === \" + len + \" - 1\"\n\t            },\n\t            {\n\t                name: 'length',\n\t                val: len\n\t            }\n\t        ];\n\t        bindings.forEach(function(b) {\n\t            _this9._emitLine(\"frame.set(\\\"loop.\" + b.name + \"\\\", \" + b.val + \");\");\n\t        });\n\t    };\n\t    _proto.compileFor = function compileFor(node, frame) {\n\t        var _this10 = this;\n\t        // Some of this code is ugly, but it keeps the generated code\n\t        // as fast as possible. ForAsync also shares some of this, but\n\t        // not much.\n\t        var i = this._tmpid();\n\t        var len = this._tmpid();\n\t        var arr = this._tmpid();\n\t        frame = frame.push();\n\t        this._emitLine('frame = frame.push();');\n\t        this._emit(\"var \" + arr + \" = \");\n\t        this._compileExpression(node.arr, frame);\n\t        this._emitLine(';');\n\t        this._emit(\"if(\" + arr + \") {\");\n\t        this._emitLine(arr + ' = runtime.fromIterator(' + arr + ');');\n\t        // If multiple names are passed, we need to bind them\n\t        // appropriately\n\t        if (node.name instanceof nodes$1.Array) {\n\t            this._emitLine(\"var \" + i + \";\");\n\t            // The object could be an arroy or object. Note that the\n\t            // body of the loop is duplicated for each condition, but\n\t            // we are optimizing for speed over size.\n\t            this._emitLine(\"if(runtime.isArray(\" + arr + \")) {\");\n\t            this._emitLine(\"var \" + len + \" = \" + arr + \".length;\");\n\t            this._emitLine(\"for(\" + i + \"=0; \" + i + \" < \" + arr + \".length; \" + i + \"++) {\");\n\t            // Bind each declared var\n\t            node.name.children.forEach(function(child, u) {\n\t                var tid = _this10._tmpid();\n\t                _this10._emitLine(\"var \" + tid + \" = \" + arr + \"[\" + i + \"][\" + u + \"];\");\n\t                _this10._emitLine(\"frame.set(\\\"\" + child + \"\\\", \" + arr + \"[\" + i + \"][\" + u + \"]);\");\n\t                frame.set(node.name.children[u].value, tid);\n\t            });\n\t            this._emitLoopBindings(node, arr, i, len);\n\t            this._withScopedSyntax(function() {\n\t                _this10.compile(node.body, frame);\n\t            });\n\t            this._emitLine('}');\n\t            this._emitLine('} else {');\n\t            // Iterate over the key/values of an object\n\t            var _node$name$children = node.name.children, key = _node$name$children[0], val = _node$name$children[1];\n\t            var k = this._tmpid();\n\t            var v = this._tmpid();\n\t            frame.set(key.value, k);\n\t            frame.set(val.value, v);\n\t            this._emitLine(i + \" = -1;\");\n\t            this._emitLine(\"var \" + len + \" = runtime.keys(\" + arr + \").length;\");\n\t            this._emitLine(\"for(var \" + k + \" in \" + arr + \") {\");\n\t            this._emitLine(i + \"++;\");\n\t            this._emitLine(\"var \" + v + \" = \" + arr + \"[\" + k + \"];\");\n\t            this._emitLine(\"frame.set(\\\"\" + key.value + \"\\\", \" + k + \");\");\n\t            this._emitLine(\"frame.set(\\\"\" + val.value + \"\\\", \" + v + \");\");\n\t            this._emitLoopBindings(node, arr, i, len);\n\t            this._withScopedSyntax(function() {\n\t                _this10.compile(node.body, frame);\n\t            });\n\t            this._emitLine('}');\n\t            this._emitLine('}');\n\t        } else {\n\t            // Generate a typical array iteration\n\t            var _v = this._tmpid();\n\t            frame.set(node.name.value, _v);\n\t            this._emitLine(\"var \" + len + \" = \" + arr + \".length;\");\n\t            this._emitLine(\"for(var \" + i + \"=0; \" + i + \" < \" + arr + \".length; \" + i + \"++) {\");\n\t            this._emitLine(\"var \" + _v + \" = \" + arr + \"[\" + i + \"];\");\n\t            this._emitLine(\"frame.set(\\\"\" + node.name.value + \"\\\", \" + _v + \");\");\n\t            this._emitLoopBindings(node, arr, i, len);\n\t            this._withScopedSyntax(function() {\n\t                _this10.compile(node.body, frame);\n\t            });\n\t            this._emitLine('}');\n\t        }\n\t        this._emitLine('}');\n\t        if (node.else_) {\n\t            this._emitLine('if (!' + len + ') {');\n\t            this.compile(node.else_, frame);\n\t            this._emitLine('}');\n\t        }\n\t        this._emitLine('frame = frame.pop();');\n\t    };\n\t    _proto._compileAsyncLoop = function _compileAsyncLoop(node, frame, parallel) {\n\t        var _this11 = this;\n\t        // This shares some code with the For tag, but not enough to\n\t        // worry about. This iterates across an object asynchronously,\n\t        // but not in parallel.\n\t        var i = this._tmpid();\n\t        var len = this._tmpid();\n\t        var arr = this._tmpid();\n\t        var asyncMethod = parallel ? 'asyncAll' : 'asyncEach';\n\t        frame = frame.push();\n\t        this._emitLine('frame = frame.push();');\n\t        this._emit('var ' + arr + ' = runtime.fromIterator(');\n\t        this._compileExpression(node.arr, frame);\n\t        this._emitLine(');');\n\t        if (node.name instanceof nodes$1.Array) {\n\t            var arrayLen = node.name.children.length;\n\t            this._emit(\"runtime.\" + asyncMethod + \"(\" + arr + \", \" + arrayLen + \", function(\");\n\t            node.name.children.forEach(function(name) {\n\t                _this11._emit(name.value + \",\");\n\t            });\n\t            this._emit(i + ',' + len + ',next) {');\n\t            node.name.children.forEach(function(name) {\n\t                var id = name.value;\n\t                frame.set(id, id);\n\t                _this11._emitLine(\"frame.set(\\\"\" + id + \"\\\", \" + id + \");\");\n\t            });\n\t        } else {\n\t            var id = node.name.value;\n\t            this._emitLine(\"runtime.\" + asyncMethod + \"(\" + arr + \", 1, function(\" + id + \", \" + i + \", \" + len + \",next) {\");\n\t            this._emitLine('frame.set(\"' + id + '\", ' + id + ');');\n\t            frame.set(id, id);\n\t        }\n\t        this._emitLoopBindings(node, arr, i, len);\n\t        this._withScopedSyntax(function() {\n\t            var buf;\n\t            if (parallel) {\n\t                buf = _this11._pushBuffer();\n\t            }\n\t            _this11.compile(node.body, frame);\n\t            _this11._emitLine('next(' + i + (buf ? ',' + buf : '') + ');');\n\t            if (parallel) {\n\t                _this11._popBuffer();\n\t            }\n\t        });\n\t        var output = this._tmpid();\n\t        this._emitLine('}, ' + this._makeCallback(output));\n\t        this._addScopeLevel();\n\t        if (parallel) {\n\t            this._emitLine(this.buffer + ' += ' + output + ';');\n\t        }\n\t        if (node.else_) {\n\t            this._emitLine('if (!' + arr + '.length) {');\n\t            this.compile(node.else_, frame);\n\t            this._emitLine('}');\n\t        }\n\t        this._emitLine('frame = frame.pop();');\n\t    };\n\t    _proto.compileAsyncEach = function compileAsyncEach(node, frame) {\n\t        this._compileAsyncLoop(node, frame);\n\t    };\n\t    _proto.compileAsyncAll = function compileAsyncAll(node, frame) {\n\t        this._compileAsyncLoop(node, frame, true);\n\t    };\n\t    _proto._compileMacro = function _compileMacro(node, frame) {\n\t        var _this12 = this;\n\t        var args = [];\n\t        var kwargs = null;\n\t        var funcId = 'macro_' + this._tmpid();\n\t        var keepFrame = frame !== undefined;\n\t        // Type check the definition of the args\n\t        node.args.children.forEach(function(arg, i) {\n\t            if (i === node.args.children.length - 1 && arg instanceof nodes$1.Dict) {\n\t                kwargs = arg;\n\t            } else {\n\t                _this12.assertType(arg, nodes$1.Symbol);\n\t                args.push(arg);\n\t            }\n\t        });\n\t        var realNames = [].concat(args.map(function(n) {\n\t            return \"l_\" + n.value;\n\t        }), [\n\t            'kwargs'\n\t        ]);\n\t        // Quoted argument names\n\t        var argNames = args.map(function(n) {\n\t            return \"\\\"\" + n.value + \"\\\"\";\n\t        });\n\t        var kwargNames = (kwargs && kwargs.children || []).map(function(n) {\n\t            return \"\\\"\" + n.key.value + \"\\\"\";\n\t        });\n\t        // We pass a function to makeMacro which destructures the\n\t        // arguments so support setting positional args with keywords\n\t        // args and passing keyword args as positional args\n\t        // (essentially default values). See runtime.js.\n\t        var currFrame;\n\t        if (keepFrame) {\n\t            currFrame = frame.push(true);\n\t        } else {\n\t            currFrame = new Frame$1();\n\t        }\n\t        this._emitLines(\"var \" + funcId + \" = runtime.makeMacro(\", \"[\" + argNames.join(', ') + \"], \", \"[\" + kwargNames.join(', ') + \"], \", \"function (\" + realNames.join(', ') + \") {\", 'var callerFrame = frame;', 'frame = ' + (keepFrame ? 'frame.push(true);' : 'new runtime.Frame();'), 'kwargs = kwargs || {};', 'if (Object.prototype.hasOwnProperty.call(kwargs, \"caller\")) {', 'frame.set(\"caller\", kwargs.caller); }');\n\t        // Expose the arguments to the template. Don't need to use\n\t        // random names because the function\n\t        // will create a new run-time scope for us\n\t        args.forEach(function(arg) {\n\t            _this12._emitLine(\"frame.set(\\\"\" + arg.value + \"\\\", l_\" + arg.value + \");\");\n\t            currFrame.set(arg.value, \"l_\" + arg.value);\n\t        });\n\t        // Expose the keyword arguments\n\t        if (kwargs) {\n\t            kwargs.children.forEach(function(pair) {\n\t                var name = pair.key.value;\n\t                _this12._emit(\"frame.set(\\\"\" + name + \"\\\", \");\n\t                _this12._emit(\"Object.prototype.hasOwnProperty.call(kwargs, \\\"\" + name + \"\\\")\");\n\t                _this12._emit(\" ? kwargs[\\\"\" + name + \"\\\"] : \");\n\t                _this12._compileExpression(pair.value, currFrame);\n\t                _this12._emit(');');\n\t            });\n\t        }\n\t        var bufferId = this._pushBuffer();\n\t        this._withScopedSyntax(function() {\n\t            _this12.compile(node.body, currFrame);\n\t        });\n\t        this._emitLine('frame = ' + (keepFrame ? 'frame.pop();' : 'callerFrame;'));\n\t        this._emitLine(\"return new runtime.SafeString(\" + bufferId + \");\");\n\t        this._emitLine('});');\n\t        this._popBuffer();\n\t        return funcId;\n\t    };\n\t    _proto.compileMacro = function compileMacro(node, frame) {\n\t        var funcId = this._compileMacro(node);\n\t        // Expose the macro to the templates\n\t        var name = node.name.value;\n\t        frame.set(name, funcId);\n\t        if (frame.parent) {\n\t            this._emitLine(\"frame.set(\\\"\" + name + \"\\\", \" + funcId + \");\");\n\t        } else {\n\t            if (node.name.value.charAt(0) !== '_') {\n\t                this._emitLine(\"context.addExport(\\\"\" + name + \"\\\");\");\n\t            }\n\t            this._emitLine(\"context.setVariable(\\\"\" + name + \"\\\", \" + funcId + \");\");\n\t        }\n\t    };\n\t    _proto.compileCaller = function compileCaller(node, frame) {\n\t        // basically an anonymous \"macro expression\"\n\t        this._emit('(function (){');\n\t        var funcId = this._compileMacro(node, frame);\n\t        this._emit(\"return \" + funcId + \";})()\");\n\t    };\n\t    _proto._compileGetTemplate = function _compileGetTemplate(node, frame, eagerCompile, ignoreMissing) {\n\t        var parentTemplateId = this._tmpid();\n\t        var parentName = this._templateName();\n\t        var cb = this._makeCallback(parentTemplateId);\n\t        var eagerCompileArg = eagerCompile ? 'true' : 'false';\n\t        var ignoreMissingArg = ignoreMissing ? 'true' : 'false';\n\t        this._emit('env.getTemplate(');\n\t        this._compileExpression(node.template, frame);\n\t        this._emitLine(\", \" + eagerCompileArg + \", \" + parentName + \", \" + ignoreMissingArg + \", \" + cb);\n\t        return parentTemplateId;\n\t    };\n\t    _proto.compileImport = function compileImport(node, frame) {\n\t        var target = node.target.value;\n\t        var id = this._compileGetTemplate(node, frame, false, false);\n\t        this._addScopeLevel();\n\t        this._emitLine(id + '.getExported(' + (node.withContext ? 'context.getVariables(), frame, ' : '') + this._makeCallback(id));\n\t        this._addScopeLevel();\n\t        frame.set(target, id);\n\t        if (frame.parent) {\n\t            this._emitLine(\"frame.set(\\\"\" + target + \"\\\", \" + id + \");\");\n\t        } else {\n\t            this._emitLine(\"context.setVariable(\\\"\" + target + \"\\\", \" + id + \");\");\n\t        }\n\t    };\n\t    _proto.compileFromImport = function compileFromImport(node, frame) {\n\t        var _this13 = this;\n\t        var importedId = this._compileGetTemplate(node, frame, false, false);\n\t        this._addScopeLevel();\n\t        this._emitLine(importedId + '.getExported(' + (node.withContext ? 'context.getVariables(), frame, ' : '') + this._makeCallback(importedId));\n\t        this._addScopeLevel();\n\t        node.names.children.forEach(function(nameNode) {\n\t            var name;\n\t            var alias;\n\t            var id = _this13._tmpid();\n\t            if (nameNode instanceof nodes$1.Pair) {\n\t                name = nameNode.key.value;\n\t                alias = nameNode.value.value;\n\t            } else {\n\t                name = nameNode.value;\n\t                alias = name;\n\t            }\n\t            _this13._emitLine(\"if(Object.prototype.hasOwnProperty.call(\" + importedId + \", \\\"\" + name + \"\\\")) {\");\n\t            _this13._emitLine(\"var \" + id + \" = \" + importedId + \".\" + name + \";\");\n\t            _this13._emitLine('} else {');\n\t            _this13._emitLine(\"cb(new Error(\\\"cannot import '\" + name + \"'\\\")); return;\");\n\t            _this13._emitLine('}');\n\t            frame.set(alias, id);\n\t            if (frame.parent) {\n\t                _this13._emitLine(\"frame.set(\\\"\" + alias + \"\\\", \" + id + \");\");\n\t            } else {\n\t                _this13._emitLine(\"context.setVariable(\\\"\" + alias + \"\\\", \" + id + \");\");\n\t            }\n\t        });\n\t    };\n\t    _proto.compileBlock = function compileBlock(node) {\n\t        var id = this._tmpid();\n\t        // If we are executing outside a block (creating a top-level\n\t        // block), we really don't want to execute its code because it\n\t        // will execute twice: once when the child template runs and\n\t        // again when the parent template runs. Note that blocks\n\t        // within blocks will *always* execute immediately *and*\n\t        // wherever else they are invoked (like used in a parent\n\t        // template). This may have behavioral differences from jinja\n\t        // because blocks can have side effects, but it seems like a\n\t        // waste of performance to always execute huge top-level\n\t        // blocks twice\n\t        if (!this.inBlock) {\n\t            this._emit('(parentTemplate ? function(e, c, f, r, cb) { cb(\"\"); } : ');\n\t        }\n\t        this._emit(\"context.getBlock(\\\"\" + node.name.value + \"\\\")\");\n\t        if (!this.inBlock) {\n\t            this._emit(')');\n\t        }\n\t        this._emitLine('(env, context, frame, runtime, ' + this._makeCallback(id));\n\t        this._emitLine(this.buffer + \" += \" + id + \";\");\n\t        this._addScopeLevel();\n\t    };\n\t    _proto.compileSuper = function compileSuper(node, frame) {\n\t        var name = node.blockName.value;\n\t        var id = node.symbol.value;\n\t        var cb = this._makeCallback(id);\n\t        this._emitLine(\"context.getSuper(env, \\\"\" + name + \"\\\", b_\" + name + \", frame, runtime, \" + cb);\n\t        this._emitLine(id + \" = runtime.markSafe(\" + id + \");\");\n\t        this._addScopeLevel();\n\t        frame.set(id, id);\n\t    };\n\t    _proto.compileExtends = function compileExtends(node, frame) {\n\t        var k = this._tmpid();\n\t        var parentTemplateId = this._compileGetTemplate(node, frame, true, false);\n\t        // extends is a dynamic tag and can occur within a block like\n\t        // `if`, so if this happens we need to capture the parent\n\t        // template in the top-level scope\n\t        this._emitLine(\"parentTemplate = \" + parentTemplateId);\n\t        this._emitLine(\"for(var \" + k + \" in parentTemplate.blocks) {\");\n\t        this._emitLine(\"context.addBlock(\" + k + \", parentTemplate.blocks[\" + k + \"]);\");\n\t        this._emitLine('}');\n\t        this._addScopeLevel();\n\t    };\n\t    _proto.compileInclude = function compileInclude(node, frame) {\n\t        this._emitLine('var tasks = [];');\n\t        this._emitLine('tasks.push(');\n\t        this._emitLine('function(callback) {');\n\t        var id = this._compileGetTemplate(node, frame, false, node.ignoreMissing);\n\t        this._emitLine(\"callback(null,\" + id + \");});\");\n\t        this._emitLine('});');\n\t        var id2 = this._tmpid();\n\t        this._emitLine('tasks.push(');\n\t        this._emitLine('function(template, callback){');\n\t        this._emitLine('template.render(context.getVariables(), frame, ' + this._makeCallback(id2));\n\t        this._emitLine('callback(null,' + id2 + ');});');\n\t        this._emitLine('});');\n\t        this._emitLine('tasks.push(');\n\t        this._emitLine('function(result, callback){');\n\t        this._emitLine(this.buffer + \" += result;\");\n\t        this._emitLine('callback(null);');\n\t        this._emitLine('});');\n\t        this._emitLine('env.waterfall(tasks, function(){');\n\t        this._addScopeLevel();\n\t    };\n\t    _proto.compileTemplateData = function compileTemplateData(node, frame) {\n\t        this.compileLiteral(node, frame);\n\t    };\n\t    _proto.compileCapture = function compileCapture(node, frame) {\n\t        var _this14 = this;\n\t        // we need to temporarily override the current buffer id as 'output'\n\t        // so the set block writes to the capture output instead of the buffer\n\t        var buffer = this.buffer;\n\t        this.buffer = 'output';\n\t        this._emitLine('(function() {');\n\t        this._emitLine('var output = \"\";');\n\t        this._withScopedSyntax(function() {\n\t            _this14.compile(node.body, frame);\n\t        });\n\t        this._emitLine('return output;');\n\t        this._emitLine('})()');\n\t        // and of course, revert back to the old buffer id\n\t        this.buffer = buffer;\n\t    };\n\t    _proto.compileOutput = function compileOutput(node, frame) {\n\t        var _this15 = this;\n\t        var children = node.children;\n\t        children.forEach(function(child) {\n\t            // TemplateData is a special case because it is never\n\t            // autoescaped, so simply output it for optimization\n\t            if (child instanceof nodes$1.TemplateData) {\n\t                if (child.value) {\n\t                    _this15._emit(_this15.buffer + \" += \");\n\t                    _this15.compileLiteral(child, frame);\n\t                    _this15._emitLine(';');\n\t                }\n\t            } else {\n\t                _this15._emit(_this15.buffer + \" += runtime.suppressValue(\");\n\t                if (_this15.throwOnUndefined) {\n\t                    _this15._emit('runtime.ensureDefined(');\n\t                }\n\t                _this15.compile(child, frame);\n\t                if (_this15.throwOnUndefined) {\n\t                    _this15._emit(\",\" + node.lineno + \",\" + node.colno + \")\");\n\t                }\n\t                _this15._emit(', env.opts.autoescape);\\n');\n\t            }\n\t        });\n\t    };\n\t    _proto.compileRoot = function compileRoot(node, frame) {\n\t        var _this16 = this;\n\t        if (frame) {\n\t            this.fail('compileRoot: root node can\\'t have frame');\n\t        }\n\t        frame = new Frame$1();\n\t        this._emitFuncBegin(node, 'root');\n\t        this._emitLine('var parentTemplate = null;');\n\t        this._compileChildren(node, frame);\n\t        this._emitLine('if(parentTemplate) {');\n\t        this._emitLine('parentTemplate.rootRenderFunc(env, context, frame, runtime, cb);');\n\t        this._emitLine('} else {');\n\t        this._emitLine(\"cb(null, \" + this.buffer + \");\");\n\t        this._emitLine('}');\n\t        this._emitFuncEnd(true);\n\t        this.inBlock = true;\n\t        var blockNames = [];\n\t        var blocks = node.findAll(nodes$1.Block);\n\t        blocks.forEach(function(block, i) {\n\t            var name = block.name.value;\n\t            if (blockNames.indexOf(name) !== -1) {\n\t                throw new Error(\"Block \\\"\" + name + \"\\\" defined more than once.\");\n\t            }\n\t            blockNames.push(name);\n\t            _this16._emitFuncBegin(block, \"b_\" + name);\n\t            var tmpFrame = new Frame$1();\n\t            _this16._emitLine('var frame = frame.push(true);');\n\t            _this16.compile(block.body, tmpFrame);\n\t            _this16._emitFuncEnd();\n\t        });\n\t        this._emitLine('return {');\n\t        blocks.forEach(function(block, i) {\n\t            var blockName = \"b_\" + block.name.value;\n\t            _this16._emitLine(blockName + \": \" + blockName + \",\");\n\t        });\n\t        this._emitLine('root: root\\n};');\n\t    };\n\t    _proto.compile = function compile(node, frame) {\n\t        var _compile = this['compile' + node.typename];\n\t        if (_compile) {\n\t            _compile.call(this, node, frame);\n\t        } else {\n\t            this.fail(\"compile: Cannot compile node: \" + node.typename, node.lineno, node.colno);\n\t        }\n\t    };\n\t    _proto.getCode = function getCode() {\n\t        return this.codebuf.join('');\n\t    };\n\t    return Compiler;\n\t}(Obj$1);\n\tvar compiler$3 = {\n\t    compile: function compile(src, asyncFilters, extensions, name, opts) {\n\t        if (opts === void 0) {\n\t            opts = {};\n\t        }\n\t        var c = new Compiler(name, opts.throwOnUndefined);\n\t        // Run the extension preprocessors against the source.\n\t        var preprocessors = (extensions || []).map(function(ext) {\n\t            return ext.preprocess;\n\t        }).filter(function(f) {\n\t            return !!f;\n\t        });\n\t        var processedSrc = preprocessors.reduce(function(s, processor) {\n\t            return processor(s);\n\t        }, src);\n\t        c.compile(transformer.transform(parser$1.parse(processedSrc, extensions, opts), asyncFilters, name));\n\t        return c.getCode();\n\t    },\n\t    Compiler: Compiler\n\t};\n\n\tvar filters$1 = {exports: {}};\n\n\tvar lib$3 = libExports;\n\tvar r = runtime$1;\n\tvar _exports = filters$1.exports = {};\n\tfunction normalize$2(value, defaultValue) {\n\t    if (value === null || value === undefined || value === false) {\n\t        return defaultValue;\n\t    }\n\t    return value;\n\t}\n\t_exports.abs = Math.abs;\n\tfunction isNaN$1(num) {\n\t    return num !== num; // eslint-disable-line no-self-compare\n\t}\n\tfunction batch(arr, linecount, fillWith) {\n\t    var i;\n\t    var res = [];\n\t    var tmp = [];\n\t    for(i = 0; i < arr.length; i++){\n\t        if (i % linecount === 0 && tmp.length) {\n\t            res.push(tmp);\n\t            tmp = [];\n\t        }\n\t        tmp.push(arr[i]);\n\t    }\n\t    if (tmp.length) {\n\t        if (fillWith) {\n\t            for(i = tmp.length; i < linecount; i++){\n\t                tmp.push(fillWith);\n\t            }\n\t        }\n\t        res.push(tmp);\n\t    }\n\t    return res;\n\t}\n\t_exports.batch = batch;\n\tfunction capitalize(str) {\n\t    str = normalize$2(str, '');\n\t    var ret = str.toLowerCase();\n\t    return r.copySafeness(str, ret.charAt(0).toUpperCase() + ret.slice(1));\n\t}\n\t_exports.capitalize = capitalize;\n\tfunction center(str, width) {\n\t    str = normalize$2(str, '');\n\t    width = width || 80;\n\t    if (str.length >= width) {\n\t        return str;\n\t    }\n\t    var spaces = width - str.length;\n\t    var pre = lib$3.repeat(' ', spaces / 2 - spaces % 2);\n\t    var post = lib$3.repeat(' ', spaces / 2);\n\t    return r.copySafeness(str, pre + str + post);\n\t}\n\t_exports.center = center;\n\tfunction default_(val, def, bool) {\n\t    if (bool) {\n\t        return val || def;\n\t    } else {\n\t        return val !== undefined ? val : def;\n\t    }\n\t}\n\t// TODO: it is confusing to export something called 'default'\n\t_exports['default'] = default_; // eslint-disable-line dot-notation\n\tfunction dictsort(val, caseSensitive, by) {\n\t    if (!lib$3.isObject(val)) {\n\t        throw new lib$3.TemplateError('dictsort filter: val must be an object');\n\t    }\n\t    var array = [];\n\t    // deliberately include properties from the object's prototype\n\t    for(var k in val){\n\t        // eslint-disable-line guard-for-in, no-restricted-syntax\n\t        array.push([\n\t            k,\n\t            val[k]\n\t        ]);\n\t    }\n\t    var si;\n\t    if (by === undefined || by === 'key') {\n\t        si = 0;\n\t    } else if (by === 'value') {\n\t        si = 1;\n\t    } else {\n\t        throw new lib$3.TemplateError('dictsort filter: You can only sort by either key or value');\n\t    }\n\t    array.sort(function(t1, t2) {\n\t        var a = t1[si];\n\t        var b = t2[si];\n\t        if (!caseSensitive) {\n\t            if (lib$3.isString(a)) {\n\t                a = a.toUpperCase();\n\t            }\n\t            if (lib$3.isString(b)) {\n\t                b = b.toUpperCase();\n\t            }\n\t        }\n\t        return a > b ? 1 : a === b ? 0 : -1; // eslint-disable-line no-nested-ternary\n\t    });\n\t    return array;\n\t}\n\t_exports.dictsort = dictsort;\n\tfunction dump(obj, spaces) {\n\t    return JSON.stringify(obj, null, spaces);\n\t}\n\t_exports.dump = dump;\n\tfunction escape$1(str) {\n\t    if (str instanceof r.SafeString) {\n\t        return str;\n\t    }\n\t    str = str === null || str === undefined ? '' : str;\n\t    return r.markSafe(lib$3.escape(str.toString()));\n\t}\n\t_exports.escape = escape$1;\n\tfunction safe(str) {\n\t    if (str instanceof r.SafeString) {\n\t        return str;\n\t    }\n\t    str = str === null || str === undefined ? '' : str;\n\t    return r.markSafe(str.toString());\n\t}\n\t_exports.safe = safe;\n\tfunction first(arr) {\n\t    return arr[0];\n\t}\n\t_exports.first = first;\n\tfunction forceescape(str) {\n\t    str = str === null || str === undefined ? '' : str;\n\t    return r.markSafe(lib$3.escape(str.toString()));\n\t}\n\t_exports.forceescape = forceescape;\n\tfunction groupby(arr, attr) {\n\t    return lib$3.groupBy(arr, attr, this.env.opts.throwOnUndefined);\n\t}\n\t_exports.groupby = groupby;\n\tfunction indent(str, width, indentfirst) {\n\t    str = normalize$2(str, '');\n\t    if (str === '') {\n\t        return '';\n\t    }\n\t    width = width || 4;\n\t    // let res = '';\n\t    var lines = str.split('\\n');\n\t    var sp = lib$3.repeat(' ', width);\n\t    var res = lines.map(function(l, i) {\n\t        return i === 0 && !indentfirst ? l : \"\" + sp + l;\n\t    }).join('\\n');\n\t    return r.copySafeness(str, res);\n\t}\n\t_exports.indent = indent;\n\tfunction join$1(arr, del, attr) {\n\t    del = del || '';\n\t    if (attr) {\n\t        arr = lib$3.map(arr, function(v) {\n\t            return v[attr];\n\t        });\n\t    }\n\t    return arr.join(del);\n\t}\n\t_exports.join = join$1;\n\tfunction last(arr) {\n\t    return arr[arr.length - 1];\n\t}\n\t_exports.last = last;\n\tfunction lengthFilter(val) {\n\t    var value = normalize$2(val, '');\n\t    if (value !== undefined) {\n\t        if (typeof Map === 'function' && value instanceof Map || typeof Set === 'function' && value instanceof Set) {\n\t            // ECMAScript 2015 Maps and Sets\n\t            return value.size;\n\t        }\n\t        if (lib$3.isObject(value) && !(value instanceof r.SafeString)) {\n\t            // Objects (besides SafeStrings), non-primative Arrays\n\t            return lib$3.keys(value).length;\n\t        }\n\t        return value.length;\n\t    }\n\t    return 0;\n\t}\n\t_exports.length = lengthFilter;\n\tfunction list$1(val) {\n\t    if (lib$3.isString(val)) {\n\t        return val.split('');\n\t    } else if (lib$3.isObject(val)) {\n\t        return lib$3._entries(val || {}).map(function(_ref) {\n\t            var key = _ref[0], value = _ref[1];\n\t            return {\n\t                key: key,\n\t                value: value\n\t            };\n\t        });\n\t    } else if (lib$3.isArray(val)) {\n\t        return val;\n\t    } else {\n\t        throw new lib$3.TemplateError('list filter: type not iterable');\n\t    }\n\t}\n\t_exports.list = list$1;\n\tfunction lower(str) {\n\t    str = normalize$2(str, '');\n\t    return str.toLowerCase();\n\t}\n\t_exports.lower = lower;\n\tfunction nl2br(str) {\n\t    if (str === null || str === undefined) {\n\t        return '';\n\t    }\n\t    return r.copySafeness(str, str.replace(/\\r\\n|\\n/g, '<br />\\n'));\n\t}\n\t_exports.nl2br = nl2br;\n\tfunction random(arr) {\n\t    return arr[Math.floor(Math.random() * arr.length)];\n\t}\n\t_exports.random = random;\n\t/**\n\t * Construct select or reject filter\n\t *\n\t * @param {boolean} expectedTestResult\n\t * @returns {function(array, string, *): array}\n\t */ function getSelectOrReject(expectedTestResult) {\n\t    function filter(arr, testName, secondArg) {\n\t        if (testName === void 0) {\n\t            testName = 'truthy';\n\t        }\n\t        var context = this;\n\t        var test = context.env.getTest(testName);\n\t        return lib$3.toArray(arr).filter(function examineTestResult(item) {\n\t            return test.call(context, item, secondArg) === expectedTestResult;\n\t        });\n\t    }\n\t    return filter;\n\t}\n\t_exports.reject = getSelectOrReject(false);\n\tfunction rejectattr(arr, attr) {\n\t    return arr.filter(function(item) {\n\t        return !item[attr];\n\t    });\n\t}\n\t_exports.rejectattr = rejectattr;\n\t_exports.select = getSelectOrReject(true);\n\tfunction selectattr(arr, attr) {\n\t    return arr.filter(function(item) {\n\t        return !!item[attr];\n\t    });\n\t}\n\t_exports.selectattr = selectattr;\n\tfunction replace$1(str, old, new_, maxCount) {\n\t    var originalStr = str;\n\t    if (old instanceof RegExp) {\n\t        return str.replace(old, new_);\n\t    }\n\t    if (typeof maxCount === 'undefined') {\n\t        maxCount = -1;\n\t    }\n\t    var res = ''; // Output\n\t    // Cast Numbers in the search term to string\n\t    if (typeof old === 'number') {\n\t        old = '' + old;\n\t    } else if (typeof old !== 'string') {\n\t        // If it is something other than number or string,\n\t        // return the original string\n\t        return str;\n\t    }\n\t    // Cast numbers in the replacement to string\n\t    if (typeof str === 'number') {\n\t        str = '' + str;\n\t    }\n\t    // If by now, we don't have a string, throw it back\n\t    if (typeof str !== 'string' && !(str instanceof r.SafeString)) {\n\t        return str;\n\t    }\n\t    // ShortCircuits\n\t    if (old === '') {\n\t        // Mimic the python behaviour: empty string is replaced\n\t        // by replacement e.g. \"abc\"|replace(\"\", \".\") -> .a.b.c.\n\t        res = new_ + str.split('').join(new_) + new_;\n\t        return r.copySafeness(str, res);\n\t    }\n\t    var nextIndex = str.indexOf(old);\n\t    // if # of replacements to perform is 0, or the string to does\n\t    // not contain the old value, return the string\n\t    if (maxCount === 0 || nextIndex === -1) {\n\t        return str;\n\t    }\n\t    var pos = 0;\n\t    var count = 0; // # of replacements made\n\t    while(nextIndex > -1 && (maxCount === -1 || count < maxCount)){\n\t        // Grab the next chunk of src string and add it with the\n\t        // replacement, to the result\n\t        res += str.substring(pos, nextIndex) + new_;\n\t        // Increment our pointer in the src string\n\t        pos = nextIndex + old.length;\n\t        count++;\n\t        // See if there are any more replacements to be made\n\t        nextIndex = str.indexOf(old, pos);\n\t    }\n\t    // We've either reached the end, or done the max # of\n\t    // replacements, tack on any remaining string\n\t    if (pos < str.length) {\n\t        res += str.substring(pos);\n\t    }\n\t    return r.copySafeness(originalStr, res);\n\t}\n\t_exports.replace = replace$1;\n\tfunction reverse(val) {\n\t    var arr;\n\t    if (lib$3.isString(val)) {\n\t        arr = list$1(val);\n\t    } else {\n\t        // Copy it\n\t        arr = lib$3.map(val, function(v) {\n\t            return v;\n\t        });\n\t    }\n\t    arr.reverse();\n\t    if (lib$3.isString(val)) {\n\t        return r.copySafeness(val, arr.join(''));\n\t    }\n\t    return arr;\n\t}\n\t_exports.reverse = reverse;\n\tfunction round(val, precision, method) {\n\t    precision = precision || 0;\n\t    var factor = Math.pow(10, precision);\n\t    var rounder;\n\t    if (method === 'ceil') {\n\t        rounder = Math.ceil;\n\t    } else if (method === 'floor') {\n\t        rounder = Math.floor;\n\t    } else {\n\t        rounder = Math.round;\n\t    }\n\t    return rounder(val * factor) / factor;\n\t}\n\t_exports.round = round;\n\tfunction slice(arr, slices, fillWith) {\n\t    var sliceLength = Math.floor(arr.length / slices);\n\t    var extra = arr.length % slices;\n\t    var res = [];\n\t    var offset = 0;\n\t    for(var i = 0; i < slices; i++){\n\t        var start = offset + i * sliceLength;\n\t        if (i < extra) {\n\t            offset++;\n\t        }\n\t        var end = offset + (i + 1) * sliceLength;\n\t        var currSlice = arr.slice(start, end);\n\t        if (fillWith && i >= extra) {\n\t            currSlice.push(fillWith);\n\t        }\n\t        res.push(currSlice);\n\t    }\n\t    return res;\n\t}\n\t_exports.slice = slice;\n\tfunction sum(arr, attr, start) {\n\t    if (start === void 0) {\n\t        start = 0;\n\t    }\n\t    if (attr) {\n\t        arr = lib$3.map(arr, function(v) {\n\t            return v[attr];\n\t        });\n\t    }\n\t    return start + arr.reduce(function(a, b) {\n\t        return a + b;\n\t    }, 0);\n\t}\n\t_exports.sum = sum;\n\t_exports.sort = r.makeMacro([\n\t    'value',\n\t    'reverse',\n\t    'case_sensitive',\n\t    'attribute'\n\t], [], function sortFilter(arr, reversed, caseSens, attr) {\n\t    var _this = this;\n\t    // Copy it\n\t    var array = lib$3.map(arr, function(v) {\n\t        return v;\n\t    });\n\t    var getAttribute = lib$3.getAttrGetter(attr);\n\t    array.sort(function(a, b) {\n\t        var x = attr ? getAttribute(a) : a;\n\t        var y = attr ? getAttribute(b) : b;\n\t        if (_this.env.opts.throwOnUndefined && attr && (x === undefined || y === undefined)) {\n\t            throw new TypeError(\"sort: attribute \\\"\" + attr + \"\\\" resolved to undefined\");\n\t        }\n\t        if (!caseSens && lib$3.isString(x) && lib$3.isString(y)) {\n\t            x = x.toLowerCase();\n\t            y = y.toLowerCase();\n\t        }\n\t        if (x < y) {\n\t            return reversed ? 1 : -1;\n\t        } else if (x > y) {\n\t            return reversed ? -1 : 1;\n\t        } else {\n\t            return 0;\n\t        }\n\t    });\n\t    return array;\n\t});\n\tfunction string(obj) {\n\t    return r.copySafeness(obj, obj);\n\t}\n\t_exports.string = string;\n\tfunction striptags(input, preserveLinebreaks) {\n\t    input = normalize$2(input, '');\n\t    var tags = /<\\/?([a-z][a-z0-9]*)\\b[^>]*>|<!--[\\s\\S]*?-->/gi;\n\t    var trimmedInput = trim(input.replace(tags, ''));\n\t    var res = '';\n\t    if (preserveLinebreaks) {\n\t        res = trimmedInput.replace(/^ +| +$/gm, '') // remove leading and trailing spaces\n\t        .replace(/ +/g, ' ') // squash adjacent spaces\n\t        .replace(/(\\r\\n)/g, '\\n') // normalize linebreaks (CRLF -> LF)\n\t        .replace(/\\n\\n\\n+/g, '\\n\\n'); // squash abnormal adjacent linebreaks\n\t    } else {\n\t        res = trimmedInput.replace(/\\s+/gi, ' ');\n\t    }\n\t    return r.copySafeness(input, res);\n\t}\n\t_exports.striptags = striptags;\n\tfunction title(str) {\n\t    str = normalize$2(str, '');\n\t    var words = str.split(' ').map(function(word) {\n\t        return capitalize(word);\n\t    });\n\t    return r.copySafeness(str, words.join(' '));\n\t}\n\t_exports.title = title;\n\tfunction trim(str) {\n\t    return r.copySafeness(str, str.replace(/^\\s*|\\s*$/g, ''));\n\t}\n\t_exports.trim = trim;\n\tfunction truncate(input, length, killwords, end) {\n\t    var orig = input;\n\t    input = normalize$2(input, '');\n\t    length = length || 255;\n\t    if (input.length <= length) {\n\t        return input;\n\t    }\n\t    if (killwords) {\n\t        input = input.substring(0, length);\n\t    } else {\n\t        var idx = input.lastIndexOf(' ', length);\n\t        if (idx === -1) {\n\t            idx = length;\n\t        }\n\t        input = input.substring(0, idx);\n\t    }\n\t    input += end !== undefined && end !== null ? end : '...';\n\t    return r.copySafeness(orig, input);\n\t}\n\t_exports.truncate = truncate;\n\tfunction upper(str) {\n\t    str = normalize$2(str, '');\n\t    return str.toUpperCase();\n\t}\n\t_exports.upper = upper;\n\tfunction urlencode(obj) {\n\t    var enc = encodeURIComponent;\n\t    if (lib$3.isString(obj)) {\n\t        return enc(obj);\n\t    } else {\n\t        var keyvals = lib$3.isArray(obj) ? obj : lib$3._entries(obj);\n\t        return keyvals.map(function(_ref2) {\n\t            var k = _ref2[0], v = _ref2[1];\n\t            return enc(k) + \"=\" + enc(v);\n\t        }).join('&');\n\t    }\n\t}\n\t_exports.urlencode = urlencode;\n\t// For the jinja regexp, see\n\t// https://github.com/mitsuhiko/jinja2/blob/f15b814dcba6aa12bc74d1f7d0c881d55f7126be/jinja2/utils.py#L20-L23\n\tvar puncRe = /^(?:\\(|<|&lt;)?(.*?)(?:\\.|,|\\)|\\n|&gt;)?$/;\n\t// from http://blog.gerv.net/2011/05/html5_email_address_regexp/\n\tvar emailRe = /^[\\w.!#$%&'*+\\-\\/=?\\^`{|}~]+@[a-z\\d\\-]+(\\.[a-z\\d\\-]+)+$/i;\n\tvar httpHttpsRe = /^https?:\\/\\/.*$/;\n\tvar wwwRe = /^www\\./;\n\tvar tldRe = /\\.(?:org|net|com)(?:\\:|\\/|$)/;\n\tfunction urlize(str, length, nofollow) {\n\t    if (isNaN$1(length)) {\n\t        length = Infinity;\n\t    }\n\t    var noFollowAttr = nofollow === true ? ' rel=\"nofollow\"' : '';\n\t    var words = str.split(/(\\s+)/).filter(function(word) {\n\t        // If the word has no length, bail. This can happen for str with\n\t        // trailing whitespace.\n\t        return word && word.length;\n\t    }).map(function(word) {\n\t        var matches = word.match(puncRe);\n\t        var possibleUrl = matches ? matches[1] : word;\n\t        var shortUrl = possibleUrl.substr(0, length);\n\t        // url that starts with http or https\n\t        if (httpHttpsRe.test(possibleUrl)) {\n\t            return \"<a href=\\\"\" + possibleUrl + \"\\\"\" + noFollowAttr + \">\" + shortUrl + \"</a>\";\n\t        }\n\t        // url that starts with www.\n\t        if (wwwRe.test(possibleUrl)) {\n\t            return \"<a href=\\\"http://\" + possibleUrl + \"\\\"\" + noFollowAttr + \">\" + shortUrl + \"</a>\";\n\t        }\n\t        // an email address of the form username@domain.tld\n\t        if (emailRe.test(possibleUrl)) {\n\t            return \"<a href=\\\"mailto:\" + possibleUrl + \"\\\">\" + possibleUrl + \"</a>\";\n\t        }\n\t        // url that ends in .com, .org or .net that is not an email address\n\t        if (tldRe.test(possibleUrl)) {\n\t            return \"<a href=\\\"http://\" + possibleUrl + \"\\\"\" + noFollowAttr + \">\" + shortUrl + \"</a>\";\n\t        }\n\t        return word;\n\t    });\n\t    return words.join('');\n\t}\n\t_exports.urlize = urlize;\n\tfunction wordcount(str) {\n\t    str = normalize$2(str, '');\n\t    var words = str ? str.match(/\\w+/g) : null;\n\t    return words ? words.length : null;\n\t}\n\t_exports.wordcount = wordcount;\n\tfunction float(val, def) {\n\t    var res = parseFloat(val);\n\t    return isNaN$1(res) ? def : res;\n\t}\n\t_exports.float = float;\n\tvar intFilter = r.makeMacro([\n\t    'value',\n\t    'default',\n\t    'base'\n\t], [], function doInt(value, defaultValue, base) {\n\t    if (base === void 0) {\n\t        base = 10;\n\t    }\n\t    var res = parseInt(value, base);\n\t    return isNaN$1(res) ? defaultValue : res;\n\t});\n\t_exports.int = intFilter;\n\t// Aliases\n\t_exports.d = _exports.default;\n\t_exports.e = _exports.escape;\n\tvar filtersExports = filters$1.exports;\n\n\tvar _polyfillNode_fs = {};\n\n\tvar _polyfillNode_fs$1 = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tdefault: _polyfillNode_fs\n\t});\n\n\tvar require$$0 = /*@__PURE__*/getAugmentedNamespace(_polyfillNode_fs$1);\n\n\t// Copyright Joyent, Inc. and other Node contributors.\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a\n\t// copy of this software and associated documentation files (the\n\t// \"Software\"), to deal in the Software without restriction, including\n\t// without limitation the rights to use, copy, modify, merge, publish,\n\t// distribute, sublicense, and/or sell copies of the Software, and to permit\n\t// persons to whom the Software is furnished to do so, subject to the\n\t// following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included\n\t// in all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\t// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n\t// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n\t// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n\t// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n\t// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\t// resolves . and .. elements in a path array with directory names there\n\t// must be no slashes, empty elements, or device names (c:\\) in the array\n\t// (so also no leading and trailing slashes - it does not distinguish\n\t// relative and absolute paths)\n\tfunction normalizeArray(parts, allowAboveRoot) {\n\t  // if the path tries to go above the root, `up` ends up > 0\n\t  var up = 0;\n\t  for (var i = parts.length - 1; i >= 0; i--) {\n\t    var last = parts[i];\n\t    if (last === '.') {\n\t      parts.splice(i, 1);\n\t    } else if (last === '..') {\n\t      parts.splice(i, 1);\n\t      up++;\n\t    } else if (up) {\n\t      parts.splice(i, 1);\n\t      up--;\n\t    }\n\t  }\n\n\t  // if the path is allowed to go above the root, restore leading ..s\n\t  if (allowAboveRoot) {\n\t    for (; up--; up) {\n\t      parts.unshift('..');\n\t    }\n\t  }\n\n\t  return parts;\n\t}\n\n\t// Split a filename into [root, dir, basename, ext], unix version\n\t// 'root' is just a slash, or nothing.\n\tvar splitPathRe =\n\t    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\n\tvar splitPath = function(filename) {\n\t  return splitPathRe.exec(filename).slice(1);\n\t};\n\n\t// path.resolve([from ...], to)\n\t// posix version\n\tfunction resolve() {\n\t  var resolvedPath = '',\n\t      resolvedAbsolute = false;\n\n\t  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n\t    var path = (i >= 0) ? arguments[i] : '/';\n\n\t    // Skip empty and invalid entries\n\t    if (typeof path !== 'string') {\n\t      throw new TypeError('Arguments to path.resolve must be strings');\n\t    } else if (!path) {\n\t      continue;\n\t    }\n\n\t    resolvedPath = path + '/' + resolvedPath;\n\t    resolvedAbsolute = path.charAt(0) === '/';\n\t  }\n\n\t  // At this point the path should be resolved to a full absolute path, but\n\t  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n\t  // Normalize the path\n\t  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n\t    return !!p;\n\t  }), !resolvedAbsolute).join('/');\n\n\t  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n\t}\n\t// path.normalize(path)\n\t// posix version\n\tfunction normalize$1(path) {\n\t  var isPathAbsolute = isAbsolute(path),\n\t      trailingSlash = substr(path, -1) === '/';\n\n\t  // Normalize the path\n\t  path = normalizeArray(filter(path.split('/'), function(p) {\n\t    return !!p;\n\t  }), !isPathAbsolute).join('/');\n\n\t  if (!path && !isPathAbsolute) {\n\t    path = '.';\n\t  }\n\t  if (path && trailingSlash) {\n\t    path += '/';\n\t  }\n\n\t  return (isPathAbsolute ? '/' : '') + path;\n\t}\n\t// posix version\n\tfunction isAbsolute(path) {\n\t  return path.charAt(0) === '/';\n\t}\n\n\t// posix version\n\tfunction join() {\n\t  var paths = Array.prototype.slice.call(arguments, 0);\n\t  return normalize$1(filter(paths, function(p, index) {\n\t    if (typeof p !== 'string') {\n\t      throw new TypeError('Arguments to path.join must be strings');\n\t    }\n\t    return p;\n\t  }).join('/'));\n\t}\n\n\n\t// path.relative(from, to)\n\t// posix version\n\tfunction relative(from, to) {\n\t  from = resolve(from).substr(1);\n\t  to = resolve(to).substr(1);\n\n\t  function trim(arr) {\n\t    var start = 0;\n\t    for (; start < arr.length; start++) {\n\t      if (arr[start] !== '') break;\n\t    }\n\n\t    var end = arr.length - 1;\n\t    for (; end >= 0; end--) {\n\t      if (arr[end] !== '') break;\n\t    }\n\n\t    if (start > end) return [];\n\t    return arr.slice(start, end - start + 1);\n\t  }\n\n\t  var fromParts = trim(from.split('/'));\n\t  var toParts = trim(to.split('/'));\n\n\t  var length = Math.min(fromParts.length, toParts.length);\n\t  var samePartsLength = length;\n\t  for (var i = 0; i < length; i++) {\n\t    if (fromParts[i] !== toParts[i]) {\n\t      samePartsLength = i;\n\t      break;\n\t    }\n\t  }\n\n\t  var outputParts = [];\n\t  for (var i = samePartsLength; i < fromParts.length; i++) {\n\t    outputParts.push('..');\n\t  }\n\n\t  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n\t  return outputParts.join('/');\n\t}\n\n\tvar sep = '/';\n\tvar delimiter$1 = ':';\n\n\tfunction dirname(path) {\n\t  var result = splitPath(path),\n\t      root = result[0],\n\t      dir = result[1];\n\n\t  if (!root && !dir) {\n\t    // No dirname whatsoever\n\t    return '.';\n\t  }\n\n\t  if (dir) {\n\t    // It has a dirname, strip trailing slash\n\t    dir = dir.substr(0, dir.length - 1);\n\t  }\n\n\t  return root + dir;\n\t}\n\n\tfunction basename(path, ext) {\n\t  var f = splitPath(path)[2];\n\t  // TODO: make this comparison case-insensitive on windows?\n\t  if (ext && f.substr(-1 * ext.length) === ext) {\n\t    f = f.substr(0, f.length - ext.length);\n\t  }\n\t  return f;\n\t}\n\n\n\tfunction extname(path) {\n\t  return splitPath(path)[3];\n\t}\n\tvar _polyfillNode_path = {\n\t  extname: extname,\n\t  basename: basename,\n\t  dirname: dirname,\n\t  sep: sep,\n\t  delimiter: delimiter$1,\n\t  relative: relative,\n\t  join: join,\n\t  isAbsolute: isAbsolute,\n\t  normalize: normalize$1,\n\t  resolve: resolve\n\t};\n\tfunction filter (xs, f) {\n\t    if (xs.filter) return xs.filter(f);\n\t    var res = [];\n\t    for (var i = 0; i < xs.length; i++) {\n\t        if (f(xs[i], i, xs)) res.push(xs[i]);\n\t    }\n\t    return res;\n\t}\n\n\t// String.prototype.substr - negative index don't work in IE8\n\tvar substr = 'ab'.substr(-1) === 'b' ?\n\t    function (str, start, len) { return str.substr(start, len) } :\n\t    function (str, start, len) {\n\t        if (start < 0) start = str.length + start;\n\t        return str.substr(start, len);\n\t    }\n\t;\n\n\tvar _polyfillNode_path$1 = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tbasename: basename,\n\t\tdefault: _polyfillNode_path,\n\t\tdelimiter: delimiter$1,\n\t\tdirname: dirname,\n\t\textname: extname,\n\t\tisAbsolute: isAbsolute,\n\t\tjoin: join,\n\t\tnormalize: normalize$1,\n\t\trelative: relative,\n\t\tresolve: resolve,\n\t\tsep: sep\n\t});\n\n\tvar require$$1 = /*@__PURE__*/getAugmentedNamespace(_polyfillNode_path$1);\n\n\tfunction _inheritsLoose$3(subClass, superClass) {\n\t    subClass.prototype = Object.create(superClass.prototype);\n\t    subClass.prototype.constructor = subClass;\n\t    _setPrototypeOf$3(subClass, superClass);\n\t}\n\tfunction _setPrototypeOf$3(o, p) {\n\t    _setPrototypeOf$3 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n\t        o.__proto__ = p;\n\t        return o;\n\t    };\n\t    return _setPrototypeOf$3(o, p);\n\t}\n\tvar path$3 = require$$1;\n\tvar _require$4 = object, EmitterObj$1 = _require$4.EmitterObj;\n\tvar loader = /*#__PURE__*/ function(_EmitterObj) {\n\t    _inheritsLoose$3(Loader, _EmitterObj);\n\t    function Loader() {\n\t        return _EmitterObj.apply(this, arguments) || this;\n\t    }\n\t    var _proto = Loader.prototype;\n\t    _proto.resolve = function resolve(from, to) {\n\t        return path$3.resolve(path$3.dirname(from), to);\n\t    };\n\t    _proto.isRelative = function isRelative(filename) {\n\t        return filename.indexOf('./') === 0 || filename.indexOf('../') === 0;\n\t    };\n\t    return Loader;\n\t}(EmitterObj$1);\n\n\tfunction _inheritsLoose$2(subClass, superClass) {\n\t    subClass.prototype = Object.create(superClass.prototype);\n\t    subClass.prototype.constructor = subClass;\n\t    _setPrototypeOf$2(subClass, superClass);\n\t}\n\tfunction _setPrototypeOf$2(o, p) {\n\t    _setPrototypeOf$2 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n\t        o.__proto__ = p;\n\t        return o;\n\t    };\n\t    return _setPrototypeOf$2(o, p);\n\t}\n\tvar Loader$2 = loader;\n\tvar PrecompiledLoader$2 = /*#__PURE__*/ function(_Loader) {\n\t    _inheritsLoose$2(PrecompiledLoader, _Loader);\n\t    function PrecompiledLoader(compiledTemplates) {\n\t        var _this;\n\t        _this = _Loader.call(this) || this;\n\t        _this.precompiled = compiledTemplates || {};\n\t        return _this;\n\t    }\n\t    var _proto = PrecompiledLoader.prototype;\n\t    _proto.getSource = function getSource(name) {\n\t        if (this.precompiled[name]) {\n\t            return {\n\t                src: {\n\t                    type: 'code',\n\t                    obj: this.precompiled[name]\n\t                },\n\t                path: name\n\t            };\n\t        }\n\t        return null;\n\t    };\n\t    return PrecompiledLoader;\n\t}(Loader$2);\n\tvar precompiledLoader = {\n\t    PrecompiledLoader: PrecompiledLoader$2\n\t};\n\n\tfunction _inheritsLoose$1(subClass, superClass) {\n\t    subClass.prototype = Object.create(superClass.prototype);\n\t    subClass.prototype.constructor = subClass;\n\t    _setPrototypeOf$1(subClass, superClass);\n\t}\n\tfunction _setPrototypeOf$1(o, p) {\n\t    _setPrototypeOf$1 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n\t        o.__proto__ = p;\n\t        return o;\n\t    };\n\t    return _setPrototypeOf$1(o, p);\n\t}\n\tvar fs$1 = require$$0;\n\tvar path$2 = require$$1;\n\tvar Loader$1 = loader;\n\tvar _require$3 = precompiledLoader, PrecompiledLoader$1 = _require$3.PrecompiledLoader;\n\tvar chokidar;\n\tvar FileSystemLoader$1 = /*#__PURE__*/ function(_Loader) {\n\t    _inheritsLoose$1(FileSystemLoader, _Loader);\n\t    function FileSystemLoader(searchPaths, opts) {\n\t        var _this;\n\t        _this = _Loader.call(this) || this;\n\t        if (typeof opts === 'boolean') {\n\t            console.log('[nunjucks] Warning: you passed a boolean as the second ' + 'argument to FileSystemLoader, but it now takes an options ' + 'object. See http://mozilla.github.io/nunjucks/api.html#filesystemloader');\n\t        }\n\t        opts = opts || {};\n\t        _this.pathsToNames = {};\n\t        _this.noCache = !!opts.noCache;\n\t        if (searchPaths) {\n\t            searchPaths = Array.isArray(searchPaths) ? searchPaths : [\n\t                searchPaths\n\t            ];\n\t            // For windows, convert to forward slashes\n\t            _this.searchPaths = searchPaths.map(path$2.normalize);\n\t        } else {\n\t            _this.searchPaths = [\n\t                '.'\n\t            ];\n\t        }\n\t        if (opts.watch) {\n\t            // Watch all the templates in the paths and fire an event when\n\t            // they change\n\t            try {\n\t                chokidar = require('chokidar'); // eslint-disable-line global-require\n\t            } catch (e) {\n\t                throw new Error('watch requires chokidar to be installed');\n\t            }\n\t            var paths = _this.searchPaths.filter(fs$1.existsSync);\n\t            var watcher = chokidar.watch(paths);\n\t            watcher.on('all', function(event, fullname) {\n\t                fullname = path$2.resolve(fullname);\n\t                if (event === 'change' && fullname in _this.pathsToNames) {\n\t                    _this.emit('update', _this.pathsToNames[fullname], fullname);\n\t                }\n\t            });\n\t            watcher.on('error', function(error) {\n\t                console.log('Watcher error: ' + error);\n\t            });\n\t        }\n\t        return _this;\n\t    }\n\t    var _proto = FileSystemLoader.prototype;\n\t    _proto.getSource = function getSource(name) {\n\t        var fullpath = null;\n\t        var paths = this.searchPaths;\n\t        for(var i = 0; i < paths.length; i++){\n\t            var basePath = path$2.resolve(paths[i]);\n\t            var p = path$2.resolve(paths[i], name);\n\t            // Only allow the current directory and anything\n\t            // underneath it to be searched\n\t            if (p.indexOf(basePath) === 0 && fs$1.existsSync(p)) {\n\t                fullpath = p;\n\t                break;\n\t            }\n\t        }\n\t        if (!fullpath) {\n\t            return null;\n\t        }\n\t        this.pathsToNames[fullpath] = name;\n\t        var source = {\n\t            src: fs$1.readFileSync(fullpath, 'utf-8'),\n\t            path: fullpath,\n\t            noCache: this.noCache\n\t        };\n\t        this.emit('load', name, source);\n\t        return source;\n\t    };\n\t    return FileSystemLoader;\n\t}(Loader$1);\n\tvar NodeResolveLoader = /*#__PURE__*/ function(_Loader2) {\n\t    _inheritsLoose$1(NodeResolveLoader, _Loader2);\n\t    function NodeResolveLoader(opts) {\n\t        var _this2;\n\t        _this2 = _Loader2.call(this) || this;\n\t        opts = opts || {};\n\t        _this2.pathsToNames = {};\n\t        _this2.noCache = !!opts.noCache;\n\t        if (opts.watch) {\n\t            try {\n\t                chokidar = require('chokidar'); // eslint-disable-line global-require\n\t            } catch (e) {\n\t                throw new Error('watch requires chokidar to be installed');\n\t            }\n\t            _this2.watcher = chokidar.watch();\n\t            _this2.watcher.on('change', function(fullname) {\n\t                _this2.emit('update', _this2.pathsToNames[fullname], fullname);\n\t            });\n\t            _this2.watcher.on('error', function(error) {\n\t                console.log('Watcher error: ' + error);\n\t            });\n\t            _this2.on('load', function(name, source) {\n\t                _this2.watcher.add(source.path);\n\t            });\n\t        }\n\t        return _this2;\n\t    }\n\t    var _proto2 = NodeResolveLoader.prototype;\n\t    _proto2.getSource = function getSource(name) {\n\t        // Don't allow file-system traversal\n\t        if (/^\\.?\\.?(\\/|\\\\)/.test(name)) {\n\t            return null;\n\t        }\n\t        if (/^[A-Z]:/.test(name)) {\n\t            return null;\n\t        }\n\t        var fullpath;\n\t        try {\n\t            fullpath = require.resolve(name);\n\t        } catch (e) {\n\t            return null;\n\t        }\n\t        this.pathsToNames[fullpath] = name;\n\t        var source = {\n\t            src: fs$1.readFileSync(fullpath, 'utf-8'),\n\t            path: fullpath,\n\t            noCache: this.noCache\n\t        };\n\t        this.emit('load', name, source);\n\t        return source;\n\t    };\n\t    return NodeResolveLoader;\n\t}(Loader$1);\n\tvar nodeLoaders = {\n\t    FileSystemLoader: FileSystemLoader$1,\n\t    PrecompiledLoader: PrecompiledLoader$1,\n\t    NodeResolveLoader: NodeResolveLoader\n\t};\n\n\t// This file will automatically be rewired to web-loader.js when\n\t// building for the browser\n\tvar loaders$1 = nodeLoaders;\n\n\tvar tests$1 = {};\n\n\t(function(exports) {\n\t    var SafeString = runtime$1.SafeString;\n\t    /**\n\t\t * Returns `true` if the object is a function, otherwise `false`.\n\t\t * @param { any } value\n\t\t * @returns { boolean }\n\t\t */ function callable(value) {\n\t        return typeof value === 'function';\n\t    }\n\t    exports.callable = callable;\n\t    /**\n\t\t * Returns `true` if the object is strictly not `undefined`.\n\t\t * @param { any } value\n\t\t * @returns { boolean }\n\t\t */ function defined(value) {\n\t        return value !== undefined;\n\t    }\n\t    exports.defined = defined;\n\t    /**\n\t\t * Returns `true` if the operand (one) is divisble by the test's argument\n\t\t * (two).\n\t\t * @param { number } one\n\t\t * @param { number } two\n\t\t * @returns { boolean }\n\t\t */ function divisibleby(one, two) {\n\t        return one % two === 0;\n\t    }\n\t    exports.divisibleby = divisibleby;\n\t    /**\n\t\t * Returns true if the string has been escaped (i.e., is a SafeString).\n\t\t * @param { any } value\n\t\t * @returns { boolean }\n\t\t */ function escaped(value) {\n\t        return value instanceof SafeString;\n\t    }\n\t    exports.escaped = escaped;\n\t    /**\n\t\t * Returns `true` if the arguments are strictly equal.\n\t\t * @param { any } one\n\t\t * @param { any } two\n\t\t */ function equalto(one, two) {\n\t        return one === two;\n\t    }\n\t    exports.equalto = equalto;\n\t    // Aliases\n\t    exports.eq = exports.equalto;\n\t    exports.sameas = exports.equalto;\n\t    /**\n\t\t * Returns `true` if the value is evenly divisible by 2.\n\t\t * @param { number } value\n\t\t * @returns { boolean }\n\t\t */ function even(value) {\n\t        return value % 2 === 0;\n\t    }\n\t    exports.even = even;\n\t    /**\n\t\t * Returns `true` if the value is falsy - if I recall correctly, '', 0, false,\n\t\t * undefined, NaN or null. I don't know if we should stick to the default JS\n\t\t * behavior or attempt to replicate what Python believes should be falsy (i.e.,\n\t\t * empty arrays, empty dicts, not 0...).\n\t\t * @param { any } value\n\t\t * @returns { boolean }\n\t\t */ function falsy(value) {\n\t        return !value;\n\t    }\n\t    exports.falsy = falsy;\n\t    /**\n\t\t * Returns `true` if the operand (one) is greater or equal to the test's\n\t\t * argument (two).\n\t\t * @param { number } one\n\t\t * @param { number } two\n\t\t * @returns { boolean }\n\t\t */ function ge(one, two) {\n\t        return one >= two;\n\t    }\n\t    exports.ge = ge;\n\t    /**\n\t\t * Returns `true` if the operand (one) is greater than the test's argument\n\t\t * (two).\n\t\t * @param { number } one\n\t\t * @param { number } two\n\t\t * @returns { boolean }\n\t\t */ function greaterthan(one, two) {\n\t        return one > two;\n\t    }\n\t    exports.greaterthan = greaterthan;\n\t    // alias\n\t    exports.gt = exports.greaterthan;\n\t    /**\n\t\t * Returns `true` if the operand (one) is less than or equal to the test's\n\t\t * argument (two).\n\t\t * @param { number } one\n\t\t * @param { number } two\n\t\t * @returns { boolean }\n\t\t */ function le(one, two) {\n\t        return one <= two;\n\t    }\n\t    exports.le = le;\n\t    /**\n\t\t * Returns `true` if the operand (one) is less than the test's passed argument\n\t\t * (two).\n\t\t * @param { number } one\n\t\t * @param { number } two\n\t\t * @returns { boolean }\n\t\t */ function lessthan(one, two) {\n\t        return one < two;\n\t    }\n\t    exports.lessthan = lessthan;\n\t    // alias\n\t    exports.lt = exports.lessthan;\n\t    /**\n\t\t * Returns `true` if the string is lowercased.\n\t\t * @param { string } value\n\t\t * @returns { boolean }\n\t\t */ function lower(value) {\n\t        return value.toLowerCase() === value;\n\t    }\n\t    exports.lower = lower;\n\t    /**\n\t\t * Returns `true` if the operand (one) is less than or equal to the test's\n\t\t * argument (two).\n\t\t * @param { number } one\n\t\t * @param { number } two\n\t\t * @returns { boolean }\n\t\t */ function ne(one, two) {\n\t        return one !== two;\n\t    }\n\t    exports.ne = ne;\n\t    /**\n\t\t * Returns true if the value is strictly equal to `null`.\n\t\t * @param { any }\n\t\t * @returns { boolean }\n\t\t */ function nullTest(value) {\n\t        return value === null;\n\t    }\n\t    exports.null = nullTest;\n\t    /**\n\t\t * Returns true if value is a number.\n\t\t * @param { any }\n\t\t * @returns { boolean }\n\t\t */ function number(value) {\n\t        return typeof value === 'number';\n\t    }\n\t    exports.number = number;\n\t    /**\n\t\t * Returns `true` if the value is *not* evenly divisible by 2.\n\t\t * @param { number } value\n\t\t * @returns { boolean }\n\t\t */ function odd(value) {\n\t        return value % 2 === 1;\n\t    }\n\t    exports.odd = odd;\n\t    /**\n\t\t * Returns `true` if the value is a string, `false` if not.\n\t\t * @param { any } value\n\t\t * @returns { boolean }\n\t\t */ function string(value) {\n\t        return typeof value === 'string';\n\t    }\n\t    exports.string = string;\n\t    /**\n\t\t * Returns `true` if the value is not in the list of things considered falsy:\n\t\t * '', null, undefined, 0, NaN and false.\n\t\t * @param { any } value\n\t\t * @returns { boolean }\n\t\t */ function truthy(value) {\n\t        return !!value;\n\t    }\n\t    exports.truthy = truthy;\n\t    /**\n\t\t * Returns `true` if the value is undefined.\n\t\t * @param { any } value\n\t\t * @returns { boolean }\n\t\t */ function undefinedTest(value) {\n\t        return value === undefined;\n\t    }\n\t    exports.undefined = undefinedTest;\n\t    /**\n\t\t * Returns `true` if the string is uppercased.\n\t\t * @param { string } value\n\t\t * @returns { boolean }\n\t\t */ function upper(value) {\n\t        return value.toUpperCase() === value;\n\t    }\n\t    exports.upper = upper;\n\t    /**\n\t\t * If ES6 features are available, returns `true` if the value implements the\n\t\t * `Symbol.iterator` method. If not, it's a string or Array.\n\t\t *\n\t\t * Could potentially cause issues if a browser exists that has Set and Map but\n\t\t * not Symbol.\n\t\t *\n\t\t * @param { any } value\n\t\t * @returns { boolean }\n\t\t */ function iterable(value) {\n\t        if (typeof Symbol !== 'undefined') {\n\t            return !!value[Symbol.iterator];\n\t        } else {\n\t            return Array.isArray(value) || typeof value === 'string';\n\t        }\n\t    }\n\t    exports.iterable = iterable;\n\t    /**\n\t\t * If ES6 features are available, returns `true` if the value is an object hash\n\t\t * or an ES6 Map. Otherwise just return if it's an object hash.\n\t\t * @param { any } value\n\t\t * @returns { boolean }\n\t\t */ function mapping(value) {\n\t        // only maps and object hashes\n\t        var bool = value !== null && value !== undefined && typeof value === 'object' && !Array.isArray(value);\n\t        if (Set) {\n\t            return bool && !(value instanceof Set);\n\t        } else {\n\t            return bool;\n\t        }\n\t    }\n\t    exports.mapping = mapping;\n\t})(tests$1);\n\n\tfunction _cycler(items) {\n\t    var index = -1;\n\t    return {\n\t        current: null,\n\t        reset: function reset() {\n\t            index = -1;\n\t            this.current = null;\n\t        },\n\t        next: function next() {\n\t            index++;\n\t            if (index >= items.length) {\n\t                index = 0;\n\t            }\n\t            this.current = items[index];\n\t            return this.current;\n\t        }\n\t    };\n\t}\n\tfunction _joiner(sep) {\n\t    sep = sep || ',';\n\t    var first = true;\n\t    return function() {\n\t        var val = first ? '' : sep;\n\t        first = false;\n\t        return val;\n\t    };\n\t}\n\t// Making this a function instead so it returns a new object\n\t// each time it's called. That way, if something like an environment\n\t// uses it, they will each have their own copy.\n\tfunction globals$1() {\n\t    return {\n\t        range: function range(start, stop, step) {\n\t            if (typeof stop === 'undefined') {\n\t                stop = start;\n\t                start = 0;\n\t                step = 1;\n\t            } else if (!step) {\n\t                step = 1;\n\t            }\n\t            var arr = [];\n\t            if (step > 0) {\n\t                for(var i = start; i < stop; i += step){\n\t                    arr.push(i);\n\t                }\n\t            } else {\n\t                for(var _i = start; _i > stop; _i += step){\n\t                    // eslint-disable-line for-direction\n\t                    arr.push(_i);\n\t                }\n\t            }\n\t            return arr;\n\t        },\n\t        cycler: function cycler() {\n\t            return _cycler(Array.prototype.slice.call(arguments));\n\t        },\n\t        joiner: function joiner(sep) {\n\t            return _joiner(sep);\n\t        }\n\t    };\n\t}\n\tvar globals_1 = globals$1;\n\n\tvar path$1 = require$$1;\n\tvar expressApp$1 = function express(env, app) {\n\t    function NunjucksView(name, opts) {\n\t        this.name = name;\n\t        this.path = name;\n\t        this.defaultEngine = opts.defaultEngine;\n\t        this.ext = path$1.extname(name);\n\t        if (!this.ext && !this.defaultEngine) {\n\t            throw new Error('No default engine was specified and no extension was provided.');\n\t        }\n\t        if (!this.ext) {\n\t            this.name += this.ext = (this.defaultEngine[0] !== '.' ? '.' : '') + this.defaultEngine;\n\t        }\n\t    }\n\t    NunjucksView.prototype.render = function render(opts, cb) {\n\t        env.render(this.name, opts, cb);\n\t    };\n\t    app.set('view', NunjucksView);\n\t    app.set('nunjucksEnv', env);\n\t    return env;\n\t};\n\n\tfunction _inheritsLoose(subClass, superClass) {\n\t    subClass.prototype = Object.create(superClass.prototype);\n\t    subClass.prototype.constructor = subClass;\n\t    _setPrototypeOf(subClass, superClass);\n\t}\n\tfunction _setPrototypeOf(o, p) {\n\t    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n\t        o.__proto__ = p;\n\t        return o;\n\t    };\n\t    return _setPrototypeOf(o, p);\n\t}\n\tvar asap = asap_1;\n\tvar _waterfall = aSyncWaterfallExports;\n\tvar lib$2 = libExports;\n\tvar compiler$2 = compiler$3;\n\tvar filters = filtersExports;\n\tvar _require$2 = loaders$1, FileSystemLoader = _require$2.FileSystemLoader, WebLoader = _require$2.WebLoader, PrecompiledLoader = _require$2.PrecompiledLoader;\n\tvar tests = tests$1;\n\tvar globals = globals_1;\n\tvar _require2$1 = object, Obj = _require2$1.Obj, EmitterObj = _require2$1.EmitterObj;\n\tvar globalRuntime = runtime$1;\n\tvar handleError = globalRuntime.handleError, Frame = globalRuntime.Frame;\n\tvar expressApp = expressApp$1;\n\t// If the user is using the async API, *always* call it\n\t// asynchronously even if the template was synchronous.\n\tfunction callbackAsap(cb, err, res) {\n\t    asap(function() {\n\t        cb(err, res);\n\t    });\n\t}\n\t/**\n\t * A no-op template, for use with {% include ignore missing %}\n\t */ var noopTmplSrc = {\n\t    type: 'code',\n\t    obj: {\n\t        root: function root(env, context, frame, runtime, cb) {\n\t            try {\n\t                cb(null, '');\n\t            } catch (e) {\n\t                cb(handleError(e, null, null));\n\t            }\n\t        }\n\t    }\n\t};\n\tvar Environment$2 = /*#__PURE__*/ function(_EmitterObj) {\n\t    _inheritsLoose(Environment, _EmitterObj);\n\t    function Environment() {\n\t        return _EmitterObj.apply(this, arguments) || this;\n\t    }\n\t    var _proto = Environment.prototype;\n\t    _proto.init = function init(loaders, opts) {\n\t        var _this = this;\n\t        // The dev flag determines the trace that'll be shown on errors.\n\t        // If set to true, returns the full trace from the error point,\n\t        // otherwise will return trace starting from Template.render\n\t        // (the full trace from within nunjucks may confuse developers using\n\t        //  the library)\n\t        // defaults to false\n\t        opts = this.opts = opts || {};\n\t        this.opts.dev = !!opts.dev;\n\t        // The autoescape flag sets global autoescaping. If true,\n\t        // every string variable will be escaped by default.\n\t        // If false, strings can be manually escaped using the `escape` filter.\n\t        // defaults to true\n\t        this.opts.autoescape = opts.autoescape != null ? opts.autoescape : true;\n\t        // If true, this will make the system throw errors if trying\n\t        // to output a null or undefined value\n\t        this.opts.throwOnUndefined = !!opts.throwOnUndefined;\n\t        this.opts.trimBlocks = !!opts.trimBlocks;\n\t        this.opts.lstripBlocks = !!opts.lstripBlocks;\n\t        this.loaders = [];\n\t        if (!loaders) {\n\t            // The filesystem loader is only available server-side\n\t            if (FileSystemLoader) {\n\t                this.loaders = [\n\t                    new FileSystemLoader('views')\n\t                ];\n\t            } else if (WebLoader) {\n\t                this.loaders = [\n\t                    new WebLoader('/views')\n\t                ];\n\t            }\n\t        } else {\n\t            this.loaders = lib$2.isArray(loaders) ? loaders : [\n\t                loaders\n\t            ];\n\t        }\n\t        // It's easy to use precompiled templates: just include them\n\t        // before you configure nunjucks and this will automatically\n\t        // pick it up and use it\n\t        if (typeof window !== 'undefined' && window.nunjucksPrecompiled) {\n\t            this.loaders.unshift(new PrecompiledLoader(window.nunjucksPrecompiled));\n\t        }\n\t        this._initLoaders();\n\t        this.globals = globals();\n\t        this.filters = {};\n\t        this.tests = {};\n\t        this.asyncFilters = [];\n\t        this.extensions = {};\n\t        this.extensionsList = [];\n\t        lib$2._entries(filters).forEach(function(_ref) {\n\t            var name = _ref[0], filter = _ref[1];\n\t            return _this.addFilter(name, filter);\n\t        });\n\t        lib$2._entries(tests).forEach(function(_ref2) {\n\t            var name = _ref2[0], test = _ref2[1];\n\t            return _this.addTest(name, test);\n\t        });\n\t    };\n\t    _proto._initLoaders = function _initLoaders() {\n\t        var _this2 = this;\n\t        this.loaders.forEach(function(loader) {\n\t            // Caching and cache busting\n\t            loader.cache = {};\n\t            if (typeof loader.on === 'function') {\n\t                loader.on('update', function(name, fullname) {\n\t                    loader.cache[name] = null;\n\t                    _this2.emit('update', name, fullname, loader);\n\t                });\n\t                loader.on('load', function(name, source) {\n\t                    _this2.emit('load', name, source, loader);\n\t                });\n\t            }\n\t        });\n\t    };\n\t    _proto.invalidateCache = function invalidateCache() {\n\t        this.loaders.forEach(function(loader) {\n\t            loader.cache = {};\n\t        });\n\t    };\n\t    _proto.addExtension = function addExtension(name, extension) {\n\t        extension.__name = name;\n\t        this.extensions[name] = extension;\n\t        this.extensionsList.push(extension);\n\t        return this;\n\t    };\n\t    _proto.removeExtension = function removeExtension(name) {\n\t        var extension = this.getExtension(name);\n\t        if (!extension) {\n\t            return;\n\t        }\n\t        this.extensionsList = lib$2.without(this.extensionsList, extension);\n\t        delete this.extensions[name];\n\t    };\n\t    _proto.getExtension = function getExtension(name) {\n\t        return this.extensions[name];\n\t    };\n\t    _proto.hasExtension = function hasExtension(name) {\n\t        return !!this.extensions[name];\n\t    };\n\t    _proto.addGlobal = function addGlobal(name, value) {\n\t        this.globals[name] = value;\n\t        return this;\n\t    };\n\t    _proto.getGlobal = function getGlobal(name) {\n\t        if (typeof this.globals[name] === 'undefined') {\n\t            throw new Error('global not found: ' + name);\n\t        }\n\t        return this.globals[name];\n\t    };\n\t    _proto.addFilter = function addFilter(name, func, async) {\n\t        var wrapped = func;\n\t        if (async) {\n\t            this.asyncFilters.push(name);\n\t        }\n\t        this.filters[name] = wrapped;\n\t        return this;\n\t    };\n\t    _proto.getFilter = function getFilter(name) {\n\t        if (!this.filters[name]) {\n\t            throw new Error('filter not found: ' + name);\n\t        }\n\t        return this.filters[name];\n\t    };\n\t    _proto.addTest = function addTest(name, func) {\n\t        this.tests[name] = func;\n\t        return this;\n\t    };\n\t    _proto.getTest = function getTest(name) {\n\t        if (!this.tests[name]) {\n\t            throw new Error('test not found: ' + name);\n\t        }\n\t        return this.tests[name];\n\t    };\n\t    _proto.resolveTemplate = function resolveTemplate(loader, parentName, filename) {\n\t        var isRelative = loader.isRelative && parentName ? loader.isRelative(filename) : false;\n\t        return isRelative && loader.resolve ? loader.resolve(parentName, filename) : filename;\n\t    };\n\t    _proto.getTemplate = function getTemplate(name, eagerCompile, parentName, ignoreMissing, cb) {\n\t        var _this3 = this;\n\t        var that = this;\n\t        var tmpl = null;\n\t        if (name && name.raw) {\n\t            // this fixes autoescape for templates referenced in symbols\n\t            name = name.raw;\n\t        }\n\t        if (lib$2.isFunction(parentName)) {\n\t            cb = parentName;\n\t            parentName = null;\n\t            eagerCompile = eagerCompile || false;\n\t        }\n\t        if (lib$2.isFunction(eagerCompile)) {\n\t            cb = eagerCompile;\n\t            eagerCompile = false;\n\t        }\n\t        if (name instanceof Template$1) {\n\t            tmpl = name;\n\t        } else if (typeof name !== 'string') {\n\t            throw new Error('template names must be a string: ' + name);\n\t        } else {\n\t            for(var i = 0; i < this.loaders.length; i++){\n\t                var loader = this.loaders[i];\n\t                tmpl = loader.cache[this.resolveTemplate(loader, parentName, name)];\n\t                if (tmpl) {\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t        if (tmpl) {\n\t            if (eagerCompile) {\n\t                tmpl.compile();\n\t            }\n\t            if (cb) {\n\t                cb(null, tmpl);\n\t                return undefined;\n\t            } else {\n\t                return tmpl;\n\t            }\n\t        }\n\t        var syncResult;\n\t        var createTemplate = function createTemplate(err, info) {\n\t            if (!info && !err && !ignoreMissing) {\n\t                err = new Error('template not found: ' + name);\n\t            }\n\t            if (err) {\n\t                if (cb) {\n\t                    cb(err);\n\t                    return;\n\t                } else {\n\t                    throw err;\n\t                }\n\t            }\n\t            var newTmpl;\n\t            if (!info) {\n\t                newTmpl = new Template$1(noopTmplSrc, _this3, '', eagerCompile);\n\t            } else {\n\t                newTmpl = new Template$1(info.src, _this3, info.path, eagerCompile);\n\t                if (!info.noCache) {\n\t                    info.loader.cache[name] = newTmpl;\n\t                }\n\t            }\n\t            if (cb) {\n\t                cb(null, newTmpl);\n\t            } else {\n\t                syncResult = newTmpl;\n\t            }\n\t        };\n\t        lib$2.asyncIter(this.loaders, function(loader, i, next, done) {\n\t            function handle(err, src) {\n\t                if (err) {\n\t                    done(err);\n\t                } else if (src) {\n\t                    src.loader = loader;\n\t                    done(null, src);\n\t                } else {\n\t                    next();\n\t                }\n\t            }\n\t            // Resolve name relative to parentName\n\t            name = that.resolveTemplate(loader, parentName, name);\n\t            if (loader.async) {\n\t                loader.getSource(name, handle);\n\t            } else {\n\t                handle(null, loader.getSource(name));\n\t            }\n\t        }, createTemplate);\n\t        return syncResult;\n\t    };\n\t    _proto.express = function express(app) {\n\t        return expressApp(this, app);\n\t    };\n\t    _proto.render = function render(name, ctx, cb) {\n\t        if (lib$2.isFunction(ctx)) {\n\t            cb = ctx;\n\t            ctx = null;\n\t        }\n\t        // We support a synchronous API to make it easier to migrate\n\t        // existing code to async. This works because if you don't do\n\t        // anything async work, the whole thing is actually run\n\t        // synchronously.\n\t        var syncResult = null;\n\t        this.getTemplate(name, function(err, tmpl) {\n\t            if (err && cb) {\n\t                callbackAsap(cb, err);\n\t            } else if (err) {\n\t                throw err;\n\t            } else {\n\t                syncResult = tmpl.render(ctx, cb);\n\t            }\n\t        });\n\t        return syncResult;\n\t    };\n\t    _proto.renderString = function renderString(src, ctx, opts, cb) {\n\t        if (lib$2.isFunction(opts)) {\n\t            cb = opts;\n\t            opts = {};\n\t        }\n\t        opts = opts || {};\n\t        var tmpl = new Template$1(src, this, opts.path);\n\t        return tmpl.render(ctx, cb);\n\t    };\n\t    _proto.waterfall = function waterfall(tasks, callback, forceAsync) {\n\t        return _waterfall(tasks, callback, forceAsync);\n\t    };\n\t    return Environment;\n\t}(EmitterObj);\n\tvar Context = /*#__PURE__*/ function(_Obj) {\n\t    _inheritsLoose(Context, _Obj);\n\t    function Context() {\n\t        return _Obj.apply(this, arguments) || this;\n\t    }\n\t    var _proto2 = Context.prototype;\n\t    _proto2.init = function init(ctx, blocks, env) {\n\t        var _this4 = this;\n\t        // Has to be tied to an environment so we can tap into its globals.\n\t        this.env = env || new Environment$2();\n\t        // Make a duplicate of ctx\n\t        this.ctx = lib$2.extend({}, ctx);\n\t        this.blocks = {};\n\t        this.exported = [];\n\t        lib$2.keys(blocks).forEach(function(name) {\n\t            _this4.addBlock(name, blocks[name]);\n\t        });\n\t    };\n\t    _proto2.lookup = function lookup(name) {\n\t        // This is one of the most called functions, so optimize for\n\t        // the typical case where the name isn't in the globals\n\t        if (name in this.env.globals && !(name in this.ctx)) {\n\t            return this.env.globals[name];\n\t        } else {\n\t            return this.ctx[name];\n\t        }\n\t    };\n\t    _proto2.setVariable = function setVariable(name, val) {\n\t        this.ctx[name] = val;\n\t    };\n\t    _proto2.getVariables = function getVariables() {\n\t        return this.ctx;\n\t    };\n\t    _proto2.addBlock = function addBlock(name, block) {\n\t        this.blocks[name] = this.blocks[name] || [];\n\t        this.blocks[name].push(block);\n\t        return this;\n\t    };\n\t    _proto2.getBlock = function getBlock(name) {\n\t        if (!this.blocks[name]) {\n\t            throw new Error('unknown block \"' + name + '\"');\n\t        }\n\t        return this.blocks[name][0];\n\t    };\n\t    _proto2.getSuper = function getSuper(env, name, block, frame, runtime, cb) {\n\t        var idx = lib$2.indexOf(this.blocks[name] || [], block);\n\t        var blk = this.blocks[name][idx + 1];\n\t        var context = this;\n\t        if (idx === -1 || !blk) {\n\t            throw new Error('no super block available for \"' + name + '\"');\n\t        }\n\t        blk(env, context, frame, runtime, cb);\n\t    };\n\t    _proto2.addExport = function addExport(name) {\n\t        this.exported.push(name);\n\t    };\n\t    _proto2.getExported = function getExported() {\n\t        var _this5 = this;\n\t        var exported = {};\n\t        this.exported.forEach(function(name) {\n\t            exported[name] = _this5.ctx[name];\n\t        });\n\t        return exported;\n\t    };\n\t    return Context;\n\t}(Obj);\n\tvar Template$1 = /*#__PURE__*/ function(_Obj2) {\n\t    _inheritsLoose(Template, _Obj2);\n\t    function Template() {\n\t        return _Obj2.apply(this, arguments) || this;\n\t    }\n\t    var _proto3 = Template.prototype;\n\t    _proto3.init = function init(src, env, path, eagerCompile) {\n\t        this.env = env || new Environment$2();\n\t        if (lib$2.isObject(src)) {\n\t            switch(src.type){\n\t                case 'code':\n\t                    this.tmplProps = src.obj;\n\t                    break;\n\t                case 'string':\n\t                    this.tmplStr = src.obj;\n\t                    break;\n\t                default:\n\t                    throw new Error(\"Unexpected template object type \" + src.type + \"; expected 'code', or 'string'\");\n\t            }\n\t        } else if (lib$2.isString(src)) {\n\t            this.tmplStr = src;\n\t        } else {\n\t            throw new Error('src must be a string or an object describing the source');\n\t        }\n\t        this.path = path;\n\t        if (eagerCompile) {\n\t            try {\n\t                this._compile();\n\t            } catch (err) {\n\t                throw lib$2._prettifyError(this.path, this.env.opts.dev, err);\n\t            }\n\t        } else {\n\t            this.compiled = false;\n\t        }\n\t    };\n\t    _proto3.render = function render(ctx, parentFrame, cb) {\n\t        var _this6 = this;\n\t        if (typeof ctx === 'function') {\n\t            cb = ctx;\n\t            ctx = {};\n\t        } else if (typeof parentFrame === 'function') {\n\t            cb = parentFrame;\n\t            parentFrame = null;\n\t        }\n\t        // If there is a parent frame, we are being called from internal\n\t        // code of another template, and the internal system\n\t        // depends on the sync/async nature of the parent template\n\t        // to be inherited, so force an async callback\n\t        var forceAsync = !parentFrame;\n\t        // Catch compile errors for async rendering\n\t        try {\n\t            this.compile();\n\t        } catch (e) {\n\t            var err = lib$2._prettifyError(this.path, this.env.opts.dev, e);\n\t            if (cb) {\n\t                return callbackAsap(cb, err);\n\t            } else {\n\t                throw err;\n\t            }\n\t        }\n\t        var context = new Context(ctx || {}, this.blocks, this.env);\n\t        var frame = parentFrame ? parentFrame.push(true) : new Frame();\n\t        frame.topLevel = true;\n\t        var syncResult = null;\n\t        var didError = false;\n\t        this.rootRenderFunc(this.env, context, frame, globalRuntime, function(err, res) {\n\t            // TODO: this is actually a bug in the compiled template (because waterfall\n\t            // tasks are both not passing errors up the chain of callbacks AND are not\n\t            // causing a return from the top-most render function). But fixing that\n\t            // will require a more substantial change to the compiler.\n\t            if (didError && cb && typeof res !== 'undefined') {\n\t                // prevent multiple calls to cb\n\t                return;\n\t            }\n\t            if (err) {\n\t                err = lib$2._prettifyError(_this6.path, _this6.env.opts.dev, err);\n\t                didError = true;\n\t            }\n\t            if (cb) {\n\t                if (forceAsync) {\n\t                    callbackAsap(cb, err, res);\n\t                } else {\n\t                    cb(err, res);\n\t                }\n\t            } else {\n\t                if (err) {\n\t                    throw err;\n\t                }\n\t                syncResult = res;\n\t            }\n\t        });\n\t        return syncResult;\n\t    };\n\t    _proto3.getExported = function getExported(ctx, parentFrame, cb) {\n\t        // eslint-disable-line consistent-return\n\t        if (typeof ctx === 'function') {\n\t            cb = ctx;\n\t            ctx = {};\n\t        }\n\t        if (typeof parentFrame === 'function') {\n\t            cb = parentFrame;\n\t            parentFrame = null;\n\t        }\n\t        // Catch compile errors for async rendering\n\t        try {\n\t            this.compile();\n\t        } catch (e) {\n\t            if (cb) {\n\t                return cb(e);\n\t            } else {\n\t                throw e;\n\t            }\n\t        }\n\t        var frame = parentFrame ? parentFrame.push() : new Frame();\n\t        frame.topLevel = true;\n\t        // Run the rootRenderFunc to populate the context with exported vars\n\t        var context = new Context(ctx || {}, this.blocks, this.env);\n\t        this.rootRenderFunc(this.env, context, frame, globalRuntime, function(err) {\n\t            if (err) {\n\t                cb(err, null);\n\t            } else {\n\t                cb(null, context.getExported());\n\t            }\n\t        });\n\t    };\n\t    _proto3.compile = function compile() {\n\t        if (!this.compiled) {\n\t            this._compile();\n\t        }\n\t    };\n\t    _proto3._compile = function _compile() {\n\t        var props;\n\t        if (this.tmplProps) {\n\t            props = this.tmplProps;\n\t        } else {\n\t            var source = compiler$2.compile(this.tmplStr, this.env.asyncFilters, this.env.extensionsList, this.path, this.env.opts);\n\t            var func = new Function(source); // eslint-disable-line no-new-func\n\t            props = func();\n\t        }\n\t        this.blocks = this._getBlocks(props);\n\t        this.rootRenderFunc = props.root;\n\t        this.compiled = true;\n\t    };\n\t    _proto3._getBlocks = function _getBlocks(props) {\n\t        var blocks = {};\n\t        lib$2.keys(props).forEach(function(k) {\n\t            if (k.slice(0, 2) === 'b_') {\n\t                blocks[k.slice(2)] = props[k];\n\t            }\n\t        });\n\t        return blocks;\n\t    };\n\t    return Template;\n\t}(Obj);\n\tvar environment = {\n\t    Environment: Environment$2,\n\t    Template: Template$1\n\t};\n\n\tfunction precompileGlobal$1(templates, opts) {\n\t    var out = '';\n\t    opts = opts || {};\n\t    for(var i = 0; i < templates.length; i++){\n\t        var name = JSON.stringify(templates[i].name);\n\t        var template = templates[i].template;\n\t        out += '(function() {' + '(window.nunjucksPrecompiled = window.nunjucksPrecompiled || {})' + '[' + name + '] = (function() {\\n' + template + '\\n})();\\n';\n\t        if (opts.asFunction) {\n\t            out += 'return function(ctx, cb) { return nunjucks.render(' + name + ', ctx, cb); }\\n';\n\t        }\n\t        out += '})();\\n';\n\t    }\n\t    return out;\n\t}\n\tvar precompileGlobal_1 = precompileGlobal$1;\n\n\tvar fs = require$$0;\n\tvar path = require$$1;\n\tvar _require$1 = libExports, _prettifyError = _require$1._prettifyError;\n\tvar compiler$1 = compiler$3;\n\tvar _require2 = environment, Environment$1 = _require2.Environment;\n\tvar precompileGlobal = precompileGlobal_1;\n\tfunction match(filename, patterns) {\n\t    if (!Array.isArray(patterns)) {\n\t        return false;\n\t    }\n\t    return patterns.some(function(pattern) {\n\t        return filename.match(pattern);\n\t    });\n\t}\n\tfunction precompileString(str, opts) {\n\t    opts = opts || {};\n\t    opts.isString = true;\n\t    var env = opts.env || new Environment$1([]);\n\t    var wrapper = opts.wrapper || precompileGlobal;\n\t    if (!opts.name) {\n\t        throw new Error('the \"name\" option is required when compiling a string');\n\t    }\n\t    return wrapper([\n\t        _precompile(str, opts.name, env)\n\t    ], opts);\n\t}\n\tfunction precompile$1(input, opts) {\n\t    // The following options are available:\n\t    //\n\t    // * name: name of the template (auto-generated when compiling a directory)\n\t    // * isString: input is a string, not a file path\n\t    // * asFunction: generate a callable function\n\t    // * force: keep compiling on error\n\t    // * env: the Environment to use (gets extensions and async filters from it)\n\t    // * include: which file/folders to include (folders are auto-included, files are auto-excluded)\n\t    // * exclude: which file/folders to exclude (folders are auto-included, files are auto-excluded)\n\t    // * wrapper: function(templates, opts) {...}\n\t    //       Customize the output format to store the compiled template.\n\t    //       By default, templates are stored in a global variable used by the runtime.\n\t    //       A custom loader will be necessary to load your custom wrapper.\n\t    opts = opts || {};\n\t    var env = opts.env || new Environment$1([]);\n\t    var wrapper = opts.wrapper || precompileGlobal;\n\t    if (opts.isString) {\n\t        return precompileString(input, opts);\n\t    }\n\t    var pathStats = fs.existsSync(input) && fs.statSync(input);\n\t    var precompiled = [];\n\t    var templates = [];\n\t    function addTemplates(dir) {\n\t        fs.readdirSync(dir).forEach(function(file) {\n\t            var filepath = path.join(dir, file);\n\t            var subpath = filepath.substr(path.join(input, '/').length);\n\t            var stat = fs.statSync(filepath);\n\t            if (stat && stat.isDirectory()) {\n\t                subpath += '/';\n\t                if (!match(subpath, opts.exclude)) {\n\t                    addTemplates(filepath);\n\t                }\n\t            } else if (match(subpath, opts.include)) {\n\t                templates.push(filepath);\n\t            }\n\t        });\n\t    }\n\t    if (pathStats.isFile()) {\n\t        precompiled.push(_precompile(fs.readFileSync(input, 'utf-8'), opts.name || input, env));\n\t    } else if (pathStats.isDirectory()) {\n\t        addTemplates(input);\n\t        for(var i = 0; i < templates.length; i++){\n\t            var name = templates[i].replace(path.join(input, '/'), '');\n\t            try {\n\t                precompiled.push(_precompile(fs.readFileSync(templates[i], 'utf-8'), name, env));\n\t            } catch (e) {\n\t                if (opts.force) {\n\t                    // Don't stop generating the output if we're\n\t                    // forcing compilation.\n\t                    console.error(e); // eslint-disable-line no-console\n\t                } else {\n\t                    throw e;\n\t                }\n\t            }\n\t        }\n\t    }\n\t    return wrapper(precompiled, opts);\n\t}\n\tfunction _precompile(str, name, env) {\n\t    env = env || new Environment$1([]);\n\t    var asyncFilters = env.asyncFilters;\n\t    var extensions = env.extensionsList;\n\t    var template;\n\t    name = name.replace(/\\\\/g, '/');\n\t    try {\n\t        template = compiler$1.compile(str, asyncFilters, extensions, name, env.opts);\n\t    } catch (err) {\n\t        throw _prettifyError(name, false, err);\n\t    }\n\t    return {\n\t        name: name,\n\t        template: template\n\t    };\n\t}\n\tvar precompile_1 = {\n\t    precompile: precompile$1,\n\t    precompileString: precompileString\n\t};\n\n\tfunction installCompat() {\n\t    /* eslint-disable camelcase */ // This must be called like `nunjucks.installCompat` so that `this`\n\t    // references the nunjucks instance\n\t    var runtime = this.runtime;\n\t    var lib = this.lib;\n\t    // Handle slim case where these 'modules' are excluded from the built source\n\t    var Compiler = this.compiler.Compiler;\n\t    var Parser = this.parser.Parser;\n\t    var nodes = this.nodes;\n\t    var lexer = this.lexer;\n\t    var orig_contextOrFrameLookup = runtime.contextOrFrameLookup;\n\t    var orig_memberLookup = runtime.memberLookup;\n\t    var orig_Compiler_assertType;\n\t    var orig_Parser_parseAggregate;\n\t    if (Compiler) {\n\t        orig_Compiler_assertType = Compiler.prototype.assertType;\n\t    }\n\t    if (Parser) {\n\t        orig_Parser_parseAggregate = Parser.prototype.parseAggregate;\n\t    }\n\t    function uninstall() {\n\t        runtime.contextOrFrameLookup = orig_contextOrFrameLookup;\n\t        runtime.memberLookup = orig_memberLookup;\n\t        if (Compiler) {\n\t            Compiler.prototype.assertType = orig_Compiler_assertType;\n\t        }\n\t        if (Parser) {\n\t            Parser.prototype.parseAggregate = orig_Parser_parseAggregate;\n\t        }\n\t    }\n\t    runtime.contextOrFrameLookup = function contextOrFrameLookup(context, frame, key) {\n\t        var val = orig_contextOrFrameLookup.apply(this, arguments);\n\t        if (val !== undefined) {\n\t            return val;\n\t        }\n\t        switch(key){\n\t            case 'True':\n\t                return true;\n\t            case 'False':\n\t                return false;\n\t            case 'None':\n\t                return null;\n\t            default:\n\t                return undefined;\n\t        }\n\t    };\n\t    function getTokensState(tokens) {\n\t        return {\n\t            index: tokens.index,\n\t            lineno: tokens.lineno,\n\t            colno: tokens.colno\n\t        };\n\t    }\n\t    if (browser$1.env.BUILD_TYPE !== 'SLIM' && nodes && Compiler && Parser) {\n\t        // i.e., not slim mode\n\t        var Slice = nodes.Node.extend('Slice', {\n\t            fields: [\n\t                'start',\n\t                'stop',\n\t                'step'\n\t            ],\n\t            init: function init(lineno, colno, start, stop, step) {\n\t                start = start || new nodes.Literal(lineno, colno, null);\n\t                stop = stop || new nodes.Literal(lineno, colno, null);\n\t                step = step || new nodes.Literal(lineno, colno, 1);\n\t                this.parent(lineno, colno, start, stop, step);\n\t            }\n\t        });\n\t        Compiler.prototype.assertType = function assertType(node) {\n\t            if (node instanceof Slice) {\n\t                return;\n\t            }\n\t            orig_Compiler_assertType.apply(this, arguments);\n\t        };\n\t        Compiler.prototype.compileSlice = function compileSlice(node, frame) {\n\t            this._emit('(');\n\t            this._compileExpression(node.start, frame);\n\t            this._emit('),(');\n\t            this._compileExpression(node.stop, frame);\n\t            this._emit('),(');\n\t            this._compileExpression(node.step, frame);\n\t            this._emit(')');\n\t        };\n\t        Parser.prototype.parseAggregate = function parseAggregate() {\n\t            var _this = this;\n\t            var origState = getTokensState(this.tokens);\n\t            // Set back one accounting for opening bracket/parens\n\t            origState.colno--;\n\t            origState.index--;\n\t            try {\n\t                return orig_Parser_parseAggregate.apply(this);\n\t            } catch (e) {\n\t                var errState = getTokensState(this.tokens);\n\t                var rethrow = function rethrow() {\n\t                    lib._assign(_this.tokens, errState);\n\t                    return e;\n\t                };\n\t                // Reset to state before original parseAggregate called\n\t                lib._assign(this.tokens, origState);\n\t                this.peeked = false;\n\t                var tok = this.peekToken();\n\t                if (tok.type !== lexer.TOKEN_LEFT_BRACKET) {\n\t                    throw rethrow();\n\t                } else {\n\t                    this.nextToken();\n\t                }\n\t                var node = new Slice(tok.lineno, tok.colno);\n\t                // If we don't encounter a colon while parsing, this is not a slice,\n\t                // so re-raise the original exception.\n\t                var isSlice = false;\n\t                for(var i = 0; i <= node.fields.length; i++){\n\t                    if (this.skip(lexer.TOKEN_RIGHT_BRACKET)) {\n\t                        break;\n\t                    }\n\t                    if (i === node.fields.length) {\n\t                        if (isSlice) {\n\t                            this.fail('parseSlice: too many slice components', tok.lineno, tok.colno);\n\t                        } else {\n\t                            break;\n\t                        }\n\t                    }\n\t                    if (this.skip(lexer.TOKEN_COLON)) {\n\t                        isSlice = true;\n\t                    } else {\n\t                        var field = node.fields[i];\n\t                        node[field] = this.parseExpression();\n\t                        isSlice = this.skip(lexer.TOKEN_COLON) || isSlice;\n\t                    }\n\t                }\n\t                if (!isSlice) {\n\t                    throw rethrow();\n\t                }\n\t                return new nodes.Array(tok.lineno, tok.colno, [\n\t                    node\n\t                ]);\n\t            }\n\t        };\n\t    }\n\t    function sliceLookup(obj, start, stop, step) {\n\t        obj = obj || [];\n\t        if (start === null) {\n\t            start = step < 0 ? obj.length - 1 : 0;\n\t        }\n\t        if (stop === null) {\n\t            stop = step < 0 ? -1 : obj.length;\n\t        } else if (stop < 0) {\n\t            stop += obj.length;\n\t        }\n\t        if (start < 0) {\n\t            start += obj.length;\n\t        }\n\t        var results = [];\n\t        for(var i = start;; i += step){\n\t            if (i < 0 || i > obj.length) {\n\t                break;\n\t            }\n\t            if (step > 0 && i >= stop) {\n\t                break;\n\t            }\n\t            if (step < 0 && i <= stop) {\n\t                break;\n\t            }\n\t            results.push(runtime.memberLookup(obj, i));\n\t        }\n\t        return results;\n\t    }\n\t    function hasOwnProp(obj, key) {\n\t        return Object.prototype.hasOwnProperty.call(obj, key);\n\t    }\n\t    var ARRAY_MEMBERS = {\n\t        pop: function pop(index) {\n\t            if (index === undefined) {\n\t                return this.pop();\n\t            }\n\t            if (index >= this.length || index < 0) {\n\t                throw new Error('KeyError');\n\t            }\n\t            return this.splice(index, 1);\n\t        },\n\t        append: function append(element) {\n\t            return this.push(element);\n\t        },\n\t        remove: function remove(element) {\n\t            for(var i = 0; i < this.length; i++){\n\t                if (this[i] === element) {\n\t                    return this.splice(i, 1);\n\t                }\n\t            }\n\t            throw new Error('ValueError');\n\t        },\n\t        count: function count(element) {\n\t            var count = 0;\n\t            for(var i = 0; i < this.length; i++){\n\t                if (this[i] === element) {\n\t                    count++;\n\t                }\n\t            }\n\t            return count;\n\t        },\n\t        index: function index(element) {\n\t            var i;\n\t            if ((i = this.indexOf(element)) === -1) {\n\t                throw new Error('ValueError');\n\t            }\n\t            return i;\n\t        },\n\t        find: function find(element) {\n\t            return this.indexOf(element);\n\t        },\n\t        insert: function insert(index, elem) {\n\t            return this.splice(index, 0, elem);\n\t        }\n\t    };\n\t    var OBJECT_MEMBERS = {\n\t        items: function items() {\n\t            return lib._entries(this);\n\t        },\n\t        values: function values() {\n\t            return lib._values(this);\n\t        },\n\t        keys: function keys() {\n\t            return lib.keys(this);\n\t        },\n\t        get: function get(key, def) {\n\t            var output = this[key];\n\t            if (output === undefined) {\n\t                output = def;\n\t            }\n\t            return output;\n\t        },\n\t        has_key: function has_key(key) {\n\t            return hasOwnProp(this, key);\n\t        },\n\t        pop: function pop(key, def) {\n\t            var output = this[key];\n\t            if (output === undefined && def !== undefined) {\n\t                output = def;\n\t            } else if (output === undefined) {\n\t                throw new Error('KeyError');\n\t            } else {\n\t                delete this[key];\n\t            }\n\t            return output;\n\t        },\n\t        popitem: function popitem() {\n\t            var keys = lib.keys(this);\n\t            if (!keys.length) {\n\t                throw new Error('KeyError');\n\t            }\n\t            var k = keys[0];\n\t            var val = this[k];\n\t            delete this[k];\n\t            return [\n\t                k,\n\t                val\n\t            ];\n\t        },\n\t        setdefault: function setdefault(key, def) {\n\t            if (def === void 0) {\n\t                def = null;\n\t            }\n\t            if (!(key in this)) {\n\t                this[key] = def;\n\t            }\n\t            return this[key];\n\t        },\n\t        update: function update(kwargs) {\n\t            lib._assign(this, kwargs);\n\t            return null; // Always returns None\n\t        }\n\t    };\n\t    OBJECT_MEMBERS.iteritems = OBJECT_MEMBERS.items;\n\t    OBJECT_MEMBERS.itervalues = OBJECT_MEMBERS.values;\n\t    OBJECT_MEMBERS.iterkeys = OBJECT_MEMBERS.keys;\n\t    runtime.memberLookup = function memberLookup(obj, val, autoescape) {\n\t        if (arguments.length === 4) {\n\t            return sliceLookup.apply(this, arguments);\n\t        }\n\t        obj = obj || {};\n\t        // If the object is an object, return any of the methods that Python would\n\t        // otherwise provide.\n\t        if (lib.isArray(obj) && hasOwnProp(ARRAY_MEMBERS, val)) {\n\t            return ARRAY_MEMBERS[val].bind(obj);\n\t        }\n\t        if (lib.isObject(obj) && hasOwnProp(OBJECT_MEMBERS, val)) {\n\t            return OBJECT_MEMBERS[val].bind(obj);\n\t        }\n\t        return orig_memberLookup.apply(this, arguments);\n\t    };\n\t    return uninstall;\n\t}\n\tvar jinjaCompat = installCompat;\n\n\tvar lib$1 = libExports;\n\tvar _require = environment, Environment = _require.Environment, Template = _require.Template;\n\tvar Loader = loader;\n\tvar loaders = loaders$1;\n\tvar precompile = precompile_1;\n\tvar compiler = compiler$3;\n\tvar parser = parser$2;\n\tvar lexer = lexer$2;\n\tvar runtime = runtime$1;\n\tvar nodes = nodes$4;\n\tvar installJinjaCompat = jinjaCompat;\n\t// A single instance of an environment, since this is so commonly used\n\tvar e;\n\tfunction configure(templatesPath, opts) {\n\t    opts = opts || {};\n\t    if (lib$1.isObject(templatesPath)) {\n\t        opts = templatesPath;\n\t        templatesPath = null;\n\t    }\n\t    var TemplateLoader;\n\t    if (loaders.FileSystemLoader) {\n\t        TemplateLoader = new loaders.FileSystemLoader(templatesPath, {\n\t            watch: opts.watch,\n\t            noCache: opts.noCache\n\t        });\n\t    } else if (loaders.WebLoader) {\n\t        TemplateLoader = new loaders.WebLoader(templatesPath, {\n\t            useCache: opts.web && opts.web.useCache,\n\t            async: opts.web && opts.web.async\n\t        });\n\t    }\n\t    e = new Environment(TemplateLoader, opts);\n\t    if (opts && opts.express) {\n\t        e.express(opts.express);\n\t    }\n\t    return e;\n\t}\n\tvar nunjucks = {\n\t    Environment: Environment,\n\t    Template: Template,\n\t    Loader: Loader,\n\t    FileSystemLoader: loaders.FileSystemLoader,\n\t    NodeResolveLoader: loaders.NodeResolveLoader,\n\t    PrecompiledLoader: loaders.PrecompiledLoader,\n\t    WebLoader: loaders.WebLoader,\n\t    compiler: compiler,\n\t    parser: parser,\n\t    lexer: lexer,\n\t    runtime: runtime,\n\t    lib: lib$1,\n\t    nodes: nodes,\n\t    installJinjaCompat: installJinjaCompat,\n\t    configure: configure,\n\t    reset: function reset() {\n\t        e = undefined;\n\t    },\n\t    compile: function compile(src, env, path, eagerCompile) {\n\t        if (!e) {\n\t            configure();\n\t        }\n\t        return new Template(src, env, path, eagerCompile);\n\t    },\n\t    render: function render(name, ctx, cb) {\n\t        if (!e) {\n\t            configure();\n\t        }\n\t        return e.render(name, ctx, cb);\n\t    },\n\t    renderString: function renderString(src, ctx, cb) {\n\t        if (!e) {\n\t            configure();\n\t        }\n\t        return e.renderString(src, ctx, cb);\n\t    },\n\t    precompile: precompile ? precompile.precompile : undefined,\n\t    precompileString: precompile ? precompile.precompileString : undefined\n\t};\n\tvar nj = /*@__PURE__*/ getDefaultExportFromCjs(nunjucks);\n\n\t/* eslint-disable no-bitwise */ const decodeCache = {};\n\tfunction getDecodeCache(exclude) {\n\t    let cache = decodeCache[exclude];\n\t    if (cache) {\n\t        return cache;\n\t    }\n\t    cache = decodeCache[exclude] = [];\n\t    for(let i = 0; i < 128; i++){\n\t        const ch = String.fromCharCode(i);\n\t        cache.push(ch);\n\t    }\n\t    for(let i = 0; i < exclude.length; i++){\n\t        const ch = exclude.charCodeAt(i);\n\t        cache[ch] = '%' + ('0' + ch.toString(16).toUpperCase()).slice(-2);\n\t    }\n\t    return cache;\n\t}\n\t// Decode percent-encoded string.\n\t//\n\tfunction decode$1(string, exclude) {\n\t    if (typeof exclude !== 'string') {\n\t        exclude = decode$1.defaultChars;\n\t    }\n\t    const cache = getDecodeCache(exclude);\n\t    return string.replace(/(%[a-f0-9]{2})+/gi, function(seq) {\n\t        let result = '';\n\t        for(let i = 0, l = seq.length; i < l; i += 3){\n\t            const b1 = parseInt(seq.slice(i + 1, i + 3), 16);\n\t            if (b1 < 0x80) {\n\t                result += cache[b1];\n\t                continue;\n\t            }\n\t            if ((b1 & 0xE0) === 0xC0 && i + 3 < l) {\n\t                // 110xxxxx 10xxxxxx\n\t                const b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n\t                if ((b2 & 0xC0) === 0x80) {\n\t                    const chr = b1 << 6 & 0x7C0 | b2 & 0x3F;\n\t                    if (chr < 0x80) {\n\t                        result += '\\ufffd\\ufffd';\n\t                    } else {\n\t                        result += String.fromCharCode(chr);\n\t                    }\n\t                    i += 3;\n\t                    continue;\n\t                }\n\t            }\n\t            if ((b1 & 0xF0) === 0xE0 && i + 6 < l) {\n\t                // 1110xxxx 10xxxxxx 10xxxxxx\n\t                const b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n\t                const b3 = parseInt(seq.slice(i + 7, i + 9), 16);\n\t                if ((b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80) {\n\t                    const chr = b1 << 12 & 0xF000 | b2 << 6 & 0xFC0 | b3 & 0x3F;\n\t                    if (chr < 0x800 || chr >= 0xD800 && chr <= 0xDFFF) {\n\t                        result += '\\ufffd\\ufffd\\ufffd';\n\t                    } else {\n\t                        result += String.fromCharCode(chr);\n\t                    }\n\t                    i += 6;\n\t                    continue;\n\t                }\n\t            }\n\t            if ((b1 & 0xF8) === 0xF0 && i + 9 < l) {\n\t                // 111110xx 10xxxxxx 10xxxxxx 10xxxxxx\n\t                const b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n\t                const b3 = parseInt(seq.slice(i + 7, i + 9), 16);\n\t                const b4 = parseInt(seq.slice(i + 10, i + 12), 16);\n\t                if ((b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80 && (b4 & 0xC0) === 0x80) {\n\t                    let chr = b1 << 18 & 0x1C0000 | b2 << 12 & 0x3F000 | b3 << 6 & 0xFC0 | b4 & 0x3F;\n\t                    if (chr < 0x10000 || chr > 0x10FFFF) {\n\t                        result += '\\ufffd\\ufffd\\ufffd\\ufffd';\n\t                    } else {\n\t                        chr -= 0x10000;\n\t                        result += String.fromCharCode(0xD800 + (chr >> 10), 0xDC00 + (chr & 0x3FF));\n\t                    }\n\t                    i += 9;\n\t                    continue;\n\t                }\n\t            }\n\t            result += '\\ufffd';\n\t        }\n\t        return result;\n\t    });\n\t}\n\tdecode$1.defaultChars = ';/?:@&=+$,#';\n\tdecode$1.componentChars = '';\n\n\tconst encodeCache = {};\n\t// Create a lookup array where anything but characters in `chars` string\n\t// and alphanumeric chars is percent-encoded.\n\t//\n\tfunction getEncodeCache(exclude) {\n\t    let cache = encodeCache[exclude];\n\t    if (cache) {\n\t        return cache;\n\t    }\n\t    cache = encodeCache[exclude] = [];\n\t    for(let i = 0; i < 128; i++){\n\t        const ch = String.fromCharCode(i);\n\t        if (/^[0-9a-z]$/i.test(ch)) {\n\t            // always allow unencoded alphanumeric characters\n\t            cache.push(ch);\n\t        } else {\n\t            cache.push('%' + ('0' + i.toString(16).toUpperCase()).slice(-2));\n\t        }\n\t    }\n\t    for(let i = 0; i < exclude.length; i++){\n\t        cache[exclude.charCodeAt(i)] = exclude[i];\n\t    }\n\t    return cache;\n\t}\n\t// Encode unsafe characters with percent-encoding, skipping already\n\t// encoded sequences.\n\t//\n\t//  - string       - string to encode\n\t//  - exclude      - list of characters to ignore (in addition to a-zA-Z0-9)\n\t//  - keepEscaped  - don't encode '%' in a correct escape sequence (default: true)\n\t//\n\tfunction encode$1(string, exclude, keepEscaped) {\n\t    if (typeof exclude !== 'string') {\n\t        // encode(string, keepEscaped)\n\t        keepEscaped = exclude;\n\t        exclude = encode$1.defaultChars;\n\t    }\n\t    if (typeof keepEscaped === 'undefined') {\n\t        keepEscaped = true;\n\t    }\n\t    const cache = getEncodeCache(exclude);\n\t    let result = '';\n\t    for(let i = 0, l = string.length; i < l; i++){\n\t        const code = string.charCodeAt(i);\n\t        if (keepEscaped && code === 0x25 /* % */  && i + 2 < l) {\n\t            if (/^[0-9a-f]{2}$/i.test(string.slice(i + 1, i + 3))) {\n\t                result += string.slice(i, i + 3);\n\t                i += 2;\n\t                continue;\n\t            }\n\t        }\n\t        if (code < 128) {\n\t            result += cache[code];\n\t            continue;\n\t        }\n\t        if (code >= 0xD800 && code <= 0xDFFF) {\n\t            if (code >= 0xD800 && code <= 0xDBFF && i + 1 < l) {\n\t                const nextCode = string.charCodeAt(i + 1);\n\t                if (nextCode >= 0xDC00 && nextCode <= 0xDFFF) {\n\t                    result += encodeURIComponent(string[i] + string[i + 1]);\n\t                    i++;\n\t                    continue;\n\t                }\n\t            }\n\t            result += '%EF%BF%BD';\n\t            continue;\n\t        }\n\t        result += encodeURIComponent(string[i]);\n\t    }\n\t    return result;\n\t}\n\tencode$1.defaultChars = \";/?:@&=+$,-_.!~*'()#\";\n\tencode$1.componentChars = \"-_.!~*'()\";\n\n\tfunction format(url) {\n\t    let result = '';\n\t    result += url.protocol || '';\n\t    result += url.slashes ? '//' : '';\n\t    result += url.auth ? url.auth + '@' : '';\n\t    if (url.hostname && url.hostname.indexOf(':') !== -1) {\n\t        // ipv6 address\n\t        result += '[' + url.hostname + ']';\n\t    } else {\n\t        result += url.hostname || '';\n\t    }\n\t    result += url.port ? ':' + url.port : '';\n\t    result += url.pathname || '';\n\t    result += url.search || '';\n\t    result += url.hash || '';\n\t    return result;\n\t}\n\n\t// Copyright Joyent, Inc. and other Node contributors.\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a\n\t// copy of this software and associated documentation files (the\n\t// \"Software\"), to deal in the Software without restriction, including\n\t// without limitation the rights to use, copy, modify, merge, publish,\n\t// distribute, sublicense, and/or sell copies of the Software, and to permit\n\t// persons to whom the Software is furnished to do so, subject to the\n\t// following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included\n\t// in all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\t// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n\t// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n\t// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n\t// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n\t// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\t//\n\t// Changes from joyent/node:\n\t//\n\t// 1. No leading slash in paths,\n\t//    e.g. in `url.parse('http://foo?bar')` pathname is ``, not `/`\n\t//\n\t// 2. Backslashes are not replaced with slashes,\n\t//    so `http:\\\\example.org\\` is treated like a relative path\n\t//\n\t// 3. Trailing colon is treated like a part of the path,\n\t//    i.e. in `http://example.org:foo` pathname is `:foo`\n\t//\n\t// 4. Nothing is URL-encoded in the resulting object,\n\t//    (in joyent/node some chars in auth and paths are encoded)\n\t//\n\t// 5. `url.parse()` does not have `parseQueryString` argument\n\t//\n\t// 6. Removed extraneous result properties: `host`, `path`, `query`, etc.,\n\t//    which can be constructed using other parts of the url.\n\t//\n\tfunction Url() {\n\t    this.protocol = null;\n\t    this.slashes = null;\n\t    this.auth = null;\n\t    this.port = null;\n\t    this.hostname = null;\n\t    this.hash = null;\n\t    this.search = null;\n\t    this.pathname = null;\n\t}\n\t// Reference: RFC 3986, RFC 1808, RFC 2396\n\t// define these here so at least they only have to be\n\t// compiled once on the first module load.\n\tconst protocolPattern = /^([a-z0-9.+-]+:)/i;\n\tconst portPattern = /:[0-9]*$/;\n\t// Special case for a simple path URL\n\t/* eslint-disable-next-line no-useless-escape */ const simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/;\n\t// RFC 2396: characters reserved for delimiting URLs.\n\t// We actually just auto-escape these.\n\tconst delims = [\n\t    '<',\n\t    '>',\n\t    '\"',\n\t    '`',\n\t    ' ',\n\t    '\\r',\n\t    '\\n',\n\t    '\\t'\n\t];\n\t// RFC 2396: characters not allowed for various reasons.\n\tconst unwise = [\n\t    '{',\n\t    '}',\n\t    '|',\n\t    '\\\\',\n\t    '^',\n\t    '`'\n\t].concat(delims);\n\t// Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n\tconst autoEscape = [\n\t    '\\''\n\t].concat(unwise);\n\t// Characters that are never ever allowed in a hostname.\n\t// Note that any invalid chars are also handled, but these\n\t// are the ones that are *expected* to be seen, so we fast-path\n\t// them.\n\tconst nonHostChars = [\n\t    '%',\n\t    '/',\n\t    '?',\n\t    ';',\n\t    '#'\n\t].concat(autoEscape);\n\tconst hostEndingChars = [\n\t    '/',\n\t    '?',\n\t    '#'\n\t];\n\tconst hostnameMaxLen = 255;\n\tconst hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/;\n\tconst hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/;\n\t// protocols that can allow \"unsafe\" and \"unwise\" chars.\n\t// protocols that never have a hostname.\n\tconst hostlessProtocol = {\n\t    javascript: true,\n\t    'javascript:': true\n\t};\n\t// protocols that always contain a // bit.\n\tconst slashedProtocol = {\n\t    http: true,\n\t    https: true,\n\t    ftp: true,\n\t    gopher: true,\n\t    file: true,\n\t    'http:': true,\n\t    'https:': true,\n\t    'ftp:': true,\n\t    'gopher:': true,\n\t    'file:': true\n\t};\n\tfunction urlParse(url, slashesDenoteHost) {\n\t    if (url && url instanceof Url) return url;\n\t    const u = new Url();\n\t    u.parse(url, slashesDenoteHost);\n\t    return u;\n\t}\n\tUrl.prototype.parse = function(url, slashesDenoteHost) {\n\t    let lowerProto, hec, slashes;\n\t    let rest = url;\n\t    // trim before proceeding.\n\t    // This is to support parse stuff like \"  http://foo.com  \\n\"\n\t    rest = rest.trim();\n\t    if (!slashesDenoteHost && url.split('#').length === 1) {\n\t        // Try fast path regexp\n\t        const simplePath = simplePathPattern.exec(rest);\n\t        if (simplePath) {\n\t            this.pathname = simplePath[1];\n\t            if (simplePath[2]) {\n\t                this.search = simplePath[2];\n\t            }\n\t            return this;\n\t        }\n\t    }\n\t    let proto = protocolPattern.exec(rest);\n\t    if (proto) {\n\t        proto = proto[0];\n\t        lowerProto = proto.toLowerCase();\n\t        this.protocol = proto;\n\t        rest = rest.substr(proto.length);\n\t    }\n\t    // figure out if it's got a host\n\t    // user@server is *always* interpreted as a hostname, and url\n\t    // resolution will treat //foo/bar as host=foo,path=bar because that's\n\t    // how the browser resolves relative URLs.\n\t    /* eslint-disable-next-line no-useless-escape */ if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n\t        slashes = rest.substr(0, 2) === '//';\n\t        if (slashes && !(proto && hostlessProtocol[proto])) {\n\t            rest = rest.substr(2);\n\t            this.slashes = true;\n\t        }\n\t    }\n\t    if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {\n\t        // there's a hostname.\n\t        // the first instance of /, ?, ;, or # ends the host.\n\t        //\n\t        // If there is an @ in the hostname, then non-host chars *are* allowed\n\t        // to the left of the last @ sign, unless some host-ending character\n\t        // comes *before* the @-sign.\n\t        // URLs are obnoxious.\n\t        //\n\t        // ex:\n\t        // http://a@b@c/ => user:a@b host:c\n\t        // http://a@b?@c => user:a host:c path:/?@c\n\t        // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n\t        // Review our test case against browsers more comprehensively.\n\t        // find the first instance of any hostEndingChars\n\t        let hostEnd = -1;\n\t        for(let i = 0; i < hostEndingChars.length; i++){\n\t            hec = rest.indexOf(hostEndingChars[i]);\n\t            if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {\n\t                hostEnd = hec;\n\t            }\n\t        }\n\t        // at this point, either we have an explicit point where the\n\t        // auth portion cannot go past, or the last @ char is the decider.\n\t        let auth, atSign;\n\t        if (hostEnd === -1) {\n\t            // atSign can be anywhere.\n\t            atSign = rest.lastIndexOf('@');\n\t        } else {\n\t            // atSign must be in auth portion.\n\t            // http://a@b/c@d => host:b auth:a path:/c@d\n\t            atSign = rest.lastIndexOf('@', hostEnd);\n\t        }\n\t        // Now we have a portion which is definitely the auth.\n\t        // Pull that off.\n\t        if (atSign !== -1) {\n\t            auth = rest.slice(0, atSign);\n\t            rest = rest.slice(atSign + 1);\n\t            this.auth = auth;\n\t        }\n\t        // the host is the remaining to the left of the first non-host char\n\t        hostEnd = -1;\n\t        for(let i = 0; i < nonHostChars.length; i++){\n\t            hec = rest.indexOf(nonHostChars[i]);\n\t            if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {\n\t                hostEnd = hec;\n\t            }\n\t        }\n\t        // if we still have not hit it, then the entire thing is a host.\n\t        if (hostEnd === -1) {\n\t            hostEnd = rest.length;\n\t        }\n\t        if (rest[hostEnd - 1] === ':') {\n\t            hostEnd--;\n\t        }\n\t        const host = rest.slice(0, hostEnd);\n\t        rest = rest.slice(hostEnd);\n\t        // pull out port.\n\t        this.parseHost(host);\n\t        // we've indicated that there is a hostname,\n\t        // so even if it's empty, it has to be present.\n\t        this.hostname = this.hostname || '';\n\t        // if hostname begins with [ and ends with ]\n\t        // assume that it's an IPv6 address.\n\t        const ipv6Hostname = this.hostname[0] === '[' && this.hostname[this.hostname.length - 1] === ']';\n\t        // validate a little.\n\t        if (!ipv6Hostname) {\n\t            const hostparts = this.hostname.split(/\\./);\n\t            for(let i = 0, l = hostparts.length; i < l; i++){\n\t                const part = hostparts[i];\n\t                if (!part) {\n\t                    continue;\n\t                }\n\t                if (!part.match(hostnamePartPattern)) {\n\t                    let newpart = '';\n\t                    for(let j = 0, k = part.length; j < k; j++){\n\t                        if (part.charCodeAt(j) > 127) {\n\t                            // we replace non-ASCII char with a temporary placeholder\n\t                            // we need this to make sure size of hostname is not\n\t                            // broken by replacing non-ASCII by nothing\n\t                            newpart += 'x';\n\t                        } else {\n\t                            newpart += part[j];\n\t                        }\n\t                    }\n\t                    // we test again with ASCII char only\n\t                    if (!newpart.match(hostnamePartPattern)) {\n\t                        const validParts = hostparts.slice(0, i);\n\t                        const notHost = hostparts.slice(i + 1);\n\t                        const bit = part.match(hostnamePartStart);\n\t                        if (bit) {\n\t                            validParts.push(bit[1]);\n\t                            notHost.unshift(bit[2]);\n\t                        }\n\t                        if (notHost.length) {\n\t                            rest = notHost.join('.') + rest;\n\t                        }\n\t                        this.hostname = validParts.join('.');\n\t                        break;\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        if (this.hostname.length > hostnameMaxLen) {\n\t            this.hostname = '';\n\t        }\n\t        // strip [ and ] from the hostname\n\t        // the host field still retains them, though\n\t        if (ipv6Hostname) {\n\t            this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n\t        }\n\t    }\n\t    // chop off from the tail first.\n\t    const hash = rest.indexOf('#');\n\t    if (hash !== -1) {\n\t        // got a fragment string.\n\t        this.hash = rest.substr(hash);\n\t        rest = rest.slice(0, hash);\n\t    }\n\t    const qm = rest.indexOf('?');\n\t    if (qm !== -1) {\n\t        this.search = rest.substr(qm);\n\t        rest = rest.slice(0, qm);\n\t    }\n\t    if (rest) {\n\t        this.pathname = rest;\n\t    }\n\t    if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {\n\t        this.pathname = '';\n\t    }\n\t    return this;\n\t};\n\tUrl.prototype.parseHost = function(host) {\n\t    let port = portPattern.exec(host);\n\t    if (port) {\n\t        port = port[0];\n\t        if (port !== ':') {\n\t            this.port = port.substr(1);\n\t        }\n\t        host = host.substr(0, host.length - port.length);\n\t    }\n\t    if (host) {\n\t        this.hostname = host;\n\t    }\n\t};\n\n\tvar mdurl = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tdecode: decode$1,\n\t\tencode: encode$1,\n\t\tformat: format,\n\t\tparse: urlParse\n\t});\n\n\tvar Any = /[\\0-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\n\n\tvar Cc = /[\\0-\\x1F\\x7F-\\x9F]/;\n\n\tvar regex$1 = /[\\xAD\\u0600-\\u0605\\u061C\\u06DD\\u070F\\u0890\\u0891\\u08E2\\u180E\\u200B-\\u200F\\u202A-\\u202E\\u2060-\\u2064\\u2066-\\u206F\\uFEFF\\uFFF9-\\uFFFB]|\\uD804[\\uDCBD\\uDCCD]|\\uD80D[\\uDC30-\\uDC3F]|\\uD82F[\\uDCA0-\\uDCA3]|\\uD834[\\uDD73-\\uDD7A]|\\uDB40[\\uDC01\\uDC20-\\uDC7F]/;\n\n\tvar P = /[!-#%-\\*,-\\/:;\\?@\\[-\\]_\\{\\}\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1B7D\\u1B7E\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52-\\u2E5D\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]|\\uD800[\\uDD00-\\uDD02\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD803[\\uDEAD\\uDF55-\\uDF59\\uDF86-\\uDF89]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC8\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9]|\\uD805[\\uDC4B-\\uDC4F\\uDC5A\\uDC5B\\uDC5D\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDE60-\\uDE6C\\uDEB9\\uDF3C-\\uDF3E]|\\uD806[\\uDC3B\\uDD44-\\uDD46\\uDDE2\\uDE3F-\\uDE46\\uDE9A-\\uDE9C\\uDE9E-\\uDEA2\\uDF00-\\uDF09]|\\uD807[\\uDC41-\\uDC45\\uDC70\\uDC71\\uDEF7\\uDEF8\\uDF43-\\uDF4F\\uDFFF]|\\uD809[\\uDC70-\\uDC74]|\\uD80B[\\uDFF1\\uDFF2]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3B\\uDF44]|\\uD81B[\\uDE97-\\uDE9A\\uDFE2]|\\uD82F\\uDC9F|\\uD836[\\uDE87-\\uDE8B]|\\uD83A[\\uDD5E\\uDD5F]/;\n\n\tvar regex = /[\\$\\+<->\\^`\\|~\\xA2-\\xA6\\xA8\\xA9\\xAC\\xAE-\\xB1\\xB4\\xB8\\xD7\\xF7\\u02C2-\\u02C5\\u02D2-\\u02DF\\u02E5-\\u02EB\\u02ED\\u02EF-\\u02FF\\u0375\\u0384\\u0385\\u03F6\\u0482\\u058D-\\u058F\\u0606-\\u0608\\u060B\\u060E\\u060F\\u06DE\\u06E9\\u06FD\\u06FE\\u07F6\\u07FE\\u07FF\\u0888\\u09F2\\u09F3\\u09FA\\u09FB\\u0AF1\\u0B70\\u0BF3-\\u0BFA\\u0C7F\\u0D4F\\u0D79\\u0E3F\\u0F01-\\u0F03\\u0F13\\u0F15-\\u0F17\\u0F1A-\\u0F1F\\u0F34\\u0F36\\u0F38\\u0FBE-\\u0FC5\\u0FC7-\\u0FCC\\u0FCE\\u0FCF\\u0FD5-\\u0FD8\\u109E\\u109F\\u1390-\\u1399\\u166D\\u17DB\\u1940\\u19DE-\\u19FF\\u1B61-\\u1B6A\\u1B74-\\u1B7C\\u1FBD\\u1FBF-\\u1FC1\\u1FCD-\\u1FCF\\u1FDD-\\u1FDF\\u1FED-\\u1FEF\\u1FFD\\u1FFE\\u2044\\u2052\\u207A-\\u207C\\u208A-\\u208C\\u20A0-\\u20C0\\u2100\\u2101\\u2103-\\u2106\\u2108\\u2109\\u2114\\u2116-\\u2118\\u211E-\\u2123\\u2125\\u2127\\u2129\\u212E\\u213A\\u213B\\u2140-\\u2144\\u214A-\\u214D\\u214F\\u218A\\u218B\\u2190-\\u2307\\u230C-\\u2328\\u232B-\\u2426\\u2440-\\u244A\\u249C-\\u24E9\\u2500-\\u2767\\u2794-\\u27C4\\u27C7-\\u27E5\\u27F0-\\u2982\\u2999-\\u29D7\\u29DC-\\u29FB\\u29FE-\\u2B73\\u2B76-\\u2B95\\u2B97-\\u2BFF\\u2CE5-\\u2CEA\\u2E50\\u2E51\\u2E80-\\u2E99\\u2E9B-\\u2EF3\\u2F00-\\u2FD5\\u2FF0-\\u2FFF\\u3004\\u3012\\u3013\\u3020\\u3036\\u3037\\u303E\\u303F\\u309B\\u309C\\u3190\\u3191\\u3196-\\u319F\\u31C0-\\u31E3\\u31EF\\u3200-\\u321E\\u322A-\\u3247\\u3250\\u3260-\\u327F\\u328A-\\u32B0\\u32C0-\\u33FF\\u4DC0-\\u4DFF\\uA490-\\uA4C6\\uA700-\\uA716\\uA720\\uA721\\uA789\\uA78A\\uA828-\\uA82B\\uA836-\\uA839\\uAA77-\\uAA79\\uAB5B\\uAB6A\\uAB6B\\uFB29\\uFBB2-\\uFBC2\\uFD40-\\uFD4F\\uFDCF\\uFDFC-\\uFDFF\\uFE62\\uFE64-\\uFE66\\uFE69\\uFF04\\uFF0B\\uFF1C-\\uFF1E\\uFF3E\\uFF40\\uFF5C\\uFF5E\\uFFE0-\\uFFE6\\uFFE8-\\uFFEE\\uFFFC\\uFFFD]|\\uD800[\\uDD37-\\uDD3F\\uDD79-\\uDD89\\uDD8C-\\uDD8E\\uDD90-\\uDD9C\\uDDA0\\uDDD0-\\uDDFC]|\\uD802[\\uDC77\\uDC78\\uDEC8]|\\uD805\\uDF3F|\\uD807[\\uDFD5-\\uDFF1]|\\uD81A[\\uDF3C-\\uDF3F\\uDF45]|\\uD82F\\uDC9C|\\uD833[\\uDF50-\\uDFC3]|\\uD834[\\uDC00-\\uDCF5\\uDD00-\\uDD26\\uDD29-\\uDD64\\uDD6A-\\uDD6C\\uDD83\\uDD84\\uDD8C-\\uDDA9\\uDDAE-\\uDDEA\\uDE00-\\uDE41\\uDE45\\uDF00-\\uDF56]|\\uD835[\\uDEC1\\uDEDB\\uDEFB\\uDF15\\uDF35\\uDF4F\\uDF6F\\uDF89\\uDFA9\\uDFC3]|\\uD836[\\uDC00-\\uDDFF\\uDE37-\\uDE3A\\uDE6D-\\uDE74\\uDE76-\\uDE83\\uDE85\\uDE86]|\\uD838[\\uDD4F\\uDEFF]|\\uD83B[\\uDCAC\\uDCB0\\uDD2E\\uDEF0\\uDEF1]|\\uD83C[\\uDC00-\\uDC2B\\uDC30-\\uDC93\\uDCA0-\\uDCAE\\uDCB1-\\uDCBF\\uDCC1-\\uDCCF\\uDCD1-\\uDCF5\\uDD0D-\\uDDAD\\uDDE6-\\uDE02\\uDE10-\\uDE3B\\uDE40-\\uDE48\\uDE50\\uDE51\\uDE60-\\uDE65\\uDF00-\\uDFFF]|\\uD83D[\\uDC00-\\uDED7\\uDEDC-\\uDEEC\\uDEF0-\\uDEFC\\uDF00-\\uDF76\\uDF7B-\\uDFD9\\uDFE0-\\uDFEB\\uDFF0]|\\uD83E[\\uDC00-\\uDC0B\\uDC10-\\uDC47\\uDC50-\\uDC59\\uDC60-\\uDC87\\uDC90-\\uDCAD\\uDCB0\\uDCB1\\uDD00-\\uDE53\\uDE60-\\uDE6D\\uDE70-\\uDE7C\\uDE80-\\uDE88\\uDE90-\\uDEBD\\uDEBF-\\uDEC5\\uDECE-\\uDEDB\\uDEE0-\\uDEE8\\uDEF0-\\uDEF8\\uDF00-\\uDF92\\uDF94-\\uDFCA]/;\n\n\tvar Z = /[ \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]/;\n\n\tvar ucmicro = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tAny: Any,\n\t\tCc: Cc,\n\t\tCf: regex$1,\n\t\tP: P,\n\t\tS: regex,\n\t\tZ: Z\n\t});\n\n\t// Generated using scripts/write-decode-map.ts\n\tvar htmlDecodeTree = new Uint16Array(// prettier-ignore\n\t\"\\u1d41<\\xd5\\u0131\\u028a\\u049d\\u057b\\u05d0\\u0675\\u06de\\u07a2\\u07d6\\u080f\\u0a4a\\u0a91\\u0da1\\u0e6d\\u0f09\\u0f26\\u10ca\\u1228\\u12e1\\u1415\\u149d\\u14c3\\u14df\\u1525\\0\\0\\0\\0\\0\\0\\u156b\\u16cd\\u198d\\u1c12\\u1ddd\\u1f7e\\u2060\\u21b0\\u228d\\u23c0\\u23fb\\u2442\\u2824\\u2912\\u2d08\\u2e48\\u2fce\\u3016\\u32ba\\u3639\\u37ac\\u38fe\\u3a28\\u3a71\\u3ae0\\u3b2e\\u0800EMabcfglmnoprstu\\\\bfms\\x7f\\x84\\x8b\\x90\\x95\\x98\\xa6\\xb3\\xb9\\xc8\\xcflig\\u803b\\xc6\\u40c6P\\u803b&\\u4026cute\\u803b\\xc1\\u40c1reve;\\u4102\\u0100iyx}rc\\u803b\\xc2\\u40c2;\\u4410r;\\uc000\\ud835\\udd04rave\\u803b\\xc0\\u40c0pha;\\u4391acr;\\u4100d;\\u6a53\\u0100gp\\x9d\\xa1on;\\u4104f;\\uc000\\ud835\\udd38plyFunction;\\u6061ing\\u803b\\xc5\\u40c5\\u0100cs\\xbe\\xc3r;\\uc000\\ud835\\udc9cign;\\u6254ilde\\u803b\\xc3\\u40c3ml\\u803b\\xc4\\u40c4\\u0400aceforsu\\xe5\\xfb\\xfe\\u0117\\u011c\\u0122\\u0127\\u012a\\u0100cr\\xea\\xf2kslash;\\u6216\\u0176\\xf6\\xf8;\\u6ae7ed;\\u6306y;\\u4411\\u0180crt\\u0105\\u010b\\u0114ause;\\u6235noullis;\\u612ca;\\u4392r;\\uc000\\ud835\\udd05pf;\\uc000\\ud835\\udd39eve;\\u42d8c\\xf2\\u0113mpeq;\\u624e\\u0700HOacdefhilorsu\\u014d\\u0151\\u0156\\u0180\\u019e\\u01a2\\u01b5\\u01b7\\u01ba\\u01dc\\u0215\\u0273\\u0278\\u027ecy;\\u4427PY\\u803b\\xa9\\u40a9\\u0180cpy\\u015d\\u0162\\u017aute;\\u4106\\u0100;i\\u0167\\u0168\\u62d2talDifferentialD;\\u6145leys;\\u612d\\u0200aeio\\u0189\\u018e\\u0194\\u0198ron;\\u410cdil\\u803b\\xc7\\u40c7rc;\\u4108nint;\\u6230ot;\\u410a\\u0100dn\\u01a7\\u01adilla;\\u40b8terDot;\\u40b7\\xf2\\u017fi;\\u43a7rcle\\u0200DMPT\\u01c7\\u01cb\\u01d1\\u01d6ot;\\u6299inus;\\u6296lus;\\u6295imes;\\u6297o\\u0100cs\\u01e2\\u01f8kwiseContourIntegral;\\u6232eCurly\\u0100DQ\\u0203\\u020foubleQuote;\\u601duote;\\u6019\\u0200lnpu\\u021e\\u0228\\u0247\\u0255on\\u0100;e\\u0225\\u0226\\u6237;\\u6a74\\u0180git\\u022f\\u0236\\u023aruent;\\u6261nt;\\u622fourIntegral;\\u622e\\u0100fr\\u024c\\u024e;\\u6102oduct;\\u6210nterClockwiseContourIntegral;\\u6233oss;\\u6a2fcr;\\uc000\\ud835\\udc9ep\\u0100;C\\u0284\\u0285\\u62d3ap;\\u624d\\u0580DJSZacefios\\u02a0\\u02ac\\u02b0\\u02b4\\u02b8\\u02cb\\u02d7\\u02e1\\u02e6\\u0333\\u048d\\u0100;o\\u0179\\u02a5trahd;\\u6911cy;\\u4402cy;\\u4405cy;\\u440f\\u0180grs\\u02bf\\u02c4\\u02c7ger;\\u6021r;\\u61a1hv;\\u6ae4\\u0100ay\\u02d0\\u02d5ron;\\u410e;\\u4414l\\u0100;t\\u02dd\\u02de\\u6207a;\\u4394r;\\uc000\\ud835\\udd07\\u0100af\\u02eb\\u0327\\u0100cm\\u02f0\\u0322ritical\\u0200ADGT\\u0300\\u0306\\u0316\\u031ccute;\\u40b4o\\u0174\\u030b\\u030d;\\u42d9bleAcute;\\u42ddrave;\\u4060ilde;\\u42dcond;\\u62c4ferentialD;\\u6146\\u0470\\u033d\\0\\0\\0\\u0342\\u0354\\0\\u0405f;\\uc000\\ud835\\udd3b\\u0180;DE\\u0348\\u0349\\u034d\\u40a8ot;\\u60dcqual;\\u6250ble\\u0300CDLRUV\\u0363\\u0372\\u0382\\u03cf\\u03e2\\u03f8ontourIntegra\\xec\\u0239o\\u0274\\u0379\\0\\0\\u037b\\xbb\\u0349nArrow;\\u61d3\\u0100eo\\u0387\\u03a4ft\\u0180ART\\u0390\\u0396\\u03a1rrow;\\u61d0ightArrow;\\u61d4e\\xe5\\u02cang\\u0100LR\\u03ab\\u03c4eft\\u0100AR\\u03b3\\u03b9rrow;\\u67f8ightArrow;\\u67faightArrow;\\u67f9ight\\u0100AT\\u03d8\\u03derrow;\\u61d2ee;\\u62a8p\\u0241\\u03e9\\0\\0\\u03efrrow;\\u61d1ownArrow;\\u61d5erticalBar;\\u6225n\\u0300ABLRTa\\u0412\\u042a\\u0430\\u045e\\u047f\\u037crrow\\u0180;BU\\u041d\\u041e\\u0422\\u6193ar;\\u6913pArrow;\\u61f5reve;\\u4311eft\\u02d2\\u043a\\0\\u0446\\0\\u0450ightVector;\\u6950eeVector;\\u695eector\\u0100;B\\u0459\\u045a\\u61bdar;\\u6956ight\\u01d4\\u0467\\0\\u0471eeVector;\\u695fector\\u0100;B\\u047a\\u047b\\u61c1ar;\\u6957ee\\u0100;A\\u0486\\u0487\\u62a4rrow;\\u61a7\\u0100ct\\u0492\\u0497r;\\uc000\\ud835\\udc9frok;\\u4110\\u0800NTacdfglmopqstux\\u04bd\\u04c0\\u04c4\\u04cb\\u04de\\u04e2\\u04e7\\u04ee\\u04f5\\u0521\\u052f\\u0536\\u0552\\u055d\\u0560\\u0565G;\\u414aH\\u803b\\xd0\\u40d0cute\\u803b\\xc9\\u40c9\\u0180aiy\\u04d2\\u04d7\\u04dcron;\\u411arc\\u803b\\xca\\u40ca;\\u442dot;\\u4116r;\\uc000\\ud835\\udd08rave\\u803b\\xc8\\u40c8ement;\\u6208\\u0100ap\\u04fa\\u04fecr;\\u4112ty\\u0253\\u0506\\0\\0\\u0512mallSquare;\\u65fberySmallSquare;\\u65ab\\u0100gp\\u0526\\u052aon;\\u4118f;\\uc000\\ud835\\udd3csilon;\\u4395u\\u0100ai\\u053c\\u0549l\\u0100;T\\u0542\\u0543\\u6a75ilde;\\u6242librium;\\u61cc\\u0100ci\\u0557\\u055ar;\\u6130m;\\u6a73a;\\u4397ml\\u803b\\xcb\\u40cb\\u0100ip\\u056a\\u056fsts;\\u6203onentialE;\\u6147\\u0280cfios\\u0585\\u0588\\u058d\\u05b2\\u05ccy;\\u4424r;\\uc000\\ud835\\udd09lled\\u0253\\u0597\\0\\0\\u05a3mallSquare;\\u65fcerySmallSquare;\\u65aa\\u0370\\u05ba\\0\\u05bf\\0\\0\\u05c4f;\\uc000\\ud835\\udd3dAll;\\u6200riertrf;\\u6131c\\xf2\\u05cb\\u0600JTabcdfgorst\\u05e8\\u05ec\\u05ef\\u05fa\\u0600\\u0612\\u0616\\u061b\\u061d\\u0623\\u066c\\u0672cy;\\u4403\\u803b>\\u403emma\\u0100;d\\u05f7\\u05f8\\u4393;\\u43dcreve;\\u411e\\u0180eiy\\u0607\\u060c\\u0610dil;\\u4122rc;\\u411c;\\u4413ot;\\u4120r;\\uc000\\ud835\\udd0a;\\u62d9pf;\\uc000\\ud835\\udd3eeater\\u0300EFGLST\\u0635\\u0644\\u064e\\u0656\\u065b\\u0666qual\\u0100;L\\u063e\\u063f\\u6265ess;\\u62dbullEqual;\\u6267reater;\\u6aa2ess;\\u6277lantEqual;\\u6a7eilde;\\u6273cr;\\uc000\\ud835\\udca2;\\u626b\\u0400Aacfiosu\\u0685\\u068b\\u0696\\u069b\\u069e\\u06aa\\u06be\\u06caRDcy;\\u442a\\u0100ct\\u0690\\u0694ek;\\u42c7;\\u405eirc;\\u4124r;\\u610clbertSpace;\\u610b\\u01f0\\u06af\\0\\u06b2f;\\u610dizontalLine;\\u6500\\u0100ct\\u06c3\\u06c5\\xf2\\u06a9rok;\\u4126mp\\u0144\\u06d0\\u06d8ownHum\\xf0\\u012fqual;\\u624f\\u0700EJOacdfgmnostu\\u06fa\\u06fe\\u0703\\u0707\\u070e\\u071a\\u071e\\u0721\\u0728\\u0744\\u0778\\u078b\\u078f\\u0795cy;\\u4415lig;\\u4132cy;\\u4401cute\\u803b\\xcd\\u40cd\\u0100iy\\u0713\\u0718rc\\u803b\\xce\\u40ce;\\u4418ot;\\u4130r;\\u6111rave\\u803b\\xcc\\u40cc\\u0180;ap\\u0720\\u072f\\u073f\\u0100cg\\u0734\\u0737r;\\u412ainaryI;\\u6148lie\\xf3\\u03dd\\u01f4\\u0749\\0\\u0762\\u0100;e\\u074d\\u074e\\u622c\\u0100gr\\u0753\\u0758ral;\\u622bsection;\\u62c2isible\\u0100CT\\u076c\\u0772omma;\\u6063imes;\\u6062\\u0180gpt\\u077f\\u0783\\u0788on;\\u412ef;\\uc000\\ud835\\udd40a;\\u4399cr;\\u6110ilde;\\u4128\\u01eb\\u079a\\0\\u079ecy;\\u4406l\\u803b\\xcf\\u40cf\\u0280cfosu\\u07ac\\u07b7\\u07bc\\u07c2\\u07d0\\u0100iy\\u07b1\\u07b5rc;\\u4134;\\u4419r;\\uc000\\ud835\\udd0dpf;\\uc000\\ud835\\udd41\\u01e3\\u07c7\\0\\u07ccr;\\uc000\\ud835\\udca5rcy;\\u4408kcy;\\u4404\\u0380HJacfos\\u07e4\\u07e8\\u07ec\\u07f1\\u07fd\\u0802\\u0808cy;\\u4425cy;\\u440cppa;\\u439a\\u0100ey\\u07f6\\u07fbdil;\\u4136;\\u441ar;\\uc000\\ud835\\udd0epf;\\uc000\\ud835\\udd42cr;\\uc000\\ud835\\udca6\\u0580JTaceflmost\\u0825\\u0829\\u082c\\u0850\\u0863\\u09b3\\u09b8\\u09c7\\u09cd\\u0a37\\u0a47cy;\\u4409\\u803b<\\u403c\\u0280cmnpr\\u0837\\u083c\\u0841\\u0844\\u084dute;\\u4139bda;\\u439bg;\\u67ealacetrf;\\u6112r;\\u619e\\u0180aey\\u0857\\u085c\\u0861ron;\\u413ddil;\\u413b;\\u441b\\u0100fs\\u0868\\u0970t\\u0500ACDFRTUVar\\u087e\\u08a9\\u08b1\\u08e0\\u08e6\\u08fc\\u092f\\u095b\\u0390\\u096a\\u0100nr\\u0883\\u088fgleBracket;\\u67e8row\\u0180;BR\\u0899\\u089a\\u089e\\u6190ar;\\u61e4ightArrow;\\u61c6eiling;\\u6308o\\u01f5\\u08b7\\0\\u08c3bleBracket;\\u67e6n\\u01d4\\u08c8\\0\\u08d2eeVector;\\u6961ector\\u0100;B\\u08db\\u08dc\\u61c3ar;\\u6959loor;\\u630aight\\u0100AV\\u08ef\\u08f5rrow;\\u6194ector;\\u694e\\u0100er\\u0901\\u0917e\\u0180;AV\\u0909\\u090a\\u0910\\u62a3rrow;\\u61a4ector;\\u695aiangle\\u0180;BE\\u0924\\u0925\\u0929\\u62b2ar;\\u69cfqual;\\u62b4p\\u0180DTV\\u0937\\u0942\\u094cownVector;\\u6951eeVector;\\u6960ector\\u0100;B\\u0956\\u0957\\u61bfar;\\u6958ector\\u0100;B\\u0965\\u0966\\u61bcar;\\u6952ight\\xe1\\u039cs\\u0300EFGLST\\u097e\\u098b\\u0995\\u099d\\u09a2\\u09adqualGreater;\\u62daullEqual;\\u6266reater;\\u6276ess;\\u6aa1lantEqual;\\u6a7dilde;\\u6272r;\\uc000\\ud835\\udd0f\\u0100;e\\u09bd\\u09be\\u62d8ftarrow;\\u61daidot;\\u413f\\u0180npw\\u09d4\\u0a16\\u0a1bg\\u0200LRlr\\u09de\\u09f7\\u0a02\\u0a10eft\\u0100AR\\u09e6\\u09ecrrow;\\u67f5ightArrow;\\u67f7ightArrow;\\u67f6eft\\u0100ar\\u03b3\\u0a0aight\\xe1\\u03bfight\\xe1\\u03caf;\\uc000\\ud835\\udd43er\\u0100LR\\u0a22\\u0a2ceftArrow;\\u6199ightArrow;\\u6198\\u0180cht\\u0a3e\\u0a40\\u0a42\\xf2\\u084c;\\u61b0rok;\\u4141;\\u626a\\u0400acefiosu\\u0a5a\\u0a5d\\u0a60\\u0a77\\u0a7c\\u0a85\\u0a8b\\u0a8ep;\\u6905y;\\u441c\\u0100dl\\u0a65\\u0a6fiumSpace;\\u605flintrf;\\u6133r;\\uc000\\ud835\\udd10nusPlus;\\u6213pf;\\uc000\\ud835\\udd44c\\xf2\\u0a76;\\u439c\\u0480Jacefostu\\u0aa3\\u0aa7\\u0aad\\u0ac0\\u0b14\\u0b19\\u0d91\\u0d97\\u0d9ecy;\\u440acute;\\u4143\\u0180aey\\u0ab4\\u0ab9\\u0aberon;\\u4147dil;\\u4145;\\u441d\\u0180gsw\\u0ac7\\u0af0\\u0b0eative\\u0180MTV\\u0ad3\\u0adf\\u0ae8ediumSpace;\\u600bhi\\u0100cn\\u0ae6\\u0ad8\\xeb\\u0ad9eryThi\\xee\\u0ad9ted\\u0100GL\\u0af8\\u0b06reaterGreate\\xf2\\u0673essLes\\xf3\\u0a48Line;\\u400ar;\\uc000\\ud835\\udd11\\u0200Bnpt\\u0b22\\u0b28\\u0b37\\u0b3areak;\\u6060BreakingSpace;\\u40a0f;\\u6115\\u0680;CDEGHLNPRSTV\\u0b55\\u0b56\\u0b6a\\u0b7c\\u0ba1\\u0beb\\u0c04\\u0c5e\\u0c84\\u0ca6\\u0cd8\\u0d61\\u0d85\\u6aec\\u0100ou\\u0b5b\\u0b64ngruent;\\u6262pCap;\\u626doubleVerticalBar;\\u6226\\u0180lqx\\u0b83\\u0b8a\\u0b9bement;\\u6209ual\\u0100;T\\u0b92\\u0b93\\u6260ilde;\\uc000\\u2242\\u0338ists;\\u6204reater\\u0380;EFGLST\\u0bb6\\u0bb7\\u0bbd\\u0bc9\\u0bd3\\u0bd8\\u0be5\\u626fqual;\\u6271ullEqual;\\uc000\\u2267\\u0338reater;\\uc000\\u226b\\u0338ess;\\u6279lantEqual;\\uc000\\u2a7e\\u0338ilde;\\u6275ump\\u0144\\u0bf2\\u0bfdownHump;\\uc000\\u224e\\u0338qual;\\uc000\\u224f\\u0338e\\u0100fs\\u0c0a\\u0c27tTriangle\\u0180;BE\\u0c1a\\u0c1b\\u0c21\\u62eaar;\\uc000\\u29cf\\u0338qual;\\u62ecs\\u0300;EGLST\\u0c35\\u0c36\\u0c3c\\u0c44\\u0c4b\\u0c58\\u626equal;\\u6270reater;\\u6278ess;\\uc000\\u226a\\u0338lantEqual;\\uc000\\u2a7d\\u0338ilde;\\u6274ested\\u0100GL\\u0c68\\u0c79reaterGreater;\\uc000\\u2aa2\\u0338essLess;\\uc000\\u2aa1\\u0338recedes\\u0180;ES\\u0c92\\u0c93\\u0c9b\\u6280qual;\\uc000\\u2aaf\\u0338lantEqual;\\u62e0\\u0100ei\\u0cab\\u0cb9verseElement;\\u620cghtTriangle\\u0180;BE\\u0ccb\\u0ccc\\u0cd2\\u62ebar;\\uc000\\u29d0\\u0338qual;\\u62ed\\u0100qu\\u0cdd\\u0d0cuareSu\\u0100bp\\u0ce8\\u0cf9set\\u0100;E\\u0cf0\\u0cf3\\uc000\\u228f\\u0338qual;\\u62e2erset\\u0100;E\\u0d03\\u0d06\\uc000\\u2290\\u0338qual;\\u62e3\\u0180bcp\\u0d13\\u0d24\\u0d4eset\\u0100;E\\u0d1b\\u0d1e\\uc000\\u2282\\u20d2qual;\\u6288ceeds\\u0200;EST\\u0d32\\u0d33\\u0d3b\\u0d46\\u6281qual;\\uc000\\u2ab0\\u0338lantEqual;\\u62e1ilde;\\uc000\\u227f\\u0338erset\\u0100;E\\u0d58\\u0d5b\\uc000\\u2283\\u20d2qual;\\u6289ilde\\u0200;EFT\\u0d6e\\u0d6f\\u0d75\\u0d7f\\u6241qual;\\u6244ullEqual;\\u6247ilde;\\u6249erticalBar;\\u6224cr;\\uc000\\ud835\\udca9ilde\\u803b\\xd1\\u40d1;\\u439d\\u0700Eacdfgmoprstuv\\u0dbd\\u0dc2\\u0dc9\\u0dd5\\u0ddb\\u0de0\\u0de7\\u0dfc\\u0e02\\u0e20\\u0e22\\u0e32\\u0e3f\\u0e44lig;\\u4152cute\\u803b\\xd3\\u40d3\\u0100iy\\u0dce\\u0dd3rc\\u803b\\xd4\\u40d4;\\u441eblac;\\u4150r;\\uc000\\ud835\\udd12rave\\u803b\\xd2\\u40d2\\u0180aei\\u0dee\\u0df2\\u0df6cr;\\u414cga;\\u43a9cron;\\u439fpf;\\uc000\\ud835\\udd46enCurly\\u0100DQ\\u0e0e\\u0e1aoubleQuote;\\u601cuote;\\u6018;\\u6a54\\u0100cl\\u0e27\\u0e2cr;\\uc000\\ud835\\udcaaash\\u803b\\xd8\\u40d8i\\u016c\\u0e37\\u0e3cde\\u803b\\xd5\\u40d5es;\\u6a37ml\\u803b\\xd6\\u40d6er\\u0100BP\\u0e4b\\u0e60\\u0100ar\\u0e50\\u0e53r;\\u603eac\\u0100ek\\u0e5a\\u0e5c;\\u63deet;\\u63b4arenthesis;\\u63dc\\u0480acfhilors\\u0e7f\\u0e87\\u0e8a\\u0e8f\\u0e92\\u0e94\\u0e9d\\u0eb0\\u0efcrtialD;\\u6202y;\\u441fr;\\uc000\\ud835\\udd13i;\\u43a6;\\u43a0usMinus;\\u40b1\\u0100ip\\u0ea2\\u0eadncareplan\\xe5\\u069df;\\u6119\\u0200;eio\\u0eb9\\u0eba\\u0ee0\\u0ee4\\u6abbcedes\\u0200;EST\\u0ec8\\u0ec9\\u0ecf\\u0eda\\u627aqual;\\u6aaflantEqual;\\u627cilde;\\u627eme;\\u6033\\u0100dp\\u0ee9\\u0eeeuct;\\u620fortion\\u0100;a\\u0225\\u0ef9l;\\u621d\\u0100ci\\u0f01\\u0f06r;\\uc000\\ud835\\udcab;\\u43a8\\u0200Ufos\\u0f11\\u0f16\\u0f1b\\u0f1fOT\\u803b\\\"\\u4022r;\\uc000\\ud835\\udd14pf;\\u611acr;\\uc000\\ud835\\udcac\\u0600BEacefhiorsu\\u0f3e\\u0f43\\u0f47\\u0f60\\u0f73\\u0fa7\\u0faa\\u0fad\\u1096\\u10a9\\u10b4\\u10bearr;\\u6910G\\u803b\\xae\\u40ae\\u0180cnr\\u0f4e\\u0f53\\u0f56ute;\\u4154g;\\u67ebr\\u0100;t\\u0f5c\\u0f5d\\u61a0l;\\u6916\\u0180aey\\u0f67\\u0f6c\\u0f71ron;\\u4158dil;\\u4156;\\u4420\\u0100;v\\u0f78\\u0f79\\u611cerse\\u0100EU\\u0f82\\u0f99\\u0100lq\\u0f87\\u0f8eement;\\u620builibrium;\\u61cbpEquilibrium;\\u696fr\\xbb\\u0f79o;\\u43a1ght\\u0400ACDFTUVa\\u0fc1\\u0feb\\u0ff3\\u1022\\u1028\\u105b\\u1087\\u03d8\\u0100nr\\u0fc6\\u0fd2gleBracket;\\u67e9row\\u0180;BL\\u0fdc\\u0fdd\\u0fe1\\u6192ar;\\u61e5eftArrow;\\u61c4eiling;\\u6309o\\u01f5\\u0ff9\\0\\u1005bleBracket;\\u67e7n\\u01d4\\u100a\\0\\u1014eeVector;\\u695dector\\u0100;B\\u101d\\u101e\\u61c2ar;\\u6955loor;\\u630b\\u0100er\\u102d\\u1043e\\u0180;AV\\u1035\\u1036\\u103c\\u62a2rrow;\\u61a6ector;\\u695biangle\\u0180;BE\\u1050\\u1051\\u1055\\u62b3ar;\\u69d0qual;\\u62b5p\\u0180DTV\\u1063\\u106e\\u1078ownVector;\\u694feeVector;\\u695cector\\u0100;B\\u1082\\u1083\\u61bear;\\u6954ector\\u0100;B\\u1091\\u1092\\u61c0ar;\\u6953\\u0100pu\\u109b\\u109ef;\\u611dndImplies;\\u6970ightarrow;\\u61db\\u0100ch\\u10b9\\u10bcr;\\u611b;\\u61b1leDelayed;\\u69f4\\u0680HOacfhimoqstu\\u10e4\\u10f1\\u10f7\\u10fd\\u1119\\u111e\\u1151\\u1156\\u1161\\u1167\\u11b5\\u11bb\\u11bf\\u0100Cc\\u10e9\\u10eeHcy;\\u4429y;\\u4428FTcy;\\u442ccute;\\u415a\\u0280;aeiy\\u1108\\u1109\\u110e\\u1113\\u1117\\u6abcron;\\u4160dil;\\u415erc;\\u415c;\\u4421r;\\uc000\\ud835\\udd16ort\\u0200DLRU\\u112a\\u1134\\u113e\\u1149ownArrow\\xbb\\u041eeftArrow\\xbb\\u089aightArrow\\xbb\\u0fddpArrow;\\u6191gma;\\u43a3allCircle;\\u6218pf;\\uc000\\ud835\\udd4a\\u0272\\u116d\\0\\0\\u1170t;\\u621aare\\u0200;ISU\\u117b\\u117c\\u1189\\u11af\\u65a1ntersection;\\u6293u\\u0100bp\\u118f\\u119eset\\u0100;E\\u1197\\u1198\\u628fqual;\\u6291erset\\u0100;E\\u11a8\\u11a9\\u6290qual;\\u6292nion;\\u6294cr;\\uc000\\ud835\\udcaear;\\u62c6\\u0200bcmp\\u11c8\\u11db\\u1209\\u120b\\u0100;s\\u11cd\\u11ce\\u62d0et\\u0100;E\\u11cd\\u11d5qual;\\u6286\\u0100ch\\u11e0\\u1205eeds\\u0200;EST\\u11ed\\u11ee\\u11f4\\u11ff\\u627bqual;\\u6ab0lantEqual;\\u627dilde;\\u627fTh\\xe1\\u0f8c;\\u6211\\u0180;es\\u1212\\u1213\\u1223\\u62d1rset\\u0100;E\\u121c\\u121d\\u6283qual;\\u6287et\\xbb\\u1213\\u0580HRSacfhiors\\u123e\\u1244\\u1249\\u1255\\u125e\\u1271\\u1276\\u129f\\u12c2\\u12c8\\u12d1ORN\\u803b\\xde\\u40deADE;\\u6122\\u0100Hc\\u124e\\u1252cy;\\u440by;\\u4426\\u0100bu\\u125a\\u125c;\\u4009;\\u43a4\\u0180aey\\u1265\\u126a\\u126fron;\\u4164dil;\\u4162;\\u4422r;\\uc000\\ud835\\udd17\\u0100ei\\u127b\\u1289\\u01f2\\u1280\\0\\u1287efore;\\u6234a;\\u4398\\u0100cn\\u128e\\u1298kSpace;\\uc000\\u205f\\u200aSpace;\\u6009lde\\u0200;EFT\\u12ab\\u12ac\\u12b2\\u12bc\\u623cqual;\\u6243ullEqual;\\u6245ilde;\\u6248pf;\\uc000\\ud835\\udd4bipleDot;\\u60db\\u0100ct\\u12d6\\u12dbr;\\uc000\\ud835\\udcafrok;\\u4166\\u0ae1\\u12f7\\u130e\\u131a\\u1326\\0\\u132c\\u1331\\0\\0\\0\\0\\0\\u1338\\u133d\\u1377\\u1385\\0\\u13ff\\u1404\\u140a\\u1410\\u0100cr\\u12fb\\u1301ute\\u803b\\xda\\u40dar\\u0100;o\\u1307\\u1308\\u619fcir;\\u6949r\\u01e3\\u1313\\0\\u1316y;\\u440eve;\\u416c\\u0100iy\\u131e\\u1323rc\\u803b\\xdb\\u40db;\\u4423blac;\\u4170r;\\uc000\\ud835\\udd18rave\\u803b\\xd9\\u40d9acr;\\u416a\\u0100di\\u1341\\u1369er\\u0100BP\\u1348\\u135d\\u0100ar\\u134d\\u1350r;\\u405fac\\u0100ek\\u1357\\u1359;\\u63dfet;\\u63b5arenthesis;\\u63ddon\\u0100;P\\u1370\\u1371\\u62c3lus;\\u628e\\u0100gp\\u137b\\u137fon;\\u4172f;\\uc000\\ud835\\udd4c\\u0400ADETadps\\u1395\\u13ae\\u13b8\\u13c4\\u03e8\\u13d2\\u13d7\\u13f3rrow\\u0180;BD\\u1150\\u13a0\\u13a4ar;\\u6912ownArrow;\\u61c5ownArrow;\\u6195quilibrium;\\u696eee\\u0100;A\\u13cb\\u13cc\\u62a5rrow;\\u61a5own\\xe1\\u03f3er\\u0100LR\\u13de\\u13e8eftArrow;\\u6196ightArrow;\\u6197i\\u0100;l\\u13f9\\u13fa\\u43d2on;\\u43a5ing;\\u416ecr;\\uc000\\ud835\\udcb0ilde;\\u4168ml\\u803b\\xdc\\u40dc\\u0480Dbcdefosv\\u1427\\u142c\\u1430\\u1433\\u143e\\u1485\\u148a\\u1490\\u1496ash;\\u62abar;\\u6aeby;\\u4412ash\\u0100;l\\u143b\\u143c\\u62a9;\\u6ae6\\u0100er\\u1443\\u1445;\\u62c1\\u0180bty\\u144c\\u1450\\u147aar;\\u6016\\u0100;i\\u144f\\u1455cal\\u0200BLST\\u1461\\u1465\\u146a\\u1474ar;\\u6223ine;\\u407ceparator;\\u6758ilde;\\u6240ThinSpace;\\u600ar;\\uc000\\ud835\\udd19pf;\\uc000\\ud835\\udd4dcr;\\uc000\\ud835\\udcb1dash;\\u62aa\\u0280cefos\\u14a7\\u14ac\\u14b1\\u14b6\\u14bcirc;\\u4174dge;\\u62c0r;\\uc000\\ud835\\udd1apf;\\uc000\\ud835\\udd4ecr;\\uc000\\ud835\\udcb2\\u0200fios\\u14cb\\u14d0\\u14d2\\u14d8r;\\uc000\\ud835\\udd1b;\\u439epf;\\uc000\\ud835\\udd4fcr;\\uc000\\ud835\\udcb3\\u0480AIUacfosu\\u14f1\\u14f5\\u14f9\\u14fd\\u1504\\u150f\\u1514\\u151a\\u1520cy;\\u442fcy;\\u4407cy;\\u442ecute\\u803b\\xdd\\u40dd\\u0100iy\\u1509\\u150drc;\\u4176;\\u442br;\\uc000\\ud835\\udd1cpf;\\uc000\\ud835\\udd50cr;\\uc000\\ud835\\udcb4ml;\\u4178\\u0400Hacdefos\\u1535\\u1539\\u153f\\u154b\\u154f\\u155d\\u1560\\u1564cy;\\u4416cute;\\u4179\\u0100ay\\u1544\\u1549ron;\\u417d;\\u4417ot;\\u417b\\u01f2\\u1554\\0\\u155boWidt\\xe8\\u0ad9a;\\u4396r;\\u6128pf;\\u6124cr;\\uc000\\ud835\\udcb5\\u0be1\\u1583\\u158a\\u1590\\0\\u15b0\\u15b6\\u15bf\\0\\0\\0\\0\\u15c6\\u15db\\u15eb\\u165f\\u166d\\0\\u1695\\u169b\\u16b2\\u16b9\\0\\u16becute\\u803b\\xe1\\u40e1reve;\\u4103\\u0300;Ediuy\\u159c\\u159d\\u15a1\\u15a3\\u15a8\\u15ad\\u623e;\\uc000\\u223e\\u0333;\\u623frc\\u803b\\xe2\\u40e2te\\u80bb\\xb4\\u0306;\\u4430lig\\u803b\\xe6\\u40e6\\u0100;r\\xb2\\u15ba;\\uc000\\ud835\\udd1erave\\u803b\\xe0\\u40e0\\u0100ep\\u15ca\\u15d6\\u0100fp\\u15cf\\u15d4sym;\\u6135\\xe8\\u15d3ha;\\u43b1\\u0100ap\\u15dfc\\u0100cl\\u15e4\\u15e7r;\\u4101g;\\u6a3f\\u0264\\u15f0\\0\\0\\u160a\\u0280;adsv\\u15fa\\u15fb\\u15ff\\u1601\\u1607\\u6227nd;\\u6a55;\\u6a5clope;\\u6a58;\\u6a5a\\u0380;elmrsz\\u1618\\u1619\\u161b\\u161e\\u163f\\u164f\\u1659\\u6220;\\u69a4e\\xbb\\u1619sd\\u0100;a\\u1625\\u1626\\u6221\\u0461\\u1630\\u1632\\u1634\\u1636\\u1638\\u163a\\u163c\\u163e;\\u69a8;\\u69a9;\\u69aa;\\u69ab;\\u69ac;\\u69ad;\\u69ae;\\u69aft\\u0100;v\\u1645\\u1646\\u621fb\\u0100;d\\u164c\\u164d\\u62be;\\u699d\\u0100pt\\u1654\\u1657h;\\u6222\\xbb\\xb9arr;\\u637c\\u0100gp\\u1663\\u1667on;\\u4105f;\\uc000\\ud835\\udd52\\u0380;Eaeiop\\u12c1\\u167b\\u167d\\u1682\\u1684\\u1687\\u168a;\\u6a70cir;\\u6a6f;\\u624ad;\\u624bs;\\u4027rox\\u0100;e\\u12c1\\u1692\\xf1\\u1683ing\\u803b\\xe5\\u40e5\\u0180cty\\u16a1\\u16a6\\u16a8r;\\uc000\\ud835\\udcb6;\\u402amp\\u0100;e\\u12c1\\u16af\\xf1\\u0288ilde\\u803b\\xe3\\u40e3ml\\u803b\\xe4\\u40e4\\u0100ci\\u16c2\\u16c8onin\\xf4\\u0272nt;\\u6a11\\u0800Nabcdefiklnoprsu\\u16ed\\u16f1\\u1730\\u173c\\u1743\\u1748\\u1778\\u177d\\u17e0\\u17e6\\u1839\\u1850\\u170d\\u193d\\u1948\\u1970ot;\\u6aed\\u0100cr\\u16f6\\u171ek\\u0200ceps\\u1700\\u1705\\u170d\\u1713ong;\\u624cpsilon;\\u43f6rime;\\u6035im\\u0100;e\\u171a\\u171b\\u623dq;\\u62cd\\u0176\\u1722\\u1726ee;\\u62bded\\u0100;g\\u172c\\u172d\\u6305e\\xbb\\u172drk\\u0100;t\\u135c\\u1737brk;\\u63b6\\u0100oy\\u1701\\u1741;\\u4431quo;\\u601e\\u0280cmprt\\u1753\\u175b\\u1761\\u1764\\u1768aus\\u0100;e\\u010a\\u0109ptyv;\\u69b0s\\xe9\\u170cno\\xf5\\u0113\\u0180ahw\\u176f\\u1771\\u1773;\\u43b2;\\u6136een;\\u626cr;\\uc000\\ud835\\udd1fg\\u0380costuvw\\u178d\\u179d\\u17b3\\u17c1\\u17d5\\u17db\\u17de\\u0180aiu\\u1794\\u1796\\u179a\\xf0\\u0760rc;\\u65efp\\xbb\\u1371\\u0180dpt\\u17a4\\u17a8\\u17adot;\\u6a00lus;\\u6a01imes;\\u6a02\\u0271\\u17b9\\0\\0\\u17becup;\\u6a06ar;\\u6605riangle\\u0100du\\u17cd\\u17d2own;\\u65bdp;\\u65b3plus;\\u6a04e\\xe5\\u1444\\xe5\\u14adarow;\\u690d\\u0180ako\\u17ed\\u1826\\u1835\\u0100cn\\u17f2\\u1823k\\u0180lst\\u17fa\\u05ab\\u1802ozenge;\\u69ebriangle\\u0200;dlr\\u1812\\u1813\\u1818\\u181d\\u65b4own;\\u65beeft;\\u65c2ight;\\u65b8k;\\u6423\\u01b1\\u182b\\0\\u1833\\u01b2\\u182f\\0\\u1831;\\u6592;\\u65914;\\u6593ck;\\u6588\\u0100eo\\u183e\\u184d\\u0100;q\\u1843\\u1846\\uc000=\\u20e5uiv;\\uc000\\u2261\\u20e5t;\\u6310\\u0200ptwx\\u1859\\u185e\\u1867\\u186cf;\\uc000\\ud835\\udd53\\u0100;t\\u13cb\\u1863om\\xbb\\u13cctie;\\u62c8\\u0600DHUVbdhmptuv\\u1885\\u1896\\u18aa\\u18bb\\u18d7\\u18db\\u18ec\\u18ff\\u1905\\u190a\\u1910\\u1921\\u0200LRlr\\u188e\\u1890\\u1892\\u1894;\\u6557;\\u6554;\\u6556;\\u6553\\u0280;DUdu\\u18a1\\u18a2\\u18a4\\u18a6\\u18a8\\u6550;\\u6566;\\u6569;\\u6564;\\u6567\\u0200LRlr\\u18b3\\u18b5\\u18b7\\u18b9;\\u655d;\\u655a;\\u655c;\\u6559\\u0380;HLRhlr\\u18ca\\u18cb\\u18cd\\u18cf\\u18d1\\u18d3\\u18d5\\u6551;\\u656c;\\u6563;\\u6560;\\u656b;\\u6562;\\u655fox;\\u69c9\\u0200LRlr\\u18e4\\u18e6\\u18e8\\u18ea;\\u6555;\\u6552;\\u6510;\\u650c\\u0280;DUdu\\u06bd\\u18f7\\u18f9\\u18fb\\u18fd;\\u6565;\\u6568;\\u652c;\\u6534inus;\\u629flus;\\u629eimes;\\u62a0\\u0200LRlr\\u1919\\u191b\\u191d\\u191f;\\u655b;\\u6558;\\u6518;\\u6514\\u0380;HLRhlr\\u1930\\u1931\\u1933\\u1935\\u1937\\u1939\\u193b\\u6502;\\u656a;\\u6561;\\u655e;\\u653c;\\u6524;\\u651c\\u0100ev\\u0123\\u1942bar\\u803b\\xa6\\u40a6\\u0200ceio\\u1951\\u1956\\u195a\\u1960r;\\uc000\\ud835\\udcb7mi;\\u604fm\\u0100;e\\u171a\\u171cl\\u0180;bh\\u1968\\u1969\\u196b\\u405c;\\u69c5sub;\\u67c8\\u016c\\u1974\\u197el\\u0100;e\\u1979\\u197a\\u6022t\\xbb\\u197ap\\u0180;Ee\\u012f\\u1985\\u1987;\\u6aae\\u0100;q\\u06dc\\u06db\\u0ce1\\u19a7\\0\\u19e8\\u1a11\\u1a15\\u1a32\\0\\u1a37\\u1a50\\0\\0\\u1ab4\\0\\0\\u1ac1\\0\\0\\u1b21\\u1b2e\\u1b4d\\u1b52\\0\\u1bfd\\0\\u1c0c\\u0180cpr\\u19ad\\u19b2\\u19ddute;\\u4107\\u0300;abcds\\u19bf\\u19c0\\u19c4\\u19ca\\u19d5\\u19d9\\u6229nd;\\u6a44rcup;\\u6a49\\u0100au\\u19cf\\u19d2p;\\u6a4bp;\\u6a47ot;\\u6a40;\\uc000\\u2229\\ufe00\\u0100eo\\u19e2\\u19e5t;\\u6041\\xee\\u0693\\u0200aeiu\\u19f0\\u19fb\\u1a01\\u1a05\\u01f0\\u19f5\\0\\u19f8s;\\u6a4don;\\u410ddil\\u803b\\xe7\\u40e7rc;\\u4109ps\\u0100;s\\u1a0c\\u1a0d\\u6a4cm;\\u6a50ot;\\u410b\\u0180dmn\\u1a1b\\u1a20\\u1a26il\\u80bb\\xb8\\u01adptyv;\\u69b2t\\u8100\\xa2;e\\u1a2d\\u1a2e\\u40a2r\\xe4\\u01b2r;\\uc000\\ud835\\udd20\\u0180cei\\u1a3d\\u1a40\\u1a4dy;\\u4447ck\\u0100;m\\u1a47\\u1a48\\u6713ark\\xbb\\u1a48;\\u43c7r\\u0380;Ecefms\\u1a5f\\u1a60\\u1a62\\u1a6b\\u1aa4\\u1aaa\\u1aae\\u65cb;\\u69c3\\u0180;el\\u1a69\\u1a6a\\u1a6d\\u42c6q;\\u6257e\\u0261\\u1a74\\0\\0\\u1a88rrow\\u0100lr\\u1a7c\\u1a81eft;\\u61baight;\\u61bb\\u0280RSacd\\u1a92\\u1a94\\u1a96\\u1a9a\\u1a9f\\xbb\\u0f47;\\u64c8st;\\u629birc;\\u629aash;\\u629dnint;\\u6a10id;\\u6aefcir;\\u69c2ubs\\u0100;u\\u1abb\\u1abc\\u6663it\\xbb\\u1abc\\u02ec\\u1ac7\\u1ad4\\u1afa\\0\\u1b0aon\\u0100;e\\u1acd\\u1ace\\u403a\\u0100;q\\xc7\\xc6\\u026d\\u1ad9\\0\\0\\u1ae2a\\u0100;t\\u1ade\\u1adf\\u402c;\\u4040\\u0180;fl\\u1ae8\\u1ae9\\u1aeb\\u6201\\xee\\u1160e\\u0100mx\\u1af1\\u1af6ent\\xbb\\u1ae9e\\xf3\\u024d\\u01e7\\u1afe\\0\\u1b07\\u0100;d\\u12bb\\u1b02ot;\\u6a6dn\\xf4\\u0246\\u0180fry\\u1b10\\u1b14\\u1b17;\\uc000\\ud835\\udd54o\\xe4\\u0254\\u8100\\xa9;s\\u0155\\u1b1dr;\\u6117\\u0100ao\\u1b25\\u1b29rr;\\u61b5ss;\\u6717\\u0100cu\\u1b32\\u1b37r;\\uc000\\ud835\\udcb8\\u0100bp\\u1b3c\\u1b44\\u0100;e\\u1b41\\u1b42\\u6acf;\\u6ad1\\u0100;e\\u1b49\\u1b4a\\u6ad0;\\u6ad2dot;\\u62ef\\u0380delprvw\\u1b60\\u1b6c\\u1b77\\u1b82\\u1bac\\u1bd4\\u1bf9arr\\u0100lr\\u1b68\\u1b6a;\\u6938;\\u6935\\u0270\\u1b72\\0\\0\\u1b75r;\\u62dec;\\u62dfarr\\u0100;p\\u1b7f\\u1b80\\u61b6;\\u693d\\u0300;bcdos\\u1b8f\\u1b90\\u1b96\\u1ba1\\u1ba5\\u1ba8\\u622arcap;\\u6a48\\u0100au\\u1b9b\\u1b9ep;\\u6a46p;\\u6a4aot;\\u628dr;\\u6a45;\\uc000\\u222a\\ufe00\\u0200alrv\\u1bb5\\u1bbf\\u1bde\\u1be3rr\\u0100;m\\u1bbc\\u1bbd\\u61b7;\\u693cy\\u0180evw\\u1bc7\\u1bd4\\u1bd8q\\u0270\\u1bce\\0\\0\\u1bd2re\\xe3\\u1b73u\\xe3\\u1b75ee;\\u62ceedge;\\u62cfen\\u803b\\xa4\\u40a4earrow\\u0100lr\\u1bee\\u1bf3eft\\xbb\\u1b80ight\\xbb\\u1bbde\\xe4\\u1bdd\\u0100ci\\u1c01\\u1c07onin\\xf4\\u01f7nt;\\u6231lcty;\\u632d\\u0980AHabcdefhijlorstuwz\\u1c38\\u1c3b\\u1c3f\\u1c5d\\u1c69\\u1c75\\u1c8a\\u1c9e\\u1cac\\u1cb7\\u1cfb\\u1cff\\u1d0d\\u1d7b\\u1d91\\u1dab\\u1dbb\\u1dc6\\u1dcdr\\xf2\\u0381ar;\\u6965\\u0200glrs\\u1c48\\u1c4d\\u1c52\\u1c54ger;\\u6020eth;\\u6138\\xf2\\u1133h\\u0100;v\\u1c5a\\u1c5b\\u6010\\xbb\\u090a\\u016b\\u1c61\\u1c67arow;\\u690fa\\xe3\\u0315\\u0100ay\\u1c6e\\u1c73ron;\\u410f;\\u4434\\u0180;ao\\u0332\\u1c7c\\u1c84\\u0100gr\\u02bf\\u1c81r;\\u61catseq;\\u6a77\\u0180glm\\u1c91\\u1c94\\u1c98\\u803b\\xb0\\u40b0ta;\\u43b4ptyv;\\u69b1\\u0100ir\\u1ca3\\u1ca8sht;\\u697f;\\uc000\\ud835\\udd21ar\\u0100lr\\u1cb3\\u1cb5\\xbb\\u08dc\\xbb\\u101e\\u0280aegsv\\u1cc2\\u0378\\u1cd6\\u1cdc\\u1ce0m\\u0180;os\\u0326\\u1cca\\u1cd4nd\\u0100;s\\u0326\\u1cd1uit;\\u6666amma;\\u43ddin;\\u62f2\\u0180;io\\u1ce7\\u1ce8\\u1cf8\\u40f7de\\u8100\\xf7;o\\u1ce7\\u1cf0ntimes;\\u62c7n\\xf8\\u1cf7cy;\\u4452c\\u026f\\u1d06\\0\\0\\u1d0arn;\\u631eop;\\u630d\\u0280lptuw\\u1d18\\u1d1d\\u1d22\\u1d49\\u1d55lar;\\u4024f;\\uc000\\ud835\\udd55\\u0280;emps\\u030b\\u1d2d\\u1d37\\u1d3d\\u1d42q\\u0100;d\\u0352\\u1d33ot;\\u6251inus;\\u6238lus;\\u6214quare;\\u62a1blebarwedg\\xe5\\xfan\\u0180adh\\u112e\\u1d5d\\u1d67ownarrow\\xf3\\u1c83arpoon\\u0100lr\\u1d72\\u1d76ef\\xf4\\u1cb4igh\\xf4\\u1cb6\\u0162\\u1d7f\\u1d85karo\\xf7\\u0f42\\u026f\\u1d8a\\0\\0\\u1d8ern;\\u631fop;\\u630c\\u0180cot\\u1d98\\u1da3\\u1da6\\u0100ry\\u1d9d\\u1da1;\\uc000\\ud835\\udcb9;\\u4455l;\\u69f6rok;\\u4111\\u0100dr\\u1db0\\u1db4ot;\\u62f1i\\u0100;f\\u1dba\\u1816\\u65bf\\u0100ah\\u1dc0\\u1dc3r\\xf2\\u0429a\\xf2\\u0fa6angle;\\u69a6\\u0100ci\\u1dd2\\u1dd5y;\\u445fgrarr;\\u67ff\\u0900Dacdefglmnopqrstux\\u1e01\\u1e09\\u1e19\\u1e38\\u0578\\u1e3c\\u1e49\\u1e61\\u1e7e\\u1ea5\\u1eaf\\u1ebd\\u1ee1\\u1f2a\\u1f37\\u1f44\\u1f4e\\u1f5a\\u0100Do\\u1e06\\u1d34o\\xf4\\u1c89\\u0100cs\\u1e0e\\u1e14ute\\u803b\\xe9\\u40e9ter;\\u6a6e\\u0200aioy\\u1e22\\u1e27\\u1e31\\u1e36ron;\\u411br\\u0100;c\\u1e2d\\u1e2e\\u6256\\u803b\\xea\\u40ealon;\\u6255;\\u444dot;\\u4117\\u0100Dr\\u1e41\\u1e45ot;\\u6252;\\uc000\\ud835\\udd22\\u0180;rs\\u1e50\\u1e51\\u1e57\\u6a9aave\\u803b\\xe8\\u40e8\\u0100;d\\u1e5c\\u1e5d\\u6a96ot;\\u6a98\\u0200;ils\\u1e6a\\u1e6b\\u1e72\\u1e74\\u6a99nters;\\u63e7;\\u6113\\u0100;d\\u1e79\\u1e7a\\u6a95ot;\\u6a97\\u0180aps\\u1e85\\u1e89\\u1e97cr;\\u4113ty\\u0180;sv\\u1e92\\u1e93\\u1e95\\u6205et\\xbb\\u1e93p\\u01001;\\u1e9d\\u1ea4\\u0133\\u1ea1\\u1ea3;\\u6004;\\u6005\\u6003\\u0100gs\\u1eaa\\u1eac;\\u414bp;\\u6002\\u0100gp\\u1eb4\\u1eb8on;\\u4119f;\\uc000\\ud835\\udd56\\u0180als\\u1ec4\\u1ece\\u1ed2r\\u0100;s\\u1eca\\u1ecb\\u62d5l;\\u69e3us;\\u6a71i\\u0180;lv\\u1eda\\u1edb\\u1edf\\u43b5on\\xbb\\u1edb;\\u43f5\\u0200csuv\\u1eea\\u1ef3\\u1f0b\\u1f23\\u0100io\\u1eef\\u1e31rc\\xbb\\u1e2e\\u0269\\u1ef9\\0\\0\\u1efb\\xed\\u0548ant\\u0100gl\\u1f02\\u1f06tr\\xbb\\u1e5dess\\xbb\\u1e7a\\u0180aei\\u1f12\\u1f16\\u1f1als;\\u403dst;\\u625fv\\u0100;D\\u0235\\u1f20D;\\u6a78parsl;\\u69e5\\u0100Da\\u1f2f\\u1f33ot;\\u6253rr;\\u6971\\u0180cdi\\u1f3e\\u1f41\\u1ef8r;\\u612fo\\xf4\\u0352\\u0100ah\\u1f49\\u1f4b;\\u43b7\\u803b\\xf0\\u40f0\\u0100mr\\u1f53\\u1f57l\\u803b\\xeb\\u40ebo;\\u60ac\\u0180cip\\u1f61\\u1f64\\u1f67l;\\u4021s\\xf4\\u056e\\u0100eo\\u1f6c\\u1f74ctatio\\xee\\u0559nential\\xe5\\u0579\\u09e1\\u1f92\\0\\u1f9e\\0\\u1fa1\\u1fa7\\0\\0\\u1fc6\\u1fcc\\0\\u1fd3\\0\\u1fe6\\u1fea\\u2000\\0\\u2008\\u205allingdotse\\xf1\\u1e44y;\\u4444male;\\u6640\\u0180ilr\\u1fad\\u1fb3\\u1fc1lig;\\u8000\\ufb03\\u0269\\u1fb9\\0\\0\\u1fbdg;\\u8000\\ufb00ig;\\u8000\\ufb04;\\uc000\\ud835\\udd23lig;\\u8000\\ufb01lig;\\uc000fj\\u0180alt\\u1fd9\\u1fdc\\u1fe1t;\\u666dig;\\u8000\\ufb02ns;\\u65b1of;\\u4192\\u01f0\\u1fee\\0\\u1ff3f;\\uc000\\ud835\\udd57\\u0100ak\\u05bf\\u1ff7\\u0100;v\\u1ffc\\u1ffd\\u62d4;\\u6ad9artint;\\u6a0d\\u0100ao\\u200c\\u2055\\u0100cs\\u2011\\u2052\\u03b1\\u201a\\u2030\\u2038\\u2045\\u2048\\0\\u2050\\u03b2\\u2022\\u2025\\u2027\\u202a\\u202c\\0\\u202e\\u803b\\xbd\\u40bd;\\u6153\\u803b\\xbc\\u40bc;\\u6155;\\u6159;\\u615b\\u01b3\\u2034\\0\\u2036;\\u6154;\\u6156\\u02b4\\u203e\\u2041\\0\\0\\u2043\\u803b\\xbe\\u40be;\\u6157;\\u615c5;\\u6158\\u01b6\\u204c\\0\\u204e;\\u615a;\\u615d8;\\u615el;\\u6044wn;\\u6322cr;\\uc000\\ud835\\udcbb\\u0880Eabcdefgijlnorstv\\u2082\\u2089\\u209f\\u20a5\\u20b0\\u20b4\\u20f0\\u20f5\\u20fa\\u20ff\\u2103\\u2112\\u2138\\u0317\\u213e\\u2152\\u219e\\u0100;l\\u064d\\u2087;\\u6a8c\\u0180cmp\\u2090\\u2095\\u209dute;\\u41f5ma\\u0100;d\\u209c\\u1cda\\u43b3;\\u6a86reve;\\u411f\\u0100iy\\u20aa\\u20aerc;\\u411d;\\u4433ot;\\u4121\\u0200;lqs\\u063e\\u0642\\u20bd\\u20c9\\u0180;qs\\u063e\\u064c\\u20c4lan\\xf4\\u0665\\u0200;cdl\\u0665\\u20d2\\u20d5\\u20e5c;\\u6aa9ot\\u0100;o\\u20dc\\u20dd\\u6a80\\u0100;l\\u20e2\\u20e3\\u6a82;\\u6a84\\u0100;e\\u20ea\\u20ed\\uc000\\u22db\\ufe00s;\\u6a94r;\\uc000\\ud835\\udd24\\u0100;g\\u0673\\u061bmel;\\u6137cy;\\u4453\\u0200;Eaj\\u065a\\u210c\\u210e\\u2110;\\u6a92;\\u6aa5;\\u6aa4\\u0200Eaes\\u211b\\u211d\\u2129\\u2134;\\u6269p\\u0100;p\\u2123\\u2124\\u6a8arox\\xbb\\u2124\\u0100;q\\u212e\\u212f\\u6a88\\u0100;q\\u212e\\u211bim;\\u62e7pf;\\uc000\\ud835\\udd58\\u0100ci\\u2143\\u2146r;\\u610am\\u0180;el\\u066b\\u214e\\u2150;\\u6a8e;\\u6a90\\u8300>;cdlqr\\u05ee\\u2160\\u216a\\u216e\\u2173\\u2179\\u0100ci\\u2165\\u2167;\\u6aa7r;\\u6a7aot;\\u62d7Par;\\u6995uest;\\u6a7c\\u0280adels\\u2184\\u216a\\u2190\\u0656\\u219b\\u01f0\\u2189\\0\\u218epro\\xf8\\u209er;\\u6978q\\u0100lq\\u063f\\u2196les\\xf3\\u2088i\\xed\\u066b\\u0100en\\u21a3\\u21adrtneqq;\\uc000\\u2269\\ufe00\\xc5\\u21aa\\u0500Aabcefkosy\\u21c4\\u21c7\\u21f1\\u21f5\\u21fa\\u2218\\u221d\\u222f\\u2268\\u227dr\\xf2\\u03a0\\u0200ilmr\\u21d0\\u21d4\\u21d7\\u21dbrs\\xf0\\u1484f\\xbb\\u2024il\\xf4\\u06a9\\u0100dr\\u21e0\\u21e4cy;\\u444a\\u0180;cw\\u08f4\\u21eb\\u21efir;\\u6948;\\u61adar;\\u610firc;\\u4125\\u0180alr\\u2201\\u220e\\u2213rts\\u0100;u\\u2209\\u220a\\u6665it\\xbb\\u220alip;\\u6026con;\\u62b9r;\\uc000\\ud835\\udd25s\\u0100ew\\u2223\\u2229arow;\\u6925arow;\\u6926\\u0280amopr\\u223a\\u223e\\u2243\\u225e\\u2263rr;\\u61fftht;\\u623bk\\u0100lr\\u2249\\u2253eftarrow;\\u61a9ightarrow;\\u61aaf;\\uc000\\ud835\\udd59bar;\\u6015\\u0180clt\\u226f\\u2274\\u2278r;\\uc000\\ud835\\udcbdas\\xe8\\u21f4rok;\\u4127\\u0100bp\\u2282\\u2287ull;\\u6043hen\\xbb\\u1c5b\\u0ae1\\u22a3\\0\\u22aa\\0\\u22b8\\u22c5\\u22ce\\0\\u22d5\\u22f3\\0\\0\\u22f8\\u2322\\u2367\\u2362\\u237f\\0\\u2386\\u23aa\\u23b4cute\\u803b\\xed\\u40ed\\u0180;iy\\u0771\\u22b0\\u22b5rc\\u803b\\xee\\u40ee;\\u4438\\u0100cx\\u22bc\\u22bfy;\\u4435cl\\u803b\\xa1\\u40a1\\u0100fr\\u039f\\u22c9;\\uc000\\ud835\\udd26rave\\u803b\\xec\\u40ec\\u0200;ino\\u073e\\u22dd\\u22e9\\u22ee\\u0100in\\u22e2\\u22e6nt;\\u6a0ct;\\u622dfin;\\u69dcta;\\u6129lig;\\u4133\\u0180aop\\u22fe\\u231a\\u231d\\u0180cgt\\u2305\\u2308\\u2317r;\\u412b\\u0180elp\\u071f\\u230f\\u2313in\\xe5\\u078ear\\xf4\\u0720h;\\u4131f;\\u62b7ed;\\u41b5\\u0280;cfot\\u04f4\\u232c\\u2331\\u233d\\u2341are;\\u6105in\\u0100;t\\u2338\\u2339\\u621eie;\\u69dddo\\xf4\\u2319\\u0280;celp\\u0757\\u234c\\u2350\\u235b\\u2361al;\\u62ba\\u0100gr\\u2355\\u2359er\\xf3\\u1563\\xe3\\u234darhk;\\u6a17rod;\\u6a3c\\u0200cgpt\\u236f\\u2372\\u2376\\u237by;\\u4451on;\\u412ff;\\uc000\\ud835\\udd5aa;\\u43b9uest\\u803b\\xbf\\u40bf\\u0100ci\\u238a\\u238fr;\\uc000\\ud835\\udcben\\u0280;Edsv\\u04f4\\u239b\\u239d\\u23a1\\u04f3;\\u62f9ot;\\u62f5\\u0100;v\\u23a6\\u23a7\\u62f4;\\u62f3\\u0100;i\\u0777\\u23aelde;\\u4129\\u01eb\\u23b8\\0\\u23bccy;\\u4456l\\u803b\\xef\\u40ef\\u0300cfmosu\\u23cc\\u23d7\\u23dc\\u23e1\\u23e7\\u23f5\\u0100iy\\u23d1\\u23d5rc;\\u4135;\\u4439r;\\uc000\\ud835\\udd27ath;\\u4237pf;\\uc000\\ud835\\udd5b\\u01e3\\u23ec\\0\\u23f1r;\\uc000\\ud835\\udcbfrcy;\\u4458kcy;\\u4454\\u0400acfghjos\\u240b\\u2416\\u2422\\u2427\\u242d\\u2431\\u2435\\u243bppa\\u0100;v\\u2413\\u2414\\u43ba;\\u43f0\\u0100ey\\u241b\\u2420dil;\\u4137;\\u443ar;\\uc000\\ud835\\udd28reen;\\u4138cy;\\u4445cy;\\u445cpf;\\uc000\\ud835\\udd5ccr;\\uc000\\ud835\\udcc0\\u0b80ABEHabcdefghjlmnoprstuv\\u2470\\u2481\\u2486\\u248d\\u2491\\u250e\\u253d\\u255a\\u2580\\u264e\\u265e\\u2665\\u2679\\u267d\\u269a\\u26b2\\u26d8\\u275d\\u2768\\u278b\\u27c0\\u2801\\u2812\\u0180art\\u2477\\u247a\\u247cr\\xf2\\u09c6\\xf2\\u0395ail;\\u691barr;\\u690e\\u0100;g\\u0994\\u248b;\\u6a8bar;\\u6962\\u0963\\u24a5\\0\\u24aa\\0\\u24b1\\0\\0\\0\\0\\0\\u24b5\\u24ba\\0\\u24c6\\u24c8\\u24cd\\0\\u24f9ute;\\u413amptyv;\\u69b4ra\\xee\\u084cbda;\\u43bbg\\u0180;dl\\u088e\\u24c1\\u24c3;\\u6991\\xe5\\u088e;\\u6a85uo\\u803b\\xab\\u40abr\\u0400;bfhlpst\\u0899\\u24de\\u24e6\\u24e9\\u24eb\\u24ee\\u24f1\\u24f5\\u0100;f\\u089d\\u24e3s;\\u691fs;\\u691d\\xeb\\u2252p;\\u61abl;\\u6939im;\\u6973l;\\u61a2\\u0180;ae\\u24ff\\u2500\\u2504\\u6aabil;\\u6919\\u0100;s\\u2509\\u250a\\u6aad;\\uc000\\u2aad\\ufe00\\u0180abr\\u2515\\u2519\\u251drr;\\u690crk;\\u6772\\u0100ak\\u2522\\u252cc\\u0100ek\\u2528\\u252a;\\u407b;\\u405b\\u0100es\\u2531\\u2533;\\u698bl\\u0100du\\u2539\\u253b;\\u698f;\\u698d\\u0200aeuy\\u2546\\u254b\\u2556\\u2558ron;\\u413e\\u0100di\\u2550\\u2554il;\\u413c\\xec\\u08b0\\xe2\\u2529;\\u443b\\u0200cqrs\\u2563\\u2566\\u256d\\u257da;\\u6936uo\\u0100;r\\u0e19\\u1746\\u0100du\\u2572\\u2577har;\\u6967shar;\\u694bh;\\u61b2\\u0280;fgqs\\u258b\\u258c\\u0989\\u25f3\\u25ff\\u6264t\\u0280ahlrt\\u2598\\u25a4\\u25b7\\u25c2\\u25e8rrow\\u0100;t\\u0899\\u25a1a\\xe9\\u24f6arpoon\\u0100du\\u25af\\u25b4own\\xbb\\u045ap\\xbb\\u0966eftarrows;\\u61c7ight\\u0180ahs\\u25cd\\u25d6\\u25derrow\\u0100;s\\u08f4\\u08a7arpoon\\xf3\\u0f98quigarro\\xf7\\u21f0hreetimes;\\u62cb\\u0180;qs\\u258b\\u0993\\u25falan\\xf4\\u09ac\\u0280;cdgs\\u09ac\\u260a\\u260d\\u261d\\u2628c;\\u6aa8ot\\u0100;o\\u2614\\u2615\\u6a7f\\u0100;r\\u261a\\u261b\\u6a81;\\u6a83\\u0100;e\\u2622\\u2625\\uc000\\u22da\\ufe00s;\\u6a93\\u0280adegs\\u2633\\u2639\\u263d\\u2649\\u264bppro\\xf8\\u24c6ot;\\u62d6q\\u0100gq\\u2643\\u2645\\xf4\\u0989gt\\xf2\\u248c\\xf4\\u099bi\\xed\\u09b2\\u0180ilr\\u2655\\u08e1\\u265asht;\\u697c;\\uc000\\ud835\\udd29\\u0100;E\\u099c\\u2663;\\u6a91\\u0161\\u2669\\u2676r\\u0100du\\u25b2\\u266e\\u0100;l\\u0965\\u2673;\\u696alk;\\u6584cy;\\u4459\\u0280;acht\\u0a48\\u2688\\u268b\\u2691\\u2696r\\xf2\\u25c1orne\\xf2\\u1d08ard;\\u696bri;\\u65fa\\u0100io\\u269f\\u26a4dot;\\u4140ust\\u0100;a\\u26ac\\u26ad\\u63b0che\\xbb\\u26ad\\u0200Eaes\\u26bb\\u26bd\\u26c9\\u26d4;\\u6268p\\u0100;p\\u26c3\\u26c4\\u6a89rox\\xbb\\u26c4\\u0100;q\\u26ce\\u26cf\\u6a87\\u0100;q\\u26ce\\u26bbim;\\u62e6\\u0400abnoptwz\\u26e9\\u26f4\\u26f7\\u271a\\u272f\\u2741\\u2747\\u2750\\u0100nr\\u26ee\\u26f1g;\\u67ecr;\\u61fdr\\xeb\\u08c1g\\u0180lmr\\u26ff\\u270d\\u2714eft\\u0100ar\\u09e6\\u2707ight\\xe1\\u09f2apsto;\\u67fcight\\xe1\\u09fdparrow\\u0100lr\\u2725\\u2729ef\\xf4\\u24edight;\\u61ac\\u0180afl\\u2736\\u2739\\u273dr;\\u6985;\\uc000\\ud835\\udd5dus;\\u6a2dimes;\\u6a34\\u0161\\u274b\\u274fst;\\u6217\\xe1\\u134e\\u0180;ef\\u2757\\u2758\\u1800\\u65cange\\xbb\\u2758ar\\u0100;l\\u2764\\u2765\\u4028t;\\u6993\\u0280achmt\\u2773\\u2776\\u277c\\u2785\\u2787r\\xf2\\u08a8orne\\xf2\\u1d8car\\u0100;d\\u0f98\\u2783;\\u696d;\\u600eri;\\u62bf\\u0300achiqt\\u2798\\u279d\\u0a40\\u27a2\\u27ae\\u27bbquo;\\u6039r;\\uc000\\ud835\\udcc1m\\u0180;eg\\u09b2\\u27aa\\u27ac;\\u6a8d;\\u6a8f\\u0100bu\\u252a\\u27b3o\\u0100;r\\u0e1f\\u27b9;\\u601arok;\\u4142\\u8400<;cdhilqr\\u082b\\u27d2\\u2639\\u27dc\\u27e0\\u27e5\\u27ea\\u27f0\\u0100ci\\u27d7\\u27d9;\\u6aa6r;\\u6a79re\\xe5\\u25f2mes;\\u62c9arr;\\u6976uest;\\u6a7b\\u0100Pi\\u27f5\\u27f9ar;\\u6996\\u0180;ef\\u2800\\u092d\\u181b\\u65c3r\\u0100du\\u2807\\u280dshar;\\u694ahar;\\u6966\\u0100en\\u2817\\u2821rtneqq;\\uc000\\u2268\\ufe00\\xc5\\u281e\\u0700Dacdefhilnopsu\\u2840\\u2845\\u2882\\u288e\\u2893\\u28a0\\u28a5\\u28a8\\u28da\\u28e2\\u28e4\\u0a83\\u28f3\\u2902Dot;\\u623a\\u0200clpr\\u284e\\u2852\\u2863\\u287dr\\u803b\\xaf\\u40af\\u0100et\\u2857\\u2859;\\u6642\\u0100;e\\u285e\\u285f\\u6720se\\xbb\\u285f\\u0100;s\\u103b\\u2868to\\u0200;dlu\\u103b\\u2873\\u2877\\u287bow\\xee\\u048cef\\xf4\\u090f\\xf0\\u13d1ker;\\u65ae\\u0100oy\\u2887\\u288cmma;\\u6a29;\\u443cash;\\u6014asuredangle\\xbb\\u1626r;\\uc000\\ud835\\udd2ao;\\u6127\\u0180cdn\\u28af\\u28b4\\u28c9ro\\u803b\\xb5\\u40b5\\u0200;acd\\u1464\\u28bd\\u28c0\\u28c4s\\xf4\\u16a7ir;\\u6af0ot\\u80bb\\xb7\\u01b5us\\u0180;bd\\u28d2\\u1903\\u28d3\\u6212\\u0100;u\\u1d3c\\u28d8;\\u6a2a\\u0163\\u28de\\u28e1p;\\u6adb\\xf2\\u2212\\xf0\\u0a81\\u0100dp\\u28e9\\u28eeels;\\u62a7f;\\uc000\\ud835\\udd5e\\u0100ct\\u28f8\\u28fdr;\\uc000\\ud835\\udcc2pos\\xbb\\u159d\\u0180;lm\\u2909\\u290a\\u290d\\u43bctimap;\\u62b8\\u0c00GLRVabcdefghijlmoprstuvw\\u2942\\u2953\\u297e\\u2989\\u2998\\u29da\\u29e9\\u2a15\\u2a1a\\u2a58\\u2a5d\\u2a83\\u2a95\\u2aa4\\u2aa8\\u2b04\\u2b07\\u2b44\\u2b7f\\u2bae\\u2c34\\u2c67\\u2c7c\\u2ce9\\u0100gt\\u2947\\u294b;\\uc000\\u22d9\\u0338\\u0100;v\\u2950\\u0bcf\\uc000\\u226b\\u20d2\\u0180elt\\u295a\\u2972\\u2976ft\\u0100ar\\u2961\\u2967rrow;\\u61cdightarrow;\\u61ce;\\uc000\\u22d8\\u0338\\u0100;v\\u297b\\u0c47\\uc000\\u226a\\u20d2ightarrow;\\u61cf\\u0100Dd\\u298e\\u2993ash;\\u62afash;\\u62ae\\u0280bcnpt\\u29a3\\u29a7\\u29ac\\u29b1\\u29ccla\\xbb\\u02deute;\\u4144g;\\uc000\\u2220\\u20d2\\u0280;Eiop\\u0d84\\u29bc\\u29c0\\u29c5\\u29c8;\\uc000\\u2a70\\u0338d;\\uc000\\u224b\\u0338s;\\u4149ro\\xf8\\u0d84ur\\u0100;a\\u29d3\\u29d4\\u666el\\u0100;s\\u29d3\\u0b38\\u01f3\\u29df\\0\\u29e3p\\u80bb\\xa0\\u0b37mp\\u0100;e\\u0bf9\\u0c00\\u0280aeouy\\u29f4\\u29fe\\u2a03\\u2a10\\u2a13\\u01f0\\u29f9\\0\\u29fb;\\u6a43on;\\u4148dil;\\u4146ng\\u0100;d\\u0d7e\\u2a0aot;\\uc000\\u2a6d\\u0338p;\\u6a42;\\u443dash;\\u6013\\u0380;Aadqsx\\u0b92\\u2a29\\u2a2d\\u2a3b\\u2a41\\u2a45\\u2a50rr;\\u61d7r\\u0100hr\\u2a33\\u2a36k;\\u6924\\u0100;o\\u13f2\\u13f0ot;\\uc000\\u2250\\u0338ui\\xf6\\u0b63\\u0100ei\\u2a4a\\u2a4ear;\\u6928\\xed\\u0b98ist\\u0100;s\\u0ba0\\u0b9fr;\\uc000\\ud835\\udd2b\\u0200Eest\\u0bc5\\u2a66\\u2a79\\u2a7c\\u0180;qs\\u0bbc\\u2a6d\\u0be1\\u0180;qs\\u0bbc\\u0bc5\\u2a74lan\\xf4\\u0be2i\\xed\\u0bea\\u0100;r\\u0bb6\\u2a81\\xbb\\u0bb7\\u0180Aap\\u2a8a\\u2a8d\\u2a91r\\xf2\\u2971rr;\\u61aear;\\u6af2\\u0180;sv\\u0f8d\\u2a9c\\u0f8c\\u0100;d\\u2aa1\\u2aa2\\u62fc;\\u62facy;\\u445a\\u0380AEadest\\u2ab7\\u2aba\\u2abe\\u2ac2\\u2ac5\\u2af6\\u2af9r\\xf2\\u2966;\\uc000\\u2266\\u0338rr;\\u619ar;\\u6025\\u0200;fqs\\u0c3b\\u2ace\\u2ae3\\u2aeft\\u0100ar\\u2ad4\\u2ad9rro\\xf7\\u2ac1ightarro\\xf7\\u2a90\\u0180;qs\\u0c3b\\u2aba\\u2aealan\\xf4\\u0c55\\u0100;s\\u0c55\\u2af4\\xbb\\u0c36i\\xed\\u0c5d\\u0100;r\\u0c35\\u2afei\\u0100;e\\u0c1a\\u0c25i\\xe4\\u0d90\\u0100pt\\u2b0c\\u2b11f;\\uc000\\ud835\\udd5f\\u8180\\xac;in\\u2b19\\u2b1a\\u2b36\\u40acn\\u0200;Edv\\u0b89\\u2b24\\u2b28\\u2b2e;\\uc000\\u22f9\\u0338ot;\\uc000\\u22f5\\u0338\\u01e1\\u0b89\\u2b33\\u2b35;\\u62f7;\\u62f6i\\u0100;v\\u0cb8\\u2b3c\\u01e1\\u0cb8\\u2b41\\u2b43;\\u62fe;\\u62fd\\u0180aor\\u2b4b\\u2b63\\u2b69r\\u0200;ast\\u0b7b\\u2b55\\u2b5a\\u2b5flle\\xec\\u0b7bl;\\uc000\\u2afd\\u20e5;\\uc000\\u2202\\u0338lint;\\u6a14\\u0180;ce\\u0c92\\u2b70\\u2b73u\\xe5\\u0ca5\\u0100;c\\u0c98\\u2b78\\u0100;e\\u0c92\\u2b7d\\xf1\\u0c98\\u0200Aait\\u2b88\\u2b8b\\u2b9d\\u2ba7r\\xf2\\u2988rr\\u0180;cw\\u2b94\\u2b95\\u2b99\\u619b;\\uc000\\u2933\\u0338;\\uc000\\u219d\\u0338ghtarrow\\xbb\\u2b95ri\\u0100;e\\u0ccb\\u0cd6\\u0380chimpqu\\u2bbd\\u2bcd\\u2bd9\\u2b04\\u0b78\\u2be4\\u2bef\\u0200;cer\\u0d32\\u2bc6\\u0d37\\u2bc9u\\xe5\\u0d45;\\uc000\\ud835\\udcc3ort\\u026d\\u2b05\\0\\0\\u2bd6ar\\xe1\\u2b56m\\u0100;e\\u0d6e\\u2bdf\\u0100;q\\u0d74\\u0d73su\\u0100bp\\u2beb\\u2bed\\xe5\\u0cf8\\xe5\\u0d0b\\u0180bcp\\u2bf6\\u2c11\\u2c19\\u0200;Ees\\u2bff\\u2c00\\u0d22\\u2c04\\u6284;\\uc000\\u2ac5\\u0338et\\u0100;e\\u0d1b\\u2c0bq\\u0100;q\\u0d23\\u2c00c\\u0100;e\\u0d32\\u2c17\\xf1\\u0d38\\u0200;Ees\\u2c22\\u2c23\\u0d5f\\u2c27\\u6285;\\uc000\\u2ac6\\u0338et\\u0100;e\\u0d58\\u2c2eq\\u0100;q\\u0d60\\u2c23\\u0200gilr\\u2c3d\\u2c3f\\u2c45\\u2c47\\xec\\u0bd7lde\\u803b\\xf1\\u40f1\\xe7\\u0c43iangle\\u0100lr\\u2c52\\u2c5ceft\\u0100;e\\u0c1a\\u2c5a\\xf1\\u0c26ight\\u0100;e\\u0ccb\\u2c65\\xf1\\u0cd7\\u0100;m\\u2c6c\\u2c6d\\u43bd\\u0180;es\\u2c74\\u2c75\\u2c79\\u4023ro;\\u6116p;\\u6007\\u0480DHadgilrs\\u2c8f\\u2c94\\u2c99\\u2c9e\\u2ca3\\u2cb0\\u2cb6\\u2cd3\\u2ce3ash;\\u62adarr;\\u6904p;\\uc000\\u224d\\u20d2ash;\\u62ac\\u0100et\\u2ca8\\u2cac;\\uc000\\u2265\\u20d2;\\uc000>\\u20d2nfin;\\u69de\\u0180Aet\\u2cbd\\u2cc1\\u2cc5rr;\\u6902;\\uc000\\u2264\\u20d2\\u0100;r\\u2cca\\u2ccd\\uc000<\\u20d2ie;\\uc000\\u22b4\\u20d2\\u0100At\\u2cd8\\u2cdcrr;\\u6903rie;\\uc000\\u22b5\\u20d2im;\\uc000\\u223c\\u20d2\\u0180Aan\\u2cf0\\u2cf4\\u2d02rr;\\u61d6r\\u0100hr\\u2cfa\\u2cfdk;\\u6923\\u0100;o\\u13e7\\u13e5ear;\\u6927\\u1253\\u1a95\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\u2d2d\\0\\u2d38\\u2d48\\u2d60\\u2d65\\u2d72\\u2d84\\u1b07\\0\\0\\u2d8d\\u2dab\\0\\u2dc8\\u2dce\\0\\u2ddc\\u2e19\\u2e2b\\u2e3e\\u2e43\\u0100cs\\u2d31\\u1a97ute\\u803b\\xf3\\u40f3\\u0100iy\\u2d3c\\u2d45r\\u0100;c\\u1a9e\\u2d42\\u803b\\xf4\\u40f4;\\u443e\\u0280abios\\u1aa0\\u2d52\\u2d57\\u01c8\\u2d5alac;\\u4151v;\\u6a38old;\\u69bclig;\\u4153\\u0100cr\\u2d69\\u2d6dir;\\u69bf;\\uc000\\ud835\\udd2c\\u036f\\u2d79\\0\\0\\u2d7c\\0\\u2d82n;\\u42dbave\\u803b\\xf2\\u40f2;\\u69c1\\u0100bm\\u2d88\\u0df4ar;\\u69b5\\u0200acit\\u2d95\\u2d98\\u2da5\\u2da8r\\xf2\\u1a80\\u0100ir\\u2d9d\\u2da0r;\\u69beoss;\\u69bbn\\xe5\\u0e52;\\u69c0\\u0180aei\\u2db1\\u2db5\\u2db9cr;\\u414dga;\\u43c9\\u0180cdn\\u2dc0\\u2dc5\\u01cdron;\\u43bf;\\u69b6pf;\\uc000\\ud835\\udd60\\u0180ael\\u2dd4\\u2dd7\\u01d2r;\\u69b7rp;\\u69b9\\u0380;adiosv\\u2dea\\u2deb\\u2dee\\u2e08\\u2e0d\\u2e10\\u2e16\\u6228r\\xf2\\u1a86\\u0200;efm\\u2df7\\u2df8\\u2e02\\u2e05\\u6a5dr\\u0100;o\\u2dfe\\u2dff\\u6134f\\xbb\\u2dff\\u803b\\xaa\\u40aa\\u803b\\xba\\u40bagof;\\u62b6r;\\u6a56lope;\\u6a57;\\u6a5b\\u0180clo\\u2e1f\\u2e21\\u2e27\\xf2\\u2e01ash\\u803b\\xf8\\u40f8l;\\u6298i\\u016c\\u2e2f\\u2e34de\\u803b\\xf5\\u40f5es\\u0100;a\\u01db\\u2e3as;\\u6a36ml\\u803b\\xf6\\u40f6bar;\\u633d\\u0ae1\\u2e5e\\0\\u2e7d\\0\\u2e80\\u2e9d\\0\\u2ea2\\u2eb9\\0\\0\\u2ecb\\u0e9c\\0\\u2f13\\0\\0\\u2f2b\\u2fbc\\0\\u2fc8r\\u0200;ast\\u0403\\u2e67\\u2e72\\u0e85\\u8100\\xb6;l\\u2e6d\\u2e6e\\u40b6le\\xec\\u0403\\u0269\\u2e78\\0\\0\\u2e7bm;\\u6af3;\\u6afdy;\\u443fr\\u0280cimpt\\u2e8b\\u2e8f\\u2e93\\u1865\\u2e97nt;\\u4025od;\\u402eil;\\u6030enk;\\u6031r;\\uc000\\ud835\\udd2d\\u0180imo\\u2ea8\\u2eb0\\u2eb4\\u0100;v\\u2ead\\u2eae\\u43c6;\\u43d5ma\\xf4\\u0a76ne;\\u660e\\u0180;tv\\u2ebf\\u2ec0\\u2ec8\\u43c0chfork\\xbb\\u1ffd;\\u43d6\\u0100au\\u2ecf\\u2edfn\\u0100ck\\u2ed5\\u2eddk\\u0100;h\\u21f4\\u2edb;\\u610e\\xf6\\u21f4s\\u0480;abcdemst\\u2ef3\\u2ef4\\u1908\\u2ef9\\u2efd\\u2f04\\u2f06\\u2f0a\\u2f0e\\u402bcir;\\u6a23ir;\\u6a22\\u0100ou\\u1d40\\u2f02;\\u6a25;\\u6a72n\\u80bb\\xb1\\u0e9dim;\\u6a26wo;\\u6a27\\u0180ipu\\u2f19\\u2f20\\u2f25ntint;\\u6a15f;\\uc000\\ud835\\udd61nd\\u803b\\xa3\\u40a3\\u0500;Eaceinosu\\u0ec8\\u2f3f\\u2f41\\u2f44\\u2f47\\u2f81\\u2f89\\u2f92\\u2f7e\\u2fb6;\\u6ab3p;\\u6ab7u\\xe5\\u0ed9\\u0100;c\\u0ece\\u2f4c\\u0300;acens\\u0ec8\\u2f59\\u2f5f\\u2f66\\u2f68\\u2f7eppro\\xf8\\u2f43urlye\\xf1\\u0ed9\\xf1\\u0ece\\u0180aes\\u2f6f\\u2f76\\u2f7approx;\\u6ab9qq;\\u6ab5im;\\u62e8i\\xed\\u0edfme\\u0100;s\\u2f88\\u0eae\\u6032\\u0180Eas\\u2f78\\u2f90\\u2f7a\\xf0\\u2f75\\u0180dfp\\u0eec\\u2f99\\u2faf\\u0180als\\u2fa0\\u2fa5\\u2faalar;\\u632eine;\\u6312urf;\\u6313\\u0100;t\\u0efb\\u2fb4\\xef\\u0efbrel;\\u62b0\\u0100ci\\u2fc0\\u2fc5r;\\uc000\\ud835\\udcc5;\\u43c8ncsp;\\u6008\\u0300fiopsu\\u2fda\\u22e2\\u2fdf\\u2fe5\\u2feb\\u2ff1r;\\uc000\\ud835\\udd2epf;\\uc000\\ud835\\udd62rime;\\u6057cr;\\uc000\\ud835\\udcc6\\u0180aeo\\u2ff8\\u3009\\u3013t\\u0100ei\\u2ffe\\u3005rnion\\xf3\\u06b0nt;\\u6a16st\\u0100;e\\u3010\\u3011\\u403f\\xf1\\u1f19\\xf4\\u0f14\\u0a80ABHabcdefhilmnoprstux\\u3040\\u3051\\u3055\\u3059\\u30e0\\u310e\\u312b\\u3147\\u3162\\u3172\\u318e\\u3206\\u3215\\u3224\\u3229\\u3258\\u326e\\u3272\\u3290\\u32b0\\u32b7\\u0180art\\u3047\\u304a\\u304cr\\xf2\\u10b3\\xf2\\u03ddail;\\u691car\\xf2\\u1c65ar;\\u6964\\u0380cdenqrt\\u3068\\u3075\\u3078\\u307f\\u308f\\u3094\\u30cc\\u0100eu\\u306d\\u3071;\\uc000\\u223d\\u0331te;\\u4155i\\xe3\\u116emptyv;\\u69b3g\\u0200;del\\u0fd1\\u3089\\u308b\\u308d;\\u6992;\\u69a5\\xe5\\u0fd1uo\\u803b\\xbb\\u40bbr\\u0580;abcfhlpstw\\u0fdc\\u30ac\\u30af\\u30b7\\u30b9\\u30bc\\u30be\\u30c0\\u30c3\\u30c7\\u30cap;\\u6975\\u0100;f\\u0fe0\\u30b4s;\\u6920;\\u6933s;\\u691e\\xeb\\u225d\\xf0\\u272el;\\u6945im;\\u6974l;\\u61a3;\\u619d\\u0100ai\\u30d1\\u30d5il;\\u691ao\\u0100;n\\u30db\\u30dc\\u6236al\\xf3\\u0f1e\\u0180abr\\u30e7\\u30ea\\u30eer\\xf2\\u17e5rk;\\u6773\\u0100ak\\u30f3\\u30fdc\\u0100ek\\u30f9\\u30fb;\\u407d;\\u405d\\u0100es\\u3102\\u3104;\\u698cl\\u0100du\\u310a\\u310c;\\u698e;\\u6990\\u0200aeuy\\u3117\\u311c\\u3127\\u3129ron;\\u4159\\u0100di\\u3121\\u3125il;\\u4157\\xec\\u0ff2\\xe2\\u30fa;\\u4440\\u0200clqs\\u3134\\u3137\\u313d\\u3144a;\\u6937dhar;\\u6969uo\\u0100;r\\u020e\\u020dh;\\u61b3\\u0180acg\\u314e\\u315f\\u0f44l\\u0200;ips\\u0f78\\u3158\\u315b\\u109cn\\xe5\\u10bbar\\xf4\\u0fa9t;\\u65ad\\u0180ilr\\u3169\\u1023\\u316esht;\\u697d;\\uc000\\ud835\\udd2f\\u0100ao\\u3177\\u3186r\\u0100du\\u317d\\u317f\\xbb\\u047b\\u0100;l\\u1091\\u3184;\\u696c\\u0100;v\\u318b\\u318c\\u43c1;\\u43f1\\u0180gns\\u3195\\u31f9\\u31fcht\\u0300ahlrst\\u31a4\\u31b0\\u31c2\\u31d8\\u31e4\\u31eerrow\\u0100;t\\u0fdc\\u31ada\\xe9\\u30c8arpoon\\u0100du\\u31bb\\u31bfow\\xee\\u317ep\\xbb\\u1092eft\\u0100ah\\u31ca\\u31d0rrow\\xf3\\u0feaarpoon\\xf3\\u0551ightarrows;\\u61c9quigarro\\xf7\\u30cbhreetimes;\\u62ccg;\\u42daingdotse\\xf1\\u1f32\\u0180ahm\\u320d\\u3210\\u3213r\\xf2\\u0feaa\\xf2\\u0551;\\u600foust\\u0100;a\\u321e\\u321f\\u63b1che\\xbb\\u321fmid;\\u6aee\\u0200abpt\\u3232\\u323d\\u3240\\u3252\\u0100nr\\u3237\\u323ag;\\u67edr;\\u61fer\\xeb\\u1003\\u0180afl\\u3247\\u324a\\u324er;\\u6986;\\uc000\\ud835\\udd63us;\\u6a2eimes;\\u6a35\\u0100ap\\u325d\\u3267r\\u0100;g\\u3263\\u3264\\u4029t;\\u6994olint;\\u6a12ar\\xf2\\u31e3\\u0200achq\\u327b\\u3280\\u10bc\\u3285quo;\\u603ar;\\uc000\\ud835\\udcc7\\u0100bu\\u30fb\\u328ao\\u0100;r\\u0214\\u0213\\u0180hir\\u3297\\u329b\\u32a0re\\xe5\\u31f8mes;\\u62cai\\u0200;efl\\u32aa\\u1059\\u1821\\u32ab\\u65b9tri;\\u69celuhar;\\u6968;\\u611e\\u0d61\\u32d5\\u32db\\u32df\\u332c\\u3338\\u3371\\0\\u337a\\u33a4\\0\\0\\u33ec\\u33f0\\0\\u3428\\u3448\\u345a\\u34ad\\u34b1\\u34ca\\u34f1\\0\\u3616\\0\\0\\u3633cute;\\u415bqu\\xef\\u27ba\\u0500;Eaceinpsy\\u11ed\\u32f3\\u32f5\\u32ff\\u3302\\u330b\\u330f\\u331f\\u3326\\u3329;\\u6ab4\\u01f0\\u32fa\\0\\u32fc;\\u6ab8on;\\u4161u\\xe5\\u11fe\\u0100;d\\u11f3\\u3307il;\\u415frc;\\u415d\\u0180Eas\\u3316\\u3318\\u331b;\\u6ab6p;\\u6abaim;\\u62e9olint;\\u6a13i\\xed\\u1204;\\u4441ot\\u0180;be\\u3334\\u1d47\\u3335\\u62c5;\\u6a66\\u0380Aacmstx\\u3346\\u334a\\u3357\\u335b\\u335e\\u3363\\u336drr;\\u61d8r\\u0100hr\\u3350\\u3352\\xeb\\u2228\\u0100;o\\u0a36\\u0a34t\\u803b\\xa7\\u40a7i;\\u403bwar;\\u6929m\\u0100in\\u3369\\xf0nu\\xf3\\xf1t;\\u6736r\\u0100;o\\u3376\\u2055\\uc000\\ud835\\udd30\\u0200acoy\\u3382\\u3386\\u3391\\u33a0rp;\\u666f\\u0100hy\\u338b\\u338fcy;\\u4449;\\u4448rt\\u026d\\u3399\\0\\0\\u339ci\\xe4\\u1464ara\\xec\\u2e6f\\u803b\\xad\\u40ad\\u0100gm\\u33a8\\u33b4ma\\u0180;fv\\u33b1\\u33b2\\u33b2\\u43c3;\\u43c2\\u0400;deglnpr\\u12ab\\u33c5\\u33c9\\u33ce\\u33d6\\u33de\\u33e1\\u33e6ot;\\u6a6a\\u0100;q\\u12b1\\u12b0\\u0100;E\\u33d3\\u33d4\\u6a9e;\\u6aa0\\u0100;E\\u33db\\u33dc\\u6a9d;\\u6a9fe;\\u6246lus;\\u6a24arr;\\u6972ar\\xf2\\u113d\\u0200aeit\\u33f8\\u3408\\u340f\\u3417\\u0100ls\\u33fd\\u3404lsetm\\xe9\\u336ahp;\\u6a33parsl;\\u69e4\\u0100dl\\u1463\\u3414e;\\u6323\\u0100;e\\u341c\\u341d\\u6aaa\\u0100;s\\u3422\\u3423\\u6aac;\\uc000\\u2aac\\ufe00\\u0180flp\\u342e\\u3433\\u3442tcy;\\u444c\\u0100;b\\u3438\\u3439\\u402f\\u0100;a\\u343e\\u343f\\u69c4r;\\u633ff;\\uc000\\ud835\\udd64a\\u0100dr\\u344d\\u0402es\\u0100;u\\u3454\\u3455\\u6660it\\xbb\\u3455\\u0180csu\\u3460\\u3479\\u349f\\u0100au\\u3465\\u346fp\\u0100;s\\u1188\\u346b;\\uc000\\u2293\\ufe00p\\u0100;s\\u11b4\\u3475;\\uc000\\u2294\\ufe00u\\u0100bp\\u347f\\u348f\\u0180;es\\u1197\\u119c\\u3486et\\u0100;e\\u1197\\u348d\\xf1\\u119d\\u0180;es\\u11a8\\u11ad\\u3496et\\u0100;e\\u11a8\\u349d\\xf1\\u11ae\\u0180;af\\u117b\\u34a6\\u05b0r\\u0165\\u34ab\\u05b1\\xbb\\u117car\\xf2\\u1148\\u0200cemt\\u34b9\\u34be\\u34c2\\u34c5r;\\uc000\\ud835\\udcc8tm\\xee\\xf1i\\xec\\u3415ar\\xe6\\u11be\\u0100ar\\u34ce\\u34d5r\\u0100;f\\u34d4\\u17bf\\u6606\\u0100an\\u34da\\u34edight\\u0100ep\\u34e3\\u34eapsilo\\xee\\u1ee0h\\xe9\\u2eafs\\xbb\\u2852\\u0280bcmnp\\u34fb\\u355e\\u1209\\u358b\\u358e\\u0480;Edemnprs\\u350e\\u350f\\u3511\\u3515\\u351e\\u3523\\u352c\\u3531\\u3536\\u6282;\\u6ac5ot;\\u6abd\\u0100;d\\u11da\\u351aot;\\u6ac3ult;\\u6ac1\\u0100Ee\\u3528\\u352a;\\u6acb;\\u628alus;\\u6abfarr;\\u6979\\u0180eiu\\u353d\\u3552\\u3555t\\u0180;en\\u350e\\u3545\\u354bq\\u0100;q\\u11da\\u350feq\\u0100;q\\u352b\\u3528m;\\u6ac7\\u0100bp\\u355a\\u355c;\\u6ad5;\\u6ad3c\\u0300;acens\\u11ed\\u356c\\u3572\\u3579\\u357b\\u3326ppro\\xf8\\u32faurlye\\xf1\\u11fe\\xf1\\u11f3\\u0180aes\\u3582\\u3588\\u331bppro\\xf8\\u331aq\\xf1\\u3317g;\\u666a\\u0680123;Edehlmnps\\u35a9\\u35ac\\u35af\\u121c\\u35b2\\u35b4\\u35c0\\u35c9\\u35d5\\u35da\\u35df\\u35e8\\u35ed\\u803b\\xb9\\u40b9\\u803b\\xb2\\u40b2\\u803b\\xb3\\u40b3;\\u6ac6\\u0100os\\u35b9\\u35bct;\\u6abeub;\\u6ad8\\u0100;d\\u1222\\u35c5ot;\\u6ac4s\\u0100ou\\u35cf\\u35d2l;\\u67c9b;\\u6ad7arr;\\u697bult;\\u6ac2\\u0100Ee\\u35e4\\u35e6;\\u6acc;\\u628blus;\\u6ac0\\u0180eiu\\u35f4\\u3609\\u360ct\\u0180;en\\u121c\\u35fc\\u3602q\\u0100;q\\u1222\\u35b2eq\\u0100;q\\u35e7\\u35e4m;\\u6ac8\\u0100bp\\u3611\\u3613;\\u6ad4;\\u6ad6\\u0180Aan\\u361c\\u3620\\u362drr;\\u61d9r\\u0100hr\\u3626\\u3628\\xeb\\u222e\\u0100;o\\u0a2b\\u0a29war;\\u692alig\\u803b\\xdf\\u40df\\u0be1\\u3651\\u365d\\u3660\\u12ce\\u3673\\u3679\\0\\u367e\\u36c2\\0\\0\\0\\0\\0\\u36db\\u3703\\0\\u3709\\u376c\\0\\0\\0\\u3787\\u0272\\u3656\\0\\0\\u365bget;\\u6316;\\u43c4r\\xeb\\u0e5f\\u0180aey\\u3666\\u366b\\u3670ron;\\u4165dil;\\u4163;\\u4442lrec;\\u6315r;\\uc000\\ud835\\udd31\\u0200eiko\\u3686\\u369d\\u36b5\\u36bc\\u01f2\\u368b\\0\\u3691e\\u01004f\\u1284\\u1281a\\u0180;sv\\u3698\\u3699\\u369b\\u43b8ym;\\u43d1\\u0100cn\\u36a2\\u36b2k\\u0100as\\u36a8\\u36aeppro\\xf8\\u12c1im\\xbb\\u12acs\\xf0\\u129e\\u0100as\\u36ba\\u36ae\\xf0\\u12c1rn\\u803b\\xfe\\u40fe\\u01ec\\u031f\\u36c6\\u22e7es\\u8180\\xd7;bd\\u36cf\\u36d0\\u36d8\\u40d7\\u0100;a\\u190f\\u36d5r;\\u6a31;\\u6a30\\u0180eps\\u36e1\\u36e3\\u3700\\xe1\\u2a4d\\u0200;bcf\\u0486\\u36ec\\u36f0\\u36f4ot;\\u6336ir;\\u6af1\\u0100;o\\u36f9\\u36fc\\uc000\\ud835\\udd65rk;\\u6ada\\xe1\\u3362rime;\\u6034\\u0180aip\\u370f\\u3712\\u3764d\\xe5\\u1248\\u0380adempst\\u3721\\u374d\\u3740\\u3751\\u3757\\u375c\\u375fngle\\u0280;dlqr\\u3730\\u3731\\u3736\\u3740\\u3742\\u65b5own\\xbb\\u1dbbeft\\u0100;e\\u2800\\u373e\\xf1\\u092e;\\u625cight\\u0100;e\\u32aa\\u374b\\xf1\\u105aot;\\u65ecinus;\\u6a3alus;\\u6a39b;\\u69cdime;\\u6a3bezium;\\u63e2\\u0180cht\\u3772\\u377d\\u3781\\u0100ry\\u3777\\u377b;\\uc000\\ud835\\udcc9;\\u4446cy;\\u445brok;\\u4167\\u0100io\\u378b\\u378ex\\xf4\\u1777head\\u0100lr\\u3797\\u37a0eftarro\\xf7\\u084fightarrow\\xbb\\u0f5d\\u0900AHabcdfghlmoprstuw\\u37d0\\u37d3\\u37d7\\u37e4\\u37f0\\u37fc\\u380e\\u381c\\u3823\\u3834\\u3851\\u385d\\u386b\\u38a9\\u38cc\\u38d2\\u38ea\\u38f6r\\xf2\\u03edar;\\u6963\\u0100cr\\u37dc\\u37e2ute\\u803b\\xfa\\u40fa\\xf2\\u1150r\\u01e3\\u37ea\\0\\u37edy;\\u445eve;\\u416d\\u0100iy\\u37f5\\u37farc\\u803b\\xfb\\u40fb;\\u4443\\u0180abh\\u3803\\u3806\\u380br\\xf2\\u13adlac;\\u4171a\\xf2\\u13c3\\u0100ir\\u3813\\u3818sht;\\u697e;\\uc000\\ud835\\udd32rave\\u803b\\xf9\\u40f9\\u0161\\u3827\\u3831r\\u0100lr\\u382c\\u382e\\xbb\\u0957\\xbb\\u1083lk;\\u6580\\u0100ct\\u3839\\u384d\\u026f\\u383f\\0\\0\\u384arn\\u0100;e\\u3845\\u3846\\u631cr\\xbb\\u3846op;\\u630fri;\\u65f8\\u0100al\\u3856\\u385acr;\\u416b\\u80bb\\xa8\\u0349\\u0100gp\\u3862\\u3866on;\\u4173f;\\uc000\\ud835\\udd66\\u0300adhlsu\\u114b\\u3878\\u387d\\u1372\\u3891\\u38a0own\\xe1\\u13b3arpoon\\u0100lr\\u3888\\u388cef\\xf4\\u382digh\\xf4\\u382fi\\u0180;hl\\u3899\\u389a\\u389c\\u43c5\\xbb\\u13faon\\xbb\\u389aparrows;\\u61c8\\u0180cit\\u38b0\\u38c4\\u38c8\\u026f\\u38b6\\0\\0\\u38c1rn\\u0100;e\\u38bc\\u38bd\\u631dr\\xbb\\u38bdop;\\u630eng;\\u416fri;\\u65f9cr;\\uc000\\ud835\\udcca\\u0180dir\\u38d9\\u38dd\\u38e2ot;\\u62f0lde;\\u4169i\\u0100;f\\u3730\\u38e8\\xbb\\u1813\\u0100am\\u38ef\\u38f2r\\xf2\\u38a8l\\u803b\\xfc\\u40fcangle;\\u69a7\\u0780ABDacdeflnoprsz\\u391c\\u391f\\u3929\\u392d\\u39b5\\u39b8\\u39bd\\u39df\\u39e4\\u39e8\\u39f3\\u39f9\\u39fd\\u3a01\\u3a20r\\xf2\\u03f7ar\\u0100;v\\u3926\\u3927\\u6ae8;\\u6ae9as\\xe8\\u03e1\\u0100nr\\u3932\\u3937grt;\\u699c\\u0380eknprst\\u34e3\\u3946\\u394b\\u3952\\u395d\\u3964\\u3996app\\xe1\\u2415othin\\xe7\\u1e96\\u0180hir\\u34eb\\u2ec8\\u3959op\\xf4\\u2fb5\\u0100;h\\u13b7\\u3962\\xef\\u318d\\u0100iu\\u3969\\u396dgm\\xe1\\u33b3\\u0100bp\\u3972\\u3984setneq\\u0100;q\\u397d\\u3980\\uc000\\u228a\\ufe00;\\uc000\\u2acb\\ufe00setneq\\u0100;q\\u398f\\u3992\\uc000\\u228b\\ufe00;\\uc000\\u2acc\\ufe00\\u0100hr\\u399b\\u399fet\\xe1\\u369ciangle\\u0100lr\\u39aa\\u39afeft\\xbb\\u0925ight\\xbb\\u1051y;\\u4432ash\\xbb\\u1036\\u0180elr\\u39c4\\u39d2\\u39d7\\u0180;be\\u2dea\\u39cb\\u39cfar;\\u62bbq;\\u625alip;\\u62ee\\u0100bt\\u39dc\\u1468a\\xf2\\u1469r;\\uc000\\ud835\\udd33tr\\xe9\\u39aesu\\u0100bp\\u39ef\\u39f1\\xbb\\u0d1c\\xbb\\u0d59pf;\\uc000\\ud835\\udd67ro\\xf0\\u0efbtr\\xe9\\u39b4\\u0100cu\\u3a06\\u3a0br;\\uc000\\ud835\\udccb\\u0100bp\\u3a10\\u3a18n\\u0100Ee\\u3980\\u3a16\\xbb\\u397en\\u0100Ee\\u3992\\u3a1e\\xbb\\u3990igzag;\\u699a\\u0380cefoprs\\u3a36\\u3a3b\\u3a56\\u3a5b\\u3a54\\u3a61\\u3a6airc;\\u4175\\u0100di\\u3a40\\u3a51\\u0100bg\\u3a45\\u3a49ar;\\u6a5fe\\u0100;q\\u15fa\\u3a4f;\\u6259erp;\\u6118r;\\uc000\\ud835\\udd34pf;\\uc000\\ud835\\udd68\\u0100;e\\u1479\\u3a66at\\xe8\\u1479cr;\\uc000\\ud835\\udccc\\u0ae3\\u178e\\u3a87\\0\\u3a8b\\0\\u3a90\\u3a9b\\0\\0\\u3a9d\\u3aa8\\u3aab\\u3aaf\\0\\0\\u3ac3\\u3ace\\0\\u3ad8\\u17dc\\u17dftr\\xe9\\u17d1r;\\uc000\\ud835\\udd35\\u0100Aa\\u3a94\\u3a97r\\xf2\\u03c3r\\xf2\\u09f6;\\u43be\\u0100Aa\\u3aa1\\u3aa4r\\xf2\\u03b8r\\xf2\\u09eba\\xf0\\u2713is;\\u62fb\\u0180dpt\\u17a4\\u3ab5\\u3abe\\u0100fl\\u3aba\\u17a9;\\uc000\\ud835\\udd69im\\xe5\\u17b2\\u0100Aa\\u3ac7\\u3acar\\xf2\\u03cer\\xf2\\u0a01\\u0100cq\\u3ad2\\u17b8r;\\uc000\\ud835\\udccd\\u0100pt\\u17d6\\u3adcr\\xe9\\u17d4\\u0400acefiosu\\u3af0\\u3afd\\u3b08\\u3b0c\\u3b11\\u3b15\\u3b1b\\u3b21c\\u0100uy\\u3af6\\u3afbte\\u803b\\xfd\\u40fd;\\u444f\\u0100iy\\u3b02\\u3b06rc;\\u4177;\\u444bn\\u803b\\xa5\\u40a5r;\\uc000\\ud835\\udd36cy;\\u4457pf;\\uc000\\ud835\\udd6acr;\\uc000\\ud835\\udcce\\u0100cm\\u3b26\\u3b29y;\\u444el\\u803b\\xff\\u40ff\\u0500acdefhiosw\\u3b42\\u3b48\\u3b54\\u3b58\\u3b64\\u3b69\\u3b6d\\u3b74\\u3b7a\\u3b80cute;\\u417a\\u0100ay\\u3b4d\\u3b52ron;\\u417e;\\u4437ot;\\u417c\\u0100et\\u3b5d\\u3b61tr\\xe6\\u155fa;\\u43b6r;\\uc000\\ud835\\udd37cy;\\u4436grarr;\\u61ddpf;\\uc000\\ud835\\udd6bcr;\\uc000\\ud835\\udccf\\u0100jn\\u3b85\\u3b87;\\u600dj;\\u600c\".split(\"\").map((c)=>c.charCodeAt(0)));\n\n\t// Generated using scripts/write-decode-map.ts\n\tvar xmlDecodeTree = new Uint16Array(// prettier-ignore\n\t\"\\u0200aglq\\t\\x15\\x18\\x1b\\u026d\\x0f\\0\\0\\x12p;\\u4026os;\\u4027t;\\u403et;\\u403cuot;\\u4022\".split(\"\").map((c)=>c.charCodeAt(0)));\n\n\t// Adapted from https://github.com/mathiasbynens/he/blob/36afe179392226cf1b6ccdb16ebbb7a5a844d93a/src/he.js#L106-L134\n\tvar _a;\n\tconst decodeMap = new Map([\n\t    [\n\t        0,\n\t        65533\n\t    ],\n\t    // C1 Unicode control character reference replacements\n\t    [\n\t        128,\n\t        8364\n\t    ],\n\t    [\n\t        130,\n\t        8218\n\t    ],\n\t    [\n\t        131,\n\t        402\n\t    ],\n\t    [\n\t        132,\n\t        8222\n\t    ],\n\t    [\n\t        133,\n\t        8230\n\t    ],\n\t    [\n\t        134,\n\t        8224\n\t    ],\n\t    [\n\t        135,\n\t        8225\n\t    ],\n\t    [\n\t        136,\n\t        710\n\t    ],\n\t    [\n\t        137,\n\t        8240\n\t    ],\n\t    [\n\t        138,\n\t        352\n\t    ],\n\t    [\n\t        139,\n\t        8249\n\t    ],\n\t    [\n\t        140,\n\t        338\n\t    ],\n\t    [\n\t        142,\n\t        381\n\t    ],\n\t    [\n\t        145,\n\t        8216\n\t    ],\n\t    [\n\t        146,\n\t        8217\n\t    ],\n\t    [\n\t        147,\n\t        8220\n\t    ],\n\t    [\n\t        148,\n\t        8221\n\t    ],\n\t    [\n\t        149,\n\t        8226\n\t    ],\n\t    [\n\t        150,\n\t        8211\n\t    ],\n\t    [\n\t        151,\n\t        8212\n\t    ],\n\t    [\n\t        152,\n\t        732\n\t    ],\n\t    [\n\t        153,\n\t        8482\n\t    ],\n\t    [\n\t        154,\n\t        353\n\t    ],\n\t    [\n\t        155,\n\t        8250\n\t    ],\n\t    [\n\t        156,\n\t        339\n\t    ],\n\t    [\n\t        158,\n\t        382\n\t    ],\n\t    [\n\t        159,\n\t        376\n\t    ]\n\t]);\n\t/**\n\t * Polyfill for `String.fromCodePoint`. It is used to create a string from a Unicode code point.\n\t */ const fromCodePoint$1 = // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition, node/no-unsupported-features/es-builtins\n\t(_a = String.fromCodePoint) !== null && _a !== void 0 ? _a : function(codePoint) {\n\t    let output = \"\";\n\t    if (codePoint > 0xffff) {\n\t        codePoint -= 0x10000;\n\t        output += String.fromCharCode(codePoint >>> 10 & 0x3ff | 0xd800);\n\t        codePoint = 0xdc00 | codePoint & 0x3ff;\n\t    }\n\t    output += String.fromCharCode(codePoint);\n\t    return output;\n\t};\n\t/**\n\t * Replace the given code point with a replacement character if it is a\n\t * surrogate or is outside the valid range. Otherwise return the code\n\t * point unchanged.\n\t */ function replaceCodePoint(codePoint) {\n\t    var _a;\n\t    if (codePoint >= 0xd800 && codePoint <= 0xdfff || codePoint > 0x10ffff) {\n\t        return 0xfffd;\n\t    }\n\t    return (_a = decodeMap.get(codePoint)) !== null && _a !== void 0 ? _a : codePoint;\n\t}\n\n\tvar CharCodes;\n\t(function(CharCodes) {\n\t    CharCodes[CharCodes[\"NUM\"] = 35] = \"NUM\";\n\t    CharCodes[CharCodes[\"SEMI\"] = 59] = \"SEMI\";\n\t    CharCodes[CharCodes[\"EQUALS\"] = 61] = \"EQUALS\";\n\t    CharCodes[CharCodes[\"ZERO\"] = 48] = \"ZERO\";\n\t    CharCodes[CharCodes[\"NINE\"] = 57] = \"NINE\";\n\t    CharCodes[CharCodes[\"LOWER_A\"] = 97] = \"LOWER_A\";\n\t    CharCodes[CharCodes[\"LOWER_F\"] = 102] = \"LOWER_F\";\n\t    CharCodes[CharCodes[\"LOWER_X\"] = 120] = \"LOWER_X\";\n\t    CharCodes[CharCodes[\"LOWER_Z\"] = 122] = \"LOWER_Z\";\n\t    CharCodes[CharCodes[\"UPPER_A\"] = 65] = \"UPPER_A\";\n\t    CharCodes[CharCodes[\"UPPER_F\"] = 70] = \"UPPER_F\";\n\t    CharCodes[CharCodes[\"UPPER_Z\"] = 90] = \"UPPER_Z\";\n\t})(CharCodes || (CharCodes = {}));\n\t/** Bit that needs to be set to convert an upper case ASCII character to lower case */ const TO_LOWER_BIT = 0b100000;\n\tvar BinTrieFlags;\n\t(function(BinTrieFlags) {\n\t    BinTrieFlags[BinTrieFlags[\"VALUE_LENGTH\"] = 49152] = \"VALUE_LENGTH\";\n\t    BinTrieFlags[BinTrieFlags[\"BRANCH_LENGTH\"] = 16256] = \"BRANCH_LENGTH\";\n\t    BinTrieFlags[BinTrieFlags[\"JUMP_TABLE\"] = 127] = \"JUMP_TABLE\";\n\t})(BinTrieFlags || (BinTrieFlags = {}));\n\tfunction isNumber(code) {\n\t    return code >= CharCodes.ZERO && code <= CharCodes.NINE;\n\t}\n\tfunction isHexadecimalCharacter(code) {\n\t    return code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_F || code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_F;\n\t}\n\tfunction isAsciiAlphaNumeric(code) {\n\t    return code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_Z || code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_Z || isNumber(code);\n\t}\n\t/**\n\t * Checks if the given character is a valid end character for an entity in an attribute.\n\t *\n\t * Attribute values that aren't terminated properly aren't parsed, and shouldn't lead to a parser error.\n\t * See the example in https://html.spec.whatwg.org/multipage/parsing.html#named-character-reference-state\n\t */ function isEntityInAttributeInvalidEnd(code) {\n\t    return code === CharCodes.EQUALS || isAsciiAlphaNumeric(code);\n\t}\n\tvar EntityDecoderState;\n\t(function(EntityDecoderState) {\n\t    EntityDecoderState[EntityDecoderState[\"EntityStart\"] = 0] = \"EntityStart\";\n\t    EntityDecoderState[EntityDecoderState[\"NumericStart\"] = 1] = \"NumericStart\";\n\t    EntityDecoderState[EntityDecoderState[\"NumericDecimal\"] = 2] = \"NumericDecimal\";\n\t    EntityDecoderState[EntityDecoderState[\"NumericHex\"] = 3] = \"NumericHex\";\n\t    EntityDecoderState[EntityDecoderState[\"NamedEntity\"] = 4] = \"NamedEntity\";\n\t})(EntityDecoderState || (EntityDecoderState = {}));\n\tvar DecodingMode;\n\t(function(DecodingMode) {\n\t    /** Entities in text nodes that can end with any character. */ DecodingMode[DecodingMode[\"Legacy\"] = 0] = \"Legacy\";\n\t    /** Only allow entities terminated with a semicolon. */ DecodingMode[DecodingMode[\"Strict\"] = 1] = \"Strict\";\n\t    /** Entities in attributes have limitations on ending characters. */ DecodingMode[DecodingMode[\"Attribute\"] = 2] = \"Attribute\";\n\t})(DecodingMode || (DecodingMode = {}));\n\t/**\n\t * Token decoder with support of writing partial entities.\n\t */ class EntityDecoder {\n\t    /** Resets the instance to make it reusable. */ startEntity(decodeMode) {\n\t        this.decodeMode = decodeMode;\n\t        this.state = EntityDecoderState.EntityStart;\n\t        this.result = 0;\n\t        this.treeIndex = 0;\n\t        this.excess = 1;\n\t        this.consumed = 1;\n\t    }\n\t    /**\n\t     * Write an entity to the decoder. This can be called multiple times with partial entities.\n\t     * If the entity is incomplete, the decoder will return -1.\n\t     *\n\t     * Mirrors the implementation of `getDecoder`, but with the ability to stop decoding if the\n\t     * entity is incomplete, and resume when the next string is written.\n\t     *\n\t     * @param string The string containing the entity (or a continuation of the entity).\n\t     * @param offset The offset at which the entity begins. Should be 0 if this is not the first call.\n\t     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n\t     */ write(str, offset) {\n\t        switch(this.state){\n\t            case EntityDecoderState.EntityStart:\n\t                {\n\t                    if (str.charCodeAt(offset) === CharCodes.NUM) {\n\t                        this.state = EntityDecoderState.NumericStart;\n\t                        this.consumed += 1;\n\t                        return this.stateNumericStart(str, offset + 1);\n\t                    }\n\t                    this.state = EntityDecoderState.NamedEntity;\n\t                    return this.stateNamedEntity(str, offset);\n\t                }\n\t            case EntityDecoderState.NumericStart:\n\t                {\n\t                    return this.stateNumericStart(str, offset);\n\t                }\n\t            case EntityDecoderState.NumericDecimal:\n\t                {\n\t                    return this.stateNumericDecimal(str, offset);\n\t                }\n\t            case EntityDecoderState.NumericHex:\n\t                {\n\t                    return this.stateNumericHex(str, offset);\n\t                }\n\t            case EntityDecoderState.NamedEntity:\n\t                {\n\t                    return this.stateNamedEntity(str, offset);\n\t                }\n\t        }\n\t    }\n\t    /**\n\t     * Switches between the numeric decimal and hexadecimal states.\n\t     *\n\t     * Equivalent to the `Numeric character reference state` in the HTML spec.\n\t     *\n\t     * @param str The string containing the entity (or a continuation of the entity).\n\t     * @param offset The current offset.\n\t     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n\t     */ stateNumericStart(str, offset) {\n\t        if (offset >= str.length) {\n\t            return -1;\n\t        }\n\t        if ((str.charCodeAt(offset) | TO_LOWER_BIT) === CharCodes.LOWER_X) {\n\t            this.state = EntityDecoderState.NumericHex;\n\t            this.consumed += 1;\n\t            return this.stateNumericHex(str, offset + 1);\n\t        }\n\t        this.state = EntityDecoderState.NumericDecimal;\n\t        return this.stateNumericDecimal(str, offset);\n\t    }\n\t    addToNumericResult(str, start, end, base) {\n\t        if (start !== end) {\n\t            const digitCount = end - start;\n\t            this.result = this.result * Math.pow(base, digitCount) + parseInt(str.substr(start, digitCount), base);\n\t            this.consumed += digitCount;\n\t        }\n\t    }\n\t    /**\n\t     * Parses a hexadecimal numeric entity.\n\t     *\n\t     * Equivalent to the `Hexademical character reference state` in the HTML spec.\n\t     *\n\t     * @param str The string containing the entity (or a continuation of the entity).\n\t     * @param offset The current offset.\n\t     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n\t     */ stateNumericHex(str, offset) {\n\t        const startIdx = offset;\n\t        while(offset < str.length){\n\t            const char = str.charCodeAt(offset);\n\t            if (isNumber(char) || isHexadecimalCharacter(char)) {\n\t                offset += 1;\n\t            } else {\n\t                this.addToNumericResult(str, startIdx, offset, 16);\n\t                return this.emitNumericEntity(char, 3);\n\t            }\n\t        }\n\t        this.addToNumericResult(str, startIdx, offset, 16);\n\t        return -1;\n\t    }\n\t    /**\n\t     * Parses a decimal numeric entity.\n\t     *\n\t     * Equivalent to the `Decimal character reference state` in the HTML spec.\n\t     *\n\t     * @param str The string containing the entity (or a continuation of the entity).\n\t     * @param offset The current offset.\n\t     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n\t     */ stateNumericDecimal(str, offset) {\n\t        const startIdx = offset;\n\t        while(offset < str.length){\n\t            const char = str.charCodeAt(offset);\n\t            if (isNumber(char)) {\n\t                offset += 1;\n\t            } else {\n\t                this.addToNumericResult(str, startIdx, offset, 10);\n\t                return this.emitNumericEntity(char, 2);\n\t            }\n\t        }\n\t        this.addToNumericResult(str, startIdx, offset, 10);\n\t        return -1;\n\t    }\n\t    /**\n\t     * Validate and emit a numeric entity.\n\t     *\n\t     * Implements the logic from the `Hexademical character reference start\n\t     * state` and `Numeric character reference end state` in the HTML spec.\n\t     *\n\t     * @param lastCp The last code point of the entity. Used to see if the\n\t     *               entity was terminated with a semicolon.\n\t     * @param expectedLength The minimum number of characters that should be\n\t     *                       consumed. Used to validate that at least one digit\n\t     *                       was consumed.\n\t     * @returns The number of characters that were consumed.\n\t     */ emitNumericEntity(lastCp, expectedLength) {\n\t        var _a;\n\t        // Ensure we consumed at least one digit.\n\t        if (this.consumed <= expectedLength) {\n\t            (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);\n\t            return 0;\n\t        }\n\t        // Figure out if this is a legit end of the entity\n\t        if (lastCp === CharCodes.SEMI) {\n\t            this.consumed += 1;\n\t        } else if (this.decodeMode === DecodingMode.Strict) {\n\t            return 0;\n\t        }\n\t        this.emitCodePoint(replaceCodePoint(this.result), this.consumed);\n\t        if (this.errors) {\n\t            if (lastCp !== CharCodes.SEMI) {\n\t                this.errors.missingSemicolonAfterCharacterReference();\n\t            }\n\t            this.errors.validateNumericCharacterReference(this.result);\n\t        }\n\t        return this.consumed;\n\t    }\n\t    /**\n\t     * Parses a named entity.\n\t     *\n\t     * Equivalent to the `Named character reference state` in the HTML spec.\n\t     *\n\t     * @param str The string containing the entity (or a continuation of the entity).\n\t     * @param offset The current offset.\n\t     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n\t     */ stateNamedEntity(str, offset) {\n\t        const { decodeTree } = this;\n\t        let current = decodeTree[this.treeIndex];\n\t        // The mask is the number of bytes of the value, including the current byte.\n\t        let valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;\n\t        for(; offset < str.length; offset++, this.excess++){\n\t            const char = str.charCodeAt(offset);\n\t            this.treeIndex = determineBranch(decodeTree, current, this.treeIndex + Math.max(1, valueLength), char);\n\t            if (this.treeIndex < 0) {\n\t                return this.result === 0 || // If we are parsing an attribute\n\t                this.decodeMode === DecodingMode.Attribute && // We shouldn't have consumed any characters after the entity,\n\t                (valueLength === 0 || // And there should be no invalid characters.\n\t                isEntityInAttributeInvalidEnd(char)) ? 0 : this.emitNotTerminatedNamedEntity();\n\t            }\n\t            current = decodeTree[this.treeIndex];\n\t            valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;\n\t            // If the branch is a value, store it and continue\n\t            if (valueLength !== 0) {\n\t                // If the entity is terminated by a semicolon, we are done.\n\t                if (char === CharCodes.SEMI) {\n\t                    return this.emitNamedEntityData(this.treeIndex, valueLength, this.consumed + this.excess);\n\t                }\n\t                // If we encounter a non-terminated (legacy) entity while parsing strictly, then ignore it.\n\t                if (this.decodeMode !== DecodingMode.Strict) {\n\t                    this.result = this.treeIndex;\n\t                    this.consumed += this.excess;\n\t                    this.excess = 0;\n\t                }\n\t            }\n\t        }\n\t        return -1;\n\t    }\n\t    /**\n\t     * Emit a named entity that was not terminated with a semicolon.\n\t     *\n\t     * @returns The number of characters consumed.\n\t     */ emitNotTerminatedNamedEntity() {\n\t        var _a;\n\t        const { result, decodeTree } = this;\n\t        const valueLength = (decodeTree[result] & BinTrieFlags.VALUE_LENGTH) >> 14;\n\t        this.emitNamedEntityData(result, valueLength, this.consumed);\n\t        (_a = this.errors) === null || _a === void 0 ? void 0 : _a.missingSemicolonAfterCharacterReference();\n\t        return this.consumed;\n\t    }\n\t    /**\n\t     * Emit a named entity.\n\t     *\n\t     * @param result The index of the entity in the decode tree.\n\t     * @param valueLength The number of bytes in the entity.\n\t     * @param consumed The number of characters consumed.\n\t     *\n\t     * @returns The number of characters consumed.\n\t     */ emitNamedEntityData(result, valueLength, consumed) {\n\t        const { decodeTree } = this;\n\t        this.emitCodePoint(valueLength === 1 ? decodeTree[result] & ~BinTrieFlags.VALUE_LENGTH : decodeTree[result + 1], consumed);\n\t        if (valueLength === 3) {\n\t            // For multi-byte values, we need to emit the second byte.\n\t            this.emitCodePoint(decodeTree[result + 2], consumed);\n\t        }\n\t        return consumed;\n\t    }\n\t    /**\n\t     * Signal to the parser that the end of the input was reached.\n\t     *\n\t     * Remaining data will be emitted and relevant errors will be produced.\n\t     *\n\t     * @returns The number of characters consumed.\n\t     */ end() {\n\t        var _a;\n\t        switch(this.state){\n\t            case EntityDecoderState.NamedEntity:\n\t                {\n\t                    // Emit a named entity if we have one.\n\t                    return this.result !== 0 && (this.decodeMode !== DecodingMode.Attribute || this.result === this.treeIndex) ? this.emitNotTerminatedNamedEntity() : 0;\n\t                }\n\t            // Otherwise, emit a numeric entity if we have one.\n\t            case EntityDecoderState.NumericDecimal:\n\t                {\n\t                    return this.emitNumericEntity(0, 2);\n\t                }\n\t            case EntityDecoderState.NumericHex:\n\t                {\n\t                    return this.emitNumericEntity(0, 3);\n\t                }\n\t            case EntityDecoderState.NumericStart:\n\t                {\n\t                    (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);\n\t                    return 0;\n\t                }\n\t            case EntityDecoderState.EntityStart:\n\t                {\n\t                    // Return 0 if we have no entity.\n\t                    return 0;\n\t                }\n\t        }\n\t    }\n\t    constructor(/** The tree used to decode entities. */ decodeTree, /**\n\t     * The function that is called when a codepoint is decoded.\n\t     *\n\t     * For multi-byte named entities, this will be called multiple times,\n\t     * with the second codepoint, and the same `consumed` value.\n\t     *\n\t     * @param codepoint The decoded codepoint.\n\t     * @param consumed The number of bytes consumed by the decoder.\n\t     */ emitCodePoint, /** An object that is used to produce errors. */ errors){\n\t        this.decodeTree = decodeTree;\n\t        this.emitCodePoint = emitCodePoint;\n\t        this.errors = errors;\n\t        /** The current state of the decoder. */ this.state = EntityDecoderState.EntityStart;\n\t        /** Characters that were consumed while parsing an entity. */ this.consumed = 1;\n\t        /**\n\t         * The result of the entity.\n\t         *\n\t         * Either the result index of a numeric entity, or the codepoint of a\n\t         * numeric entity.\n\t         */ this.result = 0;\n\t        /** The current index in the decode tree. */ this.treeIndex = 0;\n\t        /** The number of characters that were consumed in excess. */ this.excess = 1;\n\t        /** The mode in which the decoder is operating. */ this.decodeMode = DecodingMode.Strict;\n\t    }\n\t}\n\t/**\n\t * Creates a function that decodes entities in a string.\n\t *\n\t * @param decodeTree The decode tree.\n\t * @returns A function that decodes entities in a string.\n\t */ function getDecoder(decodeTree) {\n\t    let ret = \"\";\n\t    const decoder = new EntityDecoder(decodeTree, (str)=>ret += fromCodePoint$1(str));\n\t    return function decodeWithTrie(str, decodeMode) {\n\t        let lastIndex = 0;\n\t        let offset = 0;\n\t        while((offset = str.indexOf(\"&\", offset)) >= 0){\n\t            ret += str.slice(lastIndex, offset);\n\t            decoder.startEntity(decodeMode);\n\t            const len = decoder.write(str, // Skip the \"&\"\n\t            offset + 1);\n\t            if (len < 0) {\n\t                lastIndex = offset + decoder.end();\n\t                break;\n\t            }\n\t            lastIndex = offset + len;\n\t            // If `len` is 0, skip the current `&` and continue.\n\t            offset = len === 0 ? lastIndex + 1 : lastIndex;\n\t        }\n\t        const result = ret + str.slice(lastIndex);\n\t        // Make sure we don't keep a reference to the final string.\n\t        ret = \"\";\n\t        return result;\n\t    };\n\t}\n\t/**\n\t * Determines the branch of the current node that is taken given the current\n\t * character. This function is used to traverse the trie.\n\t *\n\t * @param decodeTree The trie.\n\t * @param current The current node.\n\t * @param nodeIdx The index right after the current node and its value.\n\t * @param char The current character.\n\t * @returns The index of the next node, or -1 if no branch is taken.\n\t */ function determineBranch(decodeTree, current, nodeIdx, char) {\n\t    const branchCount = (current & BinTrieFlags.BRANCH_LENGTH) >> 7;\n\t    const jumpOffset = current & BinTrieFlags.JUMP_TABLE;\n\t    // Case 1: Single branch encoded in jump offset\n\t    if (branchCount === 0) {\n\t        return jumpOffset !== 0 && char === jumpOffset ? nodeIdx : -1;\n\t    }\n\t    // Case 2: Multiple branches encoded in jump table\n\t    if (jumpOffset) {\n\t        const value = char - jumpOffset;\n\t        return value < 0 || value >= branchCount ? -1 : decodeTree[nodeIdx + value] - 1;\n\t    }\n\t    // Case 3: Multiple branches encoded in dictionary\n\t    // Binary search for the character.\n\t    let lo = nodeIdx;\n\t    let hi = lo + branchCount - 1;\n\t    while(lo <= hi){\n\t        const mid = lo + hi >>> 1;\n\t        const midVal = decodeTree[mid];\n\t        if (midVal < char) {\n\t            lo = mid + 1;\n\t        } else if (midVal > char) {\n\t            hi = mid - 1;\n\t        } else {\n\t            return decodeTree[mid + branchCount];\n\t        }\n\t    }\n\t    return -1;\n\t}\n\tconst htmlDecoder = getDecoder(htmlDecodeTree);\n\tgetDecoder(xmlDecodeTree);\n\t/**\n\t * Decodes an HTML string.\n\t *\n\t * @param str The string to decode.\n\t * @param mode The decoding mode.\n\t * @returns The decoded string.\n\t */ function decodeHTML(str, mode = DecodingMode.Legacy) {\n\t    return htmlDecoder(str, mode);\n\t}\n\n\t// Utilities\n\t//\n\tfunction _class$1(obj) {\n\t    return Object.prototype.toString.call(obj);\n\t}\n\tfunction isString$1(obj) {\n\t    return _class$1(obj) === '[object String]';\n\t}\n\tconst _hasOwnProperty = Object.prototype.hasOwnProperty;\n\tfunction has(object, key) {\n\t    return _hasOwnProperty.call(object, key);\n\t}\n\t// Merge objects\n\t//\n\tfunction assign$1(obj /* from1, from2, from3, ... */ ) {\n\t    const sources = Array.prototype.slice.call(arguments, 1);\n\t    sources.forEach(function(source) {\n\t        if (!source) {\n\t            return;\n\t        }\n\t        if (typeof source !== 'object') {\n\t            throw new TypeError(source + 'must be object');\n\t        }\n\t        Object.keys(source).forEach(function(key) {\n\t            obj[key] = source[key];\n\t        });\n\t    });\n\t    return obj;\n\t}\n\t// Remove element from array and put another array at those position.\n\t// Useful for some operations with tokens\n\tfunction arrayReplaceAt(src, pos, newElements) {\n\t    return [].concat(src.slice(0, pos), newElements, src.slice(pos + 1));\n\t}\n\tfunction isValidEntityCode(c) {\n\t    /* eslint no-bitwise:0 */ // broken sequence\n\t    if (c >= 0xD800 && c <= 0xDFFF) {\n\t        return false;\n\t    }\n\t    // never used\n\t    if (c >= 0xFDD0 && c <= 0xFDEF) {\n\t        return false;\n\t    }\n\t    if ((c & 0xFFFF) === 0xFFFF || (c & 0xFFFF) === 0xFFFE) {\n\t        return false;\n\t    }\n\t    // control codes\n\t    if (c >= 0x00 && c <= 0x08) {\n\t        return false;\n\t    }\n\t    if (c === 0x0B) {\n\t        return false;\n\t    }\n\t    if (c >= 0x0E && c <= 0x1F) {\n\t        return false;\n\t    }\n\t    if (c >= 0x7F && c <= 0x9F) {\n\t        return false;\n\t    }\n\t    // out of range\n\t    if (c > 0x10FFFF) {\n\t        return false;\n\t    }\n\t    return true;\n\t}\n\tfunction fromCodePoint(c) {\n\t    /* eslint no-bitwise:0 */ if (c > 0xffff) {\n\t        c -= 0x10000;\n\t        const surrogate1 = 0xd800 + (c >> 10);\n\t        const surrogate2 = 0xdc00 + (c & 0x3ff);\n\t        return String.fromCharCode(surrogate1, surrogate2);\n\t    }\n\t    return String.fromCharCode(c);\n\t}\n\tconst UNESCAPE_MD_RE = /\\\\([!\"#$%&'()*+,\\-./:;<=>?@[\\\\\\]^_`{|}~])/g;\n\tconst ENTITY_RE = /&([a-z#][a-z0-9]{1,31});/gi;\n\tconst UNESCAPE_ALL_RE = new RegExp(UNESCAPE_MD_RE.source + '|' + ENTITY_RE.source, 'gi');\n\tconst DIGITAL_ENTITY_TEST_RE = /^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))$/i;\n\tfunction replaceEntityPattern(match, name) {\n\t    if (name.charCodeAt(0) === 0x23 /* # */  && DIGITAL_ENTITY_TEST_RE.test(name)) {\n\t        const code = name[1].toLowerCase() === 'x' ? parseInt(name.slice(2), 16) : parseInt(name.slice(1), 10);\n\t        if (isValidEntityCode(code)) {\n\t            return fromCodePoint(code);\n\t        }\n\t        return match;\n\t    }\n\t    const decoded = decodeHTML(match);\n\t    if (decoded !== match) {\n\t        return decoded;\n\t    }\n\t    return match;\n\t}\n\t/* function replaceEntities(str) {\n\t  if (str.indexOf('&') < 0) { return str; }\n\n\t  return str.replace(ENTITY_RE, replaceEntityPattern);\n\t} */ function unescapeMd(str) {\n\t    if (str.indexOf('\\\\') < 0) {\n\t        return str;\n\t    }\n\t    return str.replace(UNESCAPE_MD_RE, '$1');\n\t}\n\tfunction unescapeAll(str) {\n\t    if (str.indexOf('\\\\') < 0 && str.indexOf('&') < 0) {\n\t        return str;\n\t    }\n\t    return str.replace(UNESCAPE_ALL_RE, function(match, escaped, entity) {\n\t        if (escaped) {\n\t            return escaped;\n\t        }\n\t        return replaceEntityPattern(match, entity);\n\t    });\n\t}\n\tconst HTML_ESCAPE_TEST_RE = /[&<>\"]/;\n\tconst HTML_ESCAPE_REPLACE_RE = /[&<>\"]/g;\n\tconst HTML_REPLACEMENTS = {\n\t    '&': '&amp;',\n\t    '<': '&lt;',\n\t    '>': '&gt;',\n\t    '\"': '&quot;'\n\t};\n\tfunction replaceUnsafeChar(ch) {\n\t    return HTML_REPLACEMENTS[ch];\n\t}\n\tfunction escapeHtml(str) {\n\t    if (HTML_ESCAPE_TEST_RE.test(str)) {\n\t        return str.replace(HTML_ESCAPE_REPLACE_RE, replaceUnsafeChar);\n\t    }\n\t    return str;\n\t}\n\tconst REGEXP_ESCAPE_RE = /[.?*+^$[\\]\\\\(){}|-]/g;\n\tfunction escapeRE$1(str) {\n\t    return str.replace(REGEXP_ESCAPE_RE, '\\\\$&');\n\t}\n\tfunction isSpace(code) {\n\t    switch(code){\n\t        case 0x09:\n\t        case 0x20:\n\t            return true;\n\t    }\n\t    return false;\n\t}\n\t// Zs (unicode class) || [\\t\\f\\v\\r\\n]\n\tfunction isWhiteSpace(code) {\n\t    if (code >= 0x2000 && code <= 0x200A) {\n\t        return true;\n\t    }\n\t    switch(code){\n\t        case 0x09:\n\t        case 0x0A:\n\t        case 0x0B:\n\t        case 0x0C:\n\t        case 0x0D:\n\t        case 0x20:\n\t        case 0xA0:\n\t        case 0x1680:\n\t        case 0x202F:\n\t        case 0x205F:\n\t        case 0x3000:\n\t            return true;\n\t    }\n\t    return false;\n\t}\n\t/* eslint-disable max-len */ // Currently without astral characters support.\n\tfunction isPunctChar(ch) {\n\t    return P.test(ch) || regex.test(ch);\n\t}\n\t// Markdown ASCII punctuation characters.\n\t//\n\t// !, \", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \\, ], ^, _, `, {, |, }, or ~\n\t// http://spec.commonmark.org/0.15/#ascii-punctuation-character\n\t//\n\t// Don't confuse with unicode punctuation !!! It lacks some chars in ascii range.\n\t//\n\tfunction isMdAsciiPunct(ch) {\n\t    switch(ch){\n\t        case 0x21 /* ! */ :\n\t        case 0x22 /* \" */ :\n\t        case 0x23 /* # */ :\n\t        case 0x24 /* $ */ :\n\t        case 0x25 /* % */ :\n\t        case 0x26 /* & */ :\n\t        case 0x27 /* ' */ :\n\t        case 0x28 /* ( */ :\n\t        case 0x29 /* ) */ :\n\t        case 0x2A /* * */ :\n\t        case 0x2B /* + */ :\n\t        case 0x2C /* , */ :\n\t        case 0x2D /* - */ :\n\t        case 0x2E /* . */ :\n\t        case 0x2F /* / */ :\n\t        case 0x3A /* : */ :\n\t        case 0x3B /* ; */ :\n\t        case 0x3C /* < */ :\n\t        case 0x3D /* = */ :\n\t        case 0x3E /* > */ :\n\t        case 0x3F /* ? */ :\n\t        case 0x40 /* @ */ :\n\t        case 0x5B /* [ */ :\n\t        case 0x5C /* \\ */ :\n\t        case 0x5D /* ] */ :\n\t        case 0x5E /* ^ */ :\n\t        case 0x5F /* _ */ :\n\t        case 0x60 /* ` */ :\n\t        case 0x7B /* { */ :\n\t        case 0x7C /* | */ :\n\t        case 0x7D /* } */ :\n\t        case 0x7E /* ~ */ :\n\t            return true;\n\t        default:\n\t            return false;\n\t    }\n\t}\n\t// Hepler to unify [reference labels].\n\t//\n\tfunction normalizeReference(str) {\n\t    // Trim and collapse whitespace\n\t    //\n\t    str = str.trim().replace(/\\s+/g, ' ');\n\t    // In node v10 'ẞ'.toLowerCase() === 'Ṿ', which is presumed to be a bug\n\t    // fixed in v12 (couldn't find any details).\n\t    //\n\t    // So treat this one as a special case\n\t    // (remove this when node v10 is no longer supported).\n\t    //\n\t    if ('ẞ'.toLowerCase() === 'Ṿ') {\n\t        str = str.replace(/ẞ/g, 'ß');\n\t    }\n\t    // .toLowerCase().toUpperCase() should get rid of all differences\n\t    // between letter variants.\n\t    //\n\t    // Simple .toLowerCase() doesn't normalize 125 code points correctly,\n\t    // and .toUpperCase doesn't normalize 6 of them (list of exceptions:\n\t    // İ, ϴ, ẞ, Ω, K, Å - those are already uppercased, but have differently\n\t    // uppercased versions).\n\t    //\n\t    // Here's an example showing how it happens. Lets take greek letter omega:\n\t    // uppercase U+0398 (Θ), U+03f4 (ϴ) and lowercase U+03b8 (θ), U+03d1 (ϑ)\n\t    //\n\t    // Unicode entries:\n\t    // 0398;GREEK CAPITAL LETTER THETA;Lu;0;L;;;;;N;;;;03B8;\n\t    // 03B8;GREEK SMALL LETTER THETA;Ll;0;L;;;;;N;;;0398;;0398\n\t    // 03D1;GREEK THETA SYMBOL;Ll;0;L;<compat> 03B8;;;;N;GREEK SMALL LETTER SCRIPT THETA;;0398;;0398\n\t    // 03F4;GREEK CAPITAL THETA SYMBOL;Lu;0;L;<compat> 0398;;;;N;;;;03B8;\n\t    //\n\t    // Case-insensitive comparison should treat all of them as equivalent.\n\t    //\n\t    // But .toLowerCase() doesn't change ϑ (it's already lowercase),\n\t    // and .toUpperCase() doesn't change ϴ (already uppercase).\n\t    //\n\t    // Applying first lower then upper case normalizes any character:\n\t    // '\\u0398\\u03f4\\u03b8\\u03d1'.toLowerCase().toUpperCase() === '\\u0398\\u0398\\u0398\\u0398'\n\t    //\n\t    // Note: this is equivalent to unicode case folding; unicode normalization\n\t    // is a different step that is not required here.\n\t    //\n\t    // Final result should be uppercased, because it's later stored in an object\n\t    // (this avoid a conflict with Object.prototype members,\n\t    // most notably, `__proto__`)\n\t    //\n\t    return str.toLowerCase().toUpperCase();\n\t}\n\t// Re-export libraries commonly used in both markdown-it and its plugins,\n\t// so plugins won't have to depend on them explicitly, which reduces their\n\t// bundled size (e.g. a browser build).\n\t//\n\tconst lib = {\n\t    mdurl,\n\t    ucmicro\n\t};\n\n\tvar utils = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tarrayReplaceAt: arrayReplaceAt,\n\t\tassign: assign$1,\n\t\tescapeHtml: escapeHtml,\n\t\tescapeRE: escapeRE$1,\n\t\tfromCodePoint: fromCodePoint,\n\t\thas: has,\n\t\tisMdAsciiPunct: isMdAsciiPunct,\n\t\tisPunctChar: isPunctChar,\n\t\tisSpace: isSpace,\n\t\tisString: isString$1,\n\t\tisValidEntityCode: isValidEntityCode,\n\t\tisWhiteSpace: isWhiteSpace,\n\t\tlib: lib,\n\t\tnormalizeReference: normalizeReference,\n\t\tunescapeAll: unescapeAll,\n\t\tunescapeMd: unescapeMd\n\t});\n\n\t// Parse link label\n\t//\n\t// this function assumes that first character (\"[\") already matches;\n\t// returns the end of the label\n\t//\n\tfunction parseLinkLabel(state, start, disableNested) {\n\t    let level, found, marker, prevPos;\n\t    const max = state.posMax;\n\t    const oldPos = state.pos;\n\t    state.pos = start + 1;\n\t    level = 1;\n\t    while(state.pos < max){\n\t        marker = state.src.charCodeAt(state.pos);\n\t        if (marker === 0x5D /* ] */ ) {\n\t            level--;\n\t            if (level === 0) {\n\t                found = true;\n\t                break;\n\t            }\n\t        }\n\t        prevPos = state.pos;\n\t        state.md.inline.skipToken(state);\n\t        if (marker === 0x5B /* [ */ ) {\n\t            if (prevPos === state.pos - 1) {\n\t                // increase level if we find text `[`, which is not a part of any token\n\t                level++;\n\t            } else if (disableNested) {\n\t                state.pos = oldPos;\n\t                return -1;\n\t            }\n\t        }\n\t    }\n\t    let labelEnd = -1;\n\t    if (found) {\n\t        labelEnd = state.pos;\n\t    }\n\t    // restore old state\n\t    state.pos = oldPos;\n\t    return labelEnd;\n\t}\n\n\t// Parse link destination\n\t//\n\tfunction parseLinkDestination(str, start, max) {\n\t    let code;\n\t    let pos = start;\n\t    const result = {\n\t        ok: false,\n\t        pos: 0,\n\t        str: ''\n\t    };\n\t    if (str.charCodeAt(pos) === 0x3C /* < */ ) {\n\t        pos++;\n\t        while(pos < max){\n\t            code = str.charCodeAt(pos);\n\t            if (code === 0x0A /* \\n */ ) {\n\t                return result;\n\t            }\n\t            if (code === 0x3C /* < */ ) {\n\t                return result;\n\t            }\n\t            if (code === 0x3E /* > */ ) {\n\t                result.pos = pos + 1;\n\t                result.str = unescapeAll(str.slice(start + 1, pos));\n\t                result.ok = true;\n\t                return result;\n\t            }\n\t            if (code === 0x5C /* \\ */  && pos + 1 < max) {\n\t                pos += 2;\n\t                continue;\n\t            }\n\t            pos++;\n\t        }\n\t        // no closing '>'\n\t        return result;\n\t    }\n\t    // this should be ... } else { ... branch\n\t    let level = 0;\n\t    while(pos < max){\n\t        code = str.charCodeAt(pos);\n\t        if (code === 0x20) {\n\t            break;\n\t        }\n\t        // ascii control characters\n\t        if (code < 0x20 || code === 0x7F) {\n\t            break;\n\t        }\n\t        if (code === 0x5C /* \\ */  && pos + 1 < max) {\n\t            if (str.charCodeAt(pos + 1) === 0x20) {\n\t                break;\n\t            }\n\t            pos += 2;\n\t            continue;\n\t        }\n\t        if (code === 0x28 /* ( */ ) {\n\t            level++;\n\t            if (level > 32) {\n\t                return result;\n\t            }\n\t        }\n\t        if (code === 0x29 /* ) */ ) {\n\t            if (level === 0) {\n\t                break;\n\t            }\n\t            level--;\n\t        }\n\t        pos++;\n\t    }\n\t    if (start === pos) {\n\t        return result;\n\t    }\n\t    if (level !== 0) {\n\t        return result;\n\t    }\n\t    result.str = unescapeAll(str.slice(start, pos));\n\t    result.pos = pos;\n\t    result.ok = true;\n\t    return result;\n\t}\n\n\t// Parse link title\n\t//\n\t// Parse link title within `str` in [start, max] range,\n\t// or continue previous parsing if `prev_state` is defined (equal to result of last execution).\n\t//\n\tfunction parseLinkTitle(str, start, max, prev_state) {\n\t    let code;\n\t    let pos = start;\n\t    const state = {\n\t        // if `true`, this is a valid link title\n\t        ok: false,\n\t        // if `true`, this link can be continued on the next line\n\t        can_continue: false,\n\t        // if `ok`, it's the position of the first character after the closing marker\n\t        pos: 0,\n\t        // if `ok`, it's the unescaped title\n\t        str: '',\n\t        // expected closing marker character code\n\t        marker: 0\n\t    };\n\t    if (prev_state) {\n\t        // this is a continuation of a previous parseLinkTitle call on the next line,\n\t        // used in reference links only\n\t        state.str = prev_state.str;\n\t        state.marker = prev_state.marker;\n\t    } else {\n\t        if (pos >= max) {\n\t            return state;\n\t        }\n\t        let marker = str.charCodeAt(pos);\n\t        if (marker !== 0x22 /* \" */  && marker !== 0x27 /* ' */  && marker !== 0x28 /* ( */ ) {\n\t            return state;\n\t        }\n\t        start++;\n\t        pos++;\n\t        // if opening marker is \"(\", switch it to closing marker \")\"\n\t        if (marker === 0x28) {\n\t            marker = 0x29;\n\t        }\n\t        state.marker = marker;\n\t    }\n\t    while(pos < max){\n\t        code = str.charCodeAt(pos);\n\t        if (code === state.marker) {\n\t            state.pos = pos + 1;\n\t            state.str += unescapeAll(str.slice(start, pos));\n\t            state.ok = true;\n\t            return state;\n\t        } else if (code === 0x28 /* ( */  && state.marker === 0x29 /* ) */ ) {\n\t            return state;\n\t        } else if (code === 0x5C /* \\ */  && pos + 1 < max) {\n\t            pos++;\n\t        }\n\t        pos++;\n\t    }\n\t    // no closing marker found, but this link title may continue on the next line (for references)\n\t    state.can_continue = true;\n\t    state.str += unescapeAll(str.slice(start, pos));\n\t    return state;\n\t}\n\n\t// Just a shortcut for bulk export\n\n\tvar helpers = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tparseLinkDestination: parseLinkDestination,\n\t\tparseLinkLabel: parseLinkLabel,\n\t\tparseLinkTitle: parseLinkTitle\n\t});\n\n\tconst default_rules = {};\n\tdefault_rules.code_inline = function(tokens, idx, options, env, slf) {\n\t    const token = tokens[idx];\n\t    return '<code' + slf.renderAttrs(token) + '>' + escapeHtml(token.content) + '</code>';\n\t};\n\tdefault_rules.code_block = function(tokens, idx, options, env, slf) {\n\t    const token = tokens[idx];\n\t    return '<pre' + slf.renderAttrs(token) + '><code>' + escapeHtml(tokens[idx].content) + '</code></pre>\\n';\n\t};\n\tdefault_rules.fence = function(tokens, idx, options, env, slf) {\n\t    const token = tokens[idx];\n\t    const info = token.info ? unescapeAll(token.info).trim() : '';\n\t    let langName = '';\n\t    let langAttrs = '';\n\t    if (info) {\n\t        const arr = info.split(/(\\s+)/g);\n\t        langName = arr[0];\n\t        langAttrs = arr.slice(2).join('');\n\t    }\n\t    let highlighted;\n\t    if (options.highlight) {\n\t        highlighted = options.highlight(token.content, langName, langAttrs) || escapeHtml(token.content);\n\t    } else {\n\t        highlighted = escapeHtml(token.content);\n\t    }\n\t    if (highlighted.indexOf('<pre') === 0) {\n\t        return highlighted + '\\n';\n\t    }\n\t    // If language exists, inject class gently, without modifying original token.\n\t    // May be, one day we will add .deepClone() for token and simplify this part, but\n\t    // now we prefer to keep things local.\n\t    if (info) {\n\t        const i = token.attrIndex('class');\n\t        const tmpAttrs = token.attrs ? token.attrs.slice() : [];\n\t        if (i < 0) {\n\t            tmpAttrs.push([\n\t                'class',\n\t                options.langPrefix + langName\n\t            ]);\n\t        } else {\n\t            tmpAttrs[i] = tmpAttrs[i].slice();\n\t            tmpAttrs[i][1] += ' ' + options.langPrefix + langName;\n\t        }\n\t        // Fake token just to render attributes\n\t        const tmpToken = {\n\t            attrs: tmpAttrs\n\t        };\n\t        return `<pre><code${slf.renderAttrs(tmpToken)}>${highlighted}</code></pre>\\n`;\n\t    }\n\t    return `<pre><code${slf.renderAttrs(token)}>${highlighted}</code></pre>\\n`;\n\t};\n\tdefault_rules.image = function(tokens, idx, options, env, slf) {\n\t    const token = tokens[idx];\n\t    // \"alt\" attr MUST be set, even if empty. Because it's mandatory and\n\t    // should be placed on proper position for tests.\n\t    //\n\t    // Replace content with actual value\n\t    token.attrs[token.attrIndex('alt')][1] = slf.renderInlineAsText(token.children, options, env);\n\t    return slf.renderToken(tokens, idx, options);\n\t};\n\tdefault_rules.hardbreak = function(tokens, idx, options /*, env */ ) {\n\t    return options.xhtmlOut ? '<br />\\n' : '<br>\\n';\n\t};\n\tdefault_rules.softbreak = function(tokens, idx, options /*, env */ ) {\n\t    return options.breaks ? options.xhtmlOut ? '<br />\\n' : '<br>\\n' : '\\n';\n\t};\n\tdefault_rules.text = function(tokens, idx /*, options, env */ ) {\n\t    return escapeHtml(tokens[idx].content);\n\t};\n\tdefault_rules.html_block = function(tokens, idx /*, options, env */ ) {\n\t    return tokens[idx].content;\n\t};\n\tdefault_rules.html_inline = function(tokens, idx /*, options, env */ ) {\n\t    return tokens[idx].content;\n\t};\n\t/**\n\t * new Renderer()\n\t *\n\t * Creates new [[Renderer]] instance and fill [[Renderer#rules]] with defaults.\n\t **/ function Renderer() {\n\t    /**\n\t   * Renderer#rules -> Object\n\t   *\n\t   * Contains render rules for tokens. Can be updated and extended.\n\t   *\n\t   * ##### Example\n\t   *\n\t   * ```javascript\n\t   * var md = require('markdown-it')();\n\t   *\n\t   * md.renderer.rules.strong_open  = function () { return '<b>'; };\n\t   * md.renderer.rules.strong_close = function () { return '</b>'; };\n\t   *\n\t   * var result = md.renderInline(...);\n\t   * ```\n\t   *\n\t   * Each rule is called as independent static function with fixed signature:\n\t   *\n\t   * ```javascript\n\t   * function my_token_render(tokens, idx, options, env, renderer) {\n\t   *   // ...\n\t   *   return renderedHTML;\n\t   * }\n\t   * ```\n\t   *\n\t   * See [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.mjs)\n\t   * for more details and examples.\n\t   **/ this.rules = assign$1({}, default_rules);\n\t}\n\t/**\n\t * Renderer.renderAttrs(token) -> String\n\t *\n\t * Render token attributes to string.\n\t **/ Renderer.prototype.renderAttrs = function renderAttrs(token) {\n\t    let i, l, result;\n\t    if (!token.attrs) {\n\t        return '';\n\t    }\n\t    result = '';\n\t    for(i = 0, l = token.attrs.length; i < l; i++){\n\t        result += ' ' + escapeHtml(token.attrs[i][0]) + '=\"' + escapeHtml(token.attrs[i][1]) + '\"';\n\t    }\n\t    return result;\n\t};\n\t/**\n\t * Renderer.renderToken(tokens, idx, options) -> String\n\t * - tokens (Array): list of tokens\n\t * - idx (Numbed): token index to render\n\t * - options (Object): params of parser instance\n\t *\n\t * Default token renderer. Can be overriden by custom function\n\t * in [[Renderer#rules]].\n\t **/ Renderer.prototype.renderToken = function renderToken(tokens, idx, options) {\n\t    const token = tokens[idx];\n\t    let result = '';\n\t    // Tight list paragraphs\n\t    if (token.hidden) {\n\t        return '';\n\t    }\n\t    // Insert a newline between hidden paragraph and subsequent opening\n\t    // block-level tag.\n\t    //\n\t    // For example, here we should insert a newline before blockquote:\n\t    //  - a\n\t    //    >\n\t    //\n\t    if (token.block && token.nesting !== -1 && idx && tokens[idx - 1].hidden) {\n\t        result += '\\n';\n\t    }\n\t    // Add token name, e.g. `<img`\n\t    result += (token.nesting === -1 ? '</' : '<') + token.tag;\n\t    // Encode attributes, e.g. `<img src=\"foo\"`\n\t    result += this.renderAttrs(token);\n\t    // Add a slash for self-closing tags, e.g. `<img src=\"foo\" /`\n\t    if (token.nesting === 0 && options.xhtmlOut) {\n\t        result += ' /';\n\t    }\n\t    // Check if we need to add a newline after this tag\n\t    let needLf = false;\n\t    if (token.block) {\n\t        needLf = true;\n\t        if (token.nesting === 1) {\n\t            if (idx + 1 < tokens.length) {\n\t                const nextToken = tokens[idx + 1];\n\t                if (nextToken.type === 'inline' || nextToken.hidden) {\n\t                    // Block-level tag containing an inline tag.\n\t                    //\n\t                    needLf = false;\n\t                } else if (nextToken.nesting === -1 && nextToken.tag === token.tag) {\n\t                    // Opening tag + closing tag of the same type. E.g. `<li></li>`.\n\t                    //\n\t                    needLf = false;\n\t                }\n\t            }\n\t        }\n\t    }\n\t    result += needLf ? '>\\n' : '>';\n\t    return result;\n\t};\n\t/**\n\t * Renderer.renderInline(tokens, options, env) -> String\n\t * - tokens (Array): list on block tokens to render\n\t * - options (Object): params of parser instance\n\t * - env (Object): additional data from parsed input (references, for example)\n\t *\n\t * The same as [[Renderer.render]], but for single token of `inline` type.\n\t **/ Renderer.prototype.renderInline = function(tokens, options, env) {\n\t    let result = '';\n\t    const rules = this.rules;\n\t    for(let i = 0, len = tokens.length; i < len; i++){\n\t        const type = tokens[i].type;\n\t        if (typeof rules[type] !== 'undefined') {\n\t            result += rules[type](tokens, i, options, env, this);\n\t        } else {\n\t            result += this.renderToken(tokens, i, options);\n\t        }\n\t    }\n\t    return result;\n\t};\n\t/** internal\n\t * Renderer.renderInlineAsText(tokens, options, env) -> String\n\t * - tokens (Array): list on block tokens to render\n\t * - options (Object): params of parser instance\n\t * - env (Object): additional data from parsed input (references, for example)\n\t *\n\t * Special kludge for image `alt` attributes to conform CommonMark spec.\n\t * Don't try to use it! Spec requires to show `alt` content with stripped markup,\n\t * instead of simple escaping.\n\t **/ Renderer.prototype.renderInlineAsText = function(tokens, options, env) {\n\t    let result = '';\n\t    for(let i = 0, len = tokens.length; i < len; i++){\n\t        switch(tokens[i].type){\n\t            case 'text':\n\t                result += tokens[i].content;\n\t                break;\n\t            case 'image':\n\t                result += this.renderInlineAsText(tokens[i].children, options, env);\n\t                break;\n\t            case 'html_inline':\n\t            case 'html_block':\n\t                result += tokens[i].content;\n\t                break;\n\t            case 'softbreak':\n\t            case 'hardbreak':\n\t                result += '\\n';\n\t                break;\n\t        }\n\t    }\n\t    return result;\n\t};\n\t/**\n\t * Renderer.render(tokens, options, env) -> String\n\t * - tokens (Array): list on block tokens to render\n\t * - options (Object): params of parser instance\n\t * - env (Object): additional data from parsed input (references, for example)\n\t *\n\t * Takes token stream and generates HTML. Probably, you will never need to call\n\t * this method directly.\n\t **/ Renderer.prototype.render = function(tokens, options, env) {\n\t    let result = '';\n\t    const rules = this.rules;\n\t    for(let i = 0, len = tokens.length; i < len; i++){\n\t        const type = tokens[i].type;\n\t        if (type === 'inline') {\n\t            result += this.renderInline(tokens[i].children, options, env);\n\t        } else if (typeof rules[type] !== 'undefined') {\n\t            result += rules[type](tokens, i, options, env, this);\n\t        } else {\n\t            result += this.renderToken(tokens, i, options, env);\n\t        }\n\t    }\n\t    return result;\n\t};\n\n\t/**\n\t * class Ruler\n\t *\n\t * Helper class, used by [[MarkdownIt#core]], [[MarkdownIt#block]] and\n\t * [[MarkdownIt#inline]] to manage sequences of functions (rules):\n\t *\n\t * - keep rules in defined order\n\t * - assign the name to each rule\n\t * - enable/disable rules\n\t * - add/replace rules\n\t * - allow assign rules to additional named chains (in the same)\n\t * - cacheing lists of active rules\n\t *\n\t * You will not need use this class directly until write plugins. For simple\n\t * rules control use [[MarkdownIt.disable]], [[MarkdownIt.enable]] and\n\t * [[MarkdownIt.use]].\n\t **/ /**\n\t * new Ruler()\n\t **/ function Ruler() {\n\t    // List of added rules. Each element is:\n\t    //\n\t    // {\n\t    //   name: XXX,\n\t    //   enabled: Boolean,\n\t    //   fn: Function(),\n\t    //   alt: [ name2, name3 ]\n\t    // }\n\t    //\n\t    this.__rules__ = [];\n\t    // Cached rule chains.\n\t    //\n\t    // First level - chain name, '' for default.\n\t    // Second level - diginal anchor for fast filtering by charcodes.\n\t    //\n\t    this.__cache__ = null;\n\t}\n\t// Helper methods, should not be used directly\n\t// Find rule index by name\n\t//\n\tRuler.prototype.__find__ = function(name) {\n\t    for(let i = 0; i < this.__rules__.length; i++){\n\t        if (this.__rules__[i].name === name) {\n\t            return i;\n\t        }\n\t    }\n\t    return -1;\n\t};\n\t// Build rules lookup cache\n\t//\n\tRuler.prototype.__compile__ = function() {\n\t    const self = this;\n\t    const chains = [\n\t        ''\n\t    ];\n\t    // collect unique names\n\t    self.__rules__.forEach(function(rule) {\n\t        if (!rule.enabled) {\n\t            return;\n\t        }\n\t        rule.alt.forEach(function(altName) {\n\t            if (chains.indexOf(altName) < 0) {\n\t                chains.push(altName);\n\t            }\n\t        });\n\t    });\n\t    self.__cache__ = {};\n\t    chains.forEach(function(chain) {\n\t        self.__cache__[chain] = [];\n\t        self.__rules__.forEach(function(rule) {\n\t            if (!rule.enabled) {\n\t                return;\n\t            }\n\t            if (chain && rule.alt.indexOf(chain) < 0) {\n\t                return;\n\t            }\n\t            self.__cache__[chain].push(rule.fn);\n\t        });\n\t    });\n\t};\n\t/**\n\t * Ruler.at(name, fn [, options])\n\t * - name (String): rule name to replace.\n\t * - fn (Function): new rule function.\n\t * - options (Object): new rule options (not mandatory).\n\t *\n\t * Replace rule by name with new function & options. Throws error if name not\n\t * found.\n\t *\n\t * ##### Options:\n\t *\n\t * - __alt__ - array with names of \"alternate\" chains.\n\t *\n\t * ##### Example\n\t *\n\t * Replace existing typographer replacement rule with new one:\n\t *\n\t * ```javascript\n\t * var md = require('markdown-it')();\n\t *\n\t * md.core.ruler.at('replacements', function replace(state) {\n\t *   //...\n\t * });\n\t * ```\n\t **/ Ruler.prototype.at = function(name, fn, options) {\n\t    const index = this.__find__(name);\n\t    const opt = options || {};\n\t    if (index === -1) {\n\t        throw new Error('Parser rule not found: ' + name);\n\t    }\n\t    this.__rules__[index].fn = fn;\n\t    this.__rules__[index].alt = opt.alt || [];\n\t    this.__cache__ = null;\n\t};\n\t/**\n\t * Ruler.before(beforeName, ruleName, fn [, options])\n\t * - beforeName (String): new rule will be added before this one.\n\t * - ruleName (String): name of added rule.\n\t * - fn (Function): rule function.\n\t * - options (Object): rule options (not mandatory).\n\t *\n\t * Add new rule to chain before one with given name. See also\n\t * [[Ruler.after]], [[Ruler.push]].\n\t *\n\t * ##### Options:\n\t *\n\t * - __alt__ - array with names of \"alternate\" chains.\n\t *\n\t * ##### Example\n\t *\n\t * ```javascript\n\t * var md = require('markdown-it')();\n\t *\n\t * md.block.ruler.before('paragraph', 'my_rule', function replace(state) {\n\t *   //...\n\t * });\n\t * ```\n\t **/ Ruler.prototype.before = function(beforeName, ruleName, fn, options) {\n\t    const index = this.__find__(beforeName);\n\t    const opt = options || {};\n\t    if (index === -1) {\n\t        throw new Error('Parser rule not found: ' + beforeName);\n\t    }\n\t    this.__rules__.splice(index, 0, {\n\t        name: ruleName,\n\t        enabled: true,\n\t        fn,\n\t        alt: opt.alt || []\n\t    });\n\t    this.__cache__ = null;\n\t};\n\t/**\n\t * Ruler.after(afterName, ruleName, fn [, options])\n\t * - afterName (String): new rule will be added after this one.\n\t * - ruleName (String): name of added rule.\n\t * - fn (Function): rule function.\n\t * - options (Object): rule options (not mandatory).\n\t *\n\t * Add new rule to chain after one with given name. See also\n\t * [[Ruler.before]], [[Ruler.push]].\n\t *\n\t * ##### Options:\n\t *\n\t * - __alt__ - array with names of \"alternate\" chains.\n\t *\n\t * ##### Example\n\t *\n\t * ```javascript\n\t * var md = require('markdown-it')();\n\t *\n\t * md.inline.ruler.after('text', 'my_rule', function replace(state) {\n\t *   //...\n\t * });\n\t * ```\n\t **/ Ruler.prototype.after = function(afterName, ruleName, fn, options) {\n\t    const index = this.__find__(afterName);\n\t    const opt = options || {};\n\t    if (index === -1) {\n\t        throw new Error('Parser rule not found: ' + afterName);\n\t    }\n\t    this.__rules__.splice(index + 1, 0, {\n\t        name: ruleName,\n\t        enabled: true,\n\t        fn,\n\t        alt: opt.alt || []\n\t    });\n\t    this.__cache__ = null;\n\t};\n\t/**\n\t * Ruler.push(ruleName, fn [, options])\n\t * - ruleName (String): name of added rule.\n\t * - fn (Function): rule function.\n\t * - options (Object): rule options (not mandatory).\n\t *\n\t * Push new rule to the end of chain. See also\n\t * [[Ruler.before]], [[Ruler.after]].\n\t *\n\t * ##### Options:\n\t *\n\t * - __alt__ - array with names of \"alternate\" chains.\n\t *\n\t * ##### Example\n\t *\n\t * ```javascript\n\t * var md = require('markdown-it')();\n\t *\n\t * md.core.ruler.push('my_rule', function replace(state) {\n\t *   //...\n\t * });\n\t * ```\n\t **/ Ruler.prototype.push = function(ruleName, fn, options) {\n\t    const opt = options || {};\n\t    this.__rules__.push({\n\t        name: ruleName,\n\t        enabled: true,\n\t        fn,\n\t        alt: opt.alt || []\n\t    });\n\t    this.__cache__ = null;\n\t};\n\t/**\n\t * Ruler.enable(list [, ignoreInvalid]) -> Array\n\t * - list (String|Array): list of rule names to enable.\n\t * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n\t *\n\t * Enable rules with given names. If any rule name not found - throw Error.\n\t * Errors can be disabled by second param.\n\t *\n\t * Returns list of found rule names (if no exception happened).\n\t *\n\t * See also [[Ruler.disable]], [[Ruler.enableOnly]].\n\t **/ Ruler.prototype.enable = function(list, ignoreInvalid) {\n\t    if (!Array.isArray(list)) {\n\t        list = [\n\t            list\n\t        ];\n\t    }\n\t    const result = [];\n\t    // Search by name and enable\n\t    list.forEach(function(name) {\n\t        const idx = this.__find__(name);\n\t        if (idx < 0) {\n\t            if (ignoreInvalid) {\n\t                return;\n\t            }\n\t            throw new Error('Rules manager: invalid rule name ' + name);\n\t        }\n\t        this.__rules__[idx].enabled = true;\n\t        result.push(name);\n\t    }, this);\n\t    this.__cache__ = null;\n\t    return result;\n\t};\n\t/**\n\t * Ruler.enableOnly(list [, ignoreInvalid])\n\t * - list (String|Array): list of rule names to enable (whitelist).\n\t * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n\t *\n\t * Enable rules with given names, and disable everything else. If any rule name\n\t * not found - throw Error. Errors can be disabled by second param.\n\t *\n\t * See also [[Ruler.disable]], [[Ruler.enable]].\n\t **/ Ruler.prototype.enableOnly = function(list, ignoreInvalid) {\n\t    if (!Array.isArray(list)) {\n\t        list = [\n\t            list\n\t        ];\n\t    }\n\t    this.__rules__.forEach(function(rule) {\n\t        rule.enabled = false;\n\t    });\n\t    this.enable(list, ignoreInvalid);\n\t};\n\t/**\n\t * Ruler.disable(list [, ignoreInvalid]) -> Array\n\t * - list (String|Array): list of rule names to disable.\n\t * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n\t *\n\t * Disable rules with given names. If any rule name not found - throw Error.\n\t * Errors can be disabled by second param.\n\t *\n\t * Returns list of found rule names (if no exception happened).\n\t *\n\t * See also [[Ruler.enable]], [[Ruler.enableOnly]].\n\t **/ Ruler.prototype.disable = function(list, ignoreInvalid) {\n\t    if (!Array.isArray(list)) {\n\t        list = [\n\t            list\n\t        ];\n\t    }\n\t    const result = [];\n\t    // Search by name and disable\n\t    list.forEach(function(name) {\n\t        const idx = this.__find__(name);\n\t        if (idx < 0) {\n\t            if (ignoreInvalid) {\n\t                return;\n\t            }\n\t            throw new Error('Rules manager: invalid rule name ' + name);\n\t        }\n\t        this.__rules__[idx].enabled = false;\n\t        result.push(name);\n\t    }, this);\n\t    this.__cache__ = null;\n\t    return result;\n\t};\n\t/**\n\t * Ruler.getRules(chainName) -> Array\n\t *\n\t * Return array of active functions (rules) for given chain name. It analyzes\n\t * rules configuration, compiles caches if not exists and returns result.\n\t *\n\t * Default chain name is `''` (empty string). It can't be skipped. That's\n\t * done intentionally, to keep signature monomorphic for high speed.\n\t **/ Ruler.prototype.getRules = function(chainName) {\n\t    if (this.__cache__ === null) {\n\t        this.__compile__();\n\t    }\n\t    // Chain can be empty, if rules disabled. But we still have to return Array.\n\t    return this.__cache__[chainName] || [];\n\t};\n\n\t// Token class\n\t/**\n\t * class Token\n\t **/ /**\n\t * new Token(type, tag, nesting)\n\t *\n\t * Create new token and fill passed properties.\n\t **/ function Token(type, tag, nesting) {\n\t    /**\n\t   * Token#type -> String\n\t   *\n\t   * Type of the token (string, e.g. \"paragraph_open\")\n\t   **/ this.type = type;\n\t    /**\n\t   * Token#tag -> String\n\t   *\n\t   * html tag name, e.g. \"p\"\n\t   **/ this.tag = tag;\n\t    /**\n\t   * Token#attrs -> Array\n\t   *\n\t   * Html attributes. Format: `[ [ name1, value1 ], [ name2, value2 ] ]`\n\t   **/ this.attrs = null;\n\t    /**\n\t   * Token#map -> Array\n\t   *\n\t   * Source map info. Format: `[ line_begin, line_end ]`\n\t   **/ this.map = null;\n\t    /**\n\t   * Token#nesting -> Number\n\t   *\n\t   * Level change (number in {-1, 0, 1} set), where:\n\t   *\n\t   * -  `1` means the tag is opening\n\t   * -  `0` means the tag is self-closing\n\t   * - `-1` means the tag is closing\n\t   **/ this.nesting = nesting;\n\t    /**\n\t   * Token#level -> Number\n\t   *\n\t   * nesting level, the same as `state.level`\n\t   **/ this.level = 0;\n\t    /**\n\t   * Token#children -> Array\n\t   *\n\t   * An array of child nodes (inline and img tokens)\n\t   **/ this.children = null;\n\t    /**\n\t   * Token#content -> String\n\t   *\n\t   * In a case of self-closing tag (code, html, fence, etc.),\n\t   * it has contents of this tag.\n\t   **/ this.content = '';\n\t    /**\n\t   * Token#markup -> String\n\t   *\n\t   * '*' or '_' for emphasis, fence string for fence, etc.\n\t   **/ this.markup = '';\n\t    /**\n\t   * Token#info -> String\n\t   *\n\t   * Additional information:\n\t   *\n\t   * - Info string for \"fence\" tokens\n\t   * - The value \"auto\" for autolink \"link_open\" and \"link_close\" tokens\n\t   * - The string value of the item marker for ordered-list \"list_item_open\" tokens\n\t   **/ this.info = '';\n\t    /**\n\t   * Token#meta -> Object\n\t   *\n\t   * A place for plugins to store an arbitrary data\n\t   **/ this.meta = null;\n\t    /**\n\t   * Token#block -> Boolean\n\t   *\n\t   * True for block-level tokens, false for inline tokens.\n\t   * Used in renderer to calculate line breaks\n\t   **/ this.block = false;\n\t    /**\n\t   * Token#hidden -> Boolean\n\t   *\n\t   * If it's true, ignore this element when rendering. Used for tight lists\n\t   * to hide paragraphs.\n\t   **/ this.hidden = false;\n\t}\n\t/**\n\t * Token.attrIndex(name) -> Number\n\t *\n\t * Search attribute index by name.\n\t **/ Token.prototype.attrIndex = function attrIndex(name) {\n\t    if (!this.attrs) {\n\t        return -1;\n\t    }\n\t    const attrs = this.attrs;\n\t    for(let i = 0, len = attrs.length; i < len; i++){\n\t        if (attrs[i][0] === name) {\n\t            return i;\n\t        }\n\t    }\n\t    return -1;\n\t};\n\t/**\n\t * Token.attrPush(attrData)\n\t *\n\t * Add `[ name, value ]` attribute to list. Init attrs if necessary\n\t **/ Token.prototype.attrPush = function attrPush(attrData) {\n\t    if (this.attrs) {\n\t        this.attrs.push(attrData);\n\t    } else {\n\t        this.attrs = [\n\t            attrData\n\t        ];\n\t    }\n\t};\n\t/**\n\t * Token.attrSet(name, value)\n\t *\n\t * Set `name` attribute to `value`. Override old value if exists.\n\t **/ Token.prototype.attrSet = function attrSet(name, value) {\n\t    const idx = this.attrIndex(name);\n\t    const attrData = [\n\t        name,\n\t        value\n\t    ];\n\t    if (idx < 0) {\n\t        this.attrPush(attrData);\n\t    } else {\n\t        this.attrs[idx] = attrData;\n\t    }\n\t};\n\t/**\n\t * Token.attrGet(name)\n\t *\n\t * Get the value of attribute `name`, or null if it does not exist.\n\t **/ Token.prototype.attrGet = function attrGet(name) {\n\t    const idx = this.attrIndex(name);\n\t    let value = null;\n\t    if (idx >= 0) {\n\t        value = this.attrs[idx][1];\n\t    }\n\t    return value;\n\t};\n\t/**\n\t * Token.attrJoin(name, value)\n\t *\n\t * Join value to existing attribute via space. Or create new attribute if not\n\t * exists. Useful to operate with token classes.\n\t **/ Token.prototype.attrJoin = function attrJoin(name, value) {\n\t    const idx = this.attrIndex(name);\n\t    if (idx < 0) {\n\t        this.attrPush([\n\t            name,\n\t            value\n\t        ]);\n\t    } else {\n\t        this.attrs[idx][1] = this.attrs[idx][1] + ' ' + value;\n\t    }\n\t};\n\n\t// Core state object\n\t//\n\tfunction StateCore(src, md, env) {\n\t    this.src = src;\n\t    this.env = env;\n\t    this.tokens = [];\n\t    this.inlineMode = false;\n\t    this.md = md // link to parser instance\n\t    ;\n\t}\n\t// re-export Token class to use in core rules\n\tStateCore.prototype.Token = Token;\n\n\t// Normalize input string\n\t// https://spec.commonmark.org/0.29/#line-ending\n\tconst NEWLINES_RE = /\\r\\n?|\\n/g;\n\tconst NULL_RE = /\\0/g;\n\tfunction normalize(state) {\n\t    let str;\n\t    // Normalize newlines\n\t    str = state.src.replace(NEWLINES_RE, '\\n');\n\t    // Replace NULL characters\n\t    str = str.replace(NULL_RE, '\\uFFFD');\n\t    state.src = str;\n\t}\n\n\tfunction block(state) {\n\t    let token;\n\t    if (state.inlineMode) {\n\t        token = new state.Token('inline', '', 0);\n\t        token.content = state.src;\n\t        token.map = [\n\t            0,\n\t            1\n\t        ];\n\t        token.children = [];\n\t        state.tokens.push(token);\n\t    } else {\n\t        state.md.block.parse(state.src, state.md, state.env, state.tokens);\n\t    }\n\t}\n\n\tfunction inline(state) {\n\t    const tokens = state.tokens;\n\t    // Parse inlines\n\t    for(let i = 0, l = tokens.length; i < l; i++){\n\t        const tok = tokens[i];\n\t        if (tok.type === 'inline') {\n\t            state.md.inline.parse(tok.content, state.md, state.env, tok.children);\n\t        }\n\t    }\n\t}\n\n\t// Replace link-like texts with link nodes.\n\t//\n\t// Currently restricted by `md.validateLink()` to http/https/ftp\n\t//\n\tfunction isLinkOpen$1(str) {\n\t    return /^<a[>\\s]/i.test(str);\n\t}\n\tfunction isLinkClose$1(str) {\n\t    return /^<\\/a\\s*>/i.test(str);\n\t}\n\tfunction linkify$1(state) {\n\t    const blockTokens = state.tokens;\n\t    if (!state.md.options.linkify) {\n\t        return;\n\t    }\n\t    for(let j = 0, l = blockTokens.length; j < l; j++){\n\t        if (blockTokens[j].type !== 'inline' || !state.md.linkify.pretest(blockTokens[j].content)) {\n\t            continue;\n\t        }\n\t        let tokens = blockTokens[j].children;\n\t        let htmlLinkLevel = 0;\n\t        // We scan from the end, to keep position when new tags added.\n\t        // Use reversed logic in links start/end match\n\t        for(let i = tokens.length - 1; i >= 0; i--){\n\t            const currentToken = tokens[i];\n\t            // Skip content of markdown links\n\t            if (currentToken.type === 'link_close') {\n\t                i--;\n\t                while(tokens[i].level !== currentToken.level && tokens[i].type !== 'link_open'){\n\t                    i--;\n\t                }\n\t                continue;\n\t            }\n\t            // Skip content of html tag links\n\t            if (currentToken.type === 'html_inline') {\n\t                if (isLinkOpen$1(currentToken.content) && htmlLinkLevel > 0) {\n\t                    htmlLinkLevel--;\n\t                }\n\t                if (isLinkClose$1(currentToken.content)) {\n\t                    htmlLinkLevel++;\n\t                }\n\t            }\n\t            if (htmlLinkLevel > 0) {\n\t                continue;\n\t            }\n\t            if (currentToken.type === 'text' && state.md.linkify.test(currentToken.content)) {\n\t                const text = currentToken.content;\n\t                let links = state.md.linkify.match(text);\n\t                // Now split string to nodes\n\t                const nodes = [];\n\t                let level = currentToken.level;\n\t                let lastPos = 0;\n\t                // forbid escape sequence at the start of the string,\n\t                // this avoids http\\://example.com/ from being linkified as\n\t                // http:<a href=\"//example.com/\">//example.com/</a>\n\t                if (links.length > 0 && links[0].index === 0 && i > 0 && tokens[i - 1].type === 'text_special') {\n\t                    links = links.slice(1);\n\t                }\n\t                for(let ln = 0; ln < links.length; ln++){\n\t                    const url = links[ln].url;\n\t                    const fullUrl = state.md.normalizeLink(url);\n\t                    if (!state.md.validateLink(fullUrl)) {\n\t                        continue;\n\t                    }\n\t                    let urlText = links[ln].text;\n\t                    // Linkifier might send raw hostnames like \"example.com\", where url\n\t                    // starts with domain name. So we prepend http:// in those cases,\n\t                    // and remove it afterwards.\n\t                    //\n\t                    if (!links[ln].schema) {\n\t                        urlText = state.md.normalizeLinkText('http://' + urlText).replace(/^http:\\/\\//, '');\n\t                    } else if (links[ln].schema === 'mailto:' && !/^mailto:/i.test(urlText)) {\n\t                        urlText = state.md.normalizeLinkText('mailto:' + urlText).replace(/^mailto:/, '');\n\t                    } else {\n\t                        urlText = state.md.normalizeLinkText(urlText);\n\t                    }\n\t                    const pos = links[ln].index;\n\t                    if (pos > lastPos) {\n\t                        const token = new state.Token('text', '', 0);\n\t                        token.content = text.slice(lastPos, pos);\n\t                        token.level = level;\n\t                        nodes.push(token);\n\t                    }\n\t                    const token_o = new state.Token('link_open', 'a', 1);\n\t                    token_o.attrs = [\n\t                        [\n\t                            'href',\n\t                            fullUrl\n\t                        ]\n\t                    ];\n\t                    token_o.level = level++;\n\t                    token_o.markup = 'linkify';\n\t                    token_o.info = 'auto';\n\t                    nodes.push(token_o);\n\t                    const token_t = new state.Token('text', '', 0);\n\t                    token_t.content = urlText;\n\t                    token_t.level = level;\n\t                    nodes.push(token_t);\n\t                    const token_c = new state.Token('link_close', 'a', -1);\n\t                    token_c.level = --level;\n\t                    token_c.markup = 'linkify';\n\t                    token_c.info = 'auto';\n\t                    nodes.push(token_c);\n\t                    lastPos = links[ln].lastIndex;\n\t                }\n\t                if (lastPos < text.length) {\n\t                    const token = new state.Token('text', '', 0);\n\t                    token.content = text.slice(lastPos);\n\t                    token.level = level;\n\t                    nodes.push(token);\n\t                }\n\t                // replace current node\n\t                blockTokens[j].children = tokens = arrayReplaceAt(tokens, i, nodes);\n\t            }\n\t        }\n\t    }\n\t}\n\n\t// Simple typographic replacements\n\t//\n\t// (c) (C) → ©\n\t// (tm) (TM) → ™\n\t// (r) (R) → ®\n\t// +- → ±\n\t// ... → … (also ?.... → ?.., !.... → !..)\n\t// ???????? → ???, !!!!! → !!!, `,,` → `,`\n\t// -- → &ndash;, --- → &mdash;\n\t//\n\t// TODO:\n\t// - fractionals 1/2, 1/4, 3/4 -> ½, ¼, ¾\n\t// - multiplications 2 x 4 -> 2 × 4\n\tconst RARE_RE = /\\+-|\\.\\.|\\?\\?\\?\\?|!!!!|,,|--/;\n\t// Workaround for phantomjs - need regex without /g flag,\n\t// or root check will fail every second time\n\tconst SCOPED_ABBR_TEST_RE = /\\((c|tm|r)\\)/i;\n\tconst SCOPED_ABBR_RE = /\\((c|tm|r)\\)/ig;\n\tconst SCOPED_ABBR = {\n\t    c: '©',\n\t    r: '®',\n\t    tm: '™'\n\t};\n\tfunction replaceFn(match, name) {\n\t    return SCOPED_ABBR[name.toLowerCase()];\n\t}\n\tfunction replace_scoped(inlineTokens) {\n\t    let inside_autolink = 0;\n\t    for(let i = inlineTokens.length - 1; i >= 0; i--){\n\t        const token = inlineTokens[i];\n\t        if (token.type === 'text' && !inside_autolink) {\n\t            token.content = token.content.replace(SCOPED_ABBR_RE, replaceFn);\n\t        }\n\t        if (token.type === 'link_open' && token.info === 'auto') {\n\t            inside_autolink--;\n\t        }\n\t        if (token.type === 'link_close' && token.info === 'auto') {\n\t            inside_autolink++;\n\t        }\n\t    }\n\t}\n\tfunction replace_rare(inlineTokens) {\n\t    let inside_autolink = 0;\n\t    for(let i = inlineTokens.length - 1; i >= 0; i--){\n\t        const token = inlineTokens[i];\n\t        if (token.type === 'text' && !inside_autolink) {\n\t            if (RARE_RE.test(token.content)) {\n\t                token.content = token.content.replace(/\\+-/g, '±')// .., ..., ....... -> …\n\t                // but ?..... & !..... -> ?.. & !..\n\t                .replace(/\\.{2,}/g, '…').replace(/([?!])…/g, '$1..').replace(/([?!]){4,}/g, '$1$1$1').replace(/,{2,}/g, ',')// em-dash\n\t                .replace(/(^|[^-])---(?=[^-]|$)/mg, '$1\\u2014')// en-dash\n\t                .replace(/(^|\\s)--(?=\\s|$)/mg, '$1\\u2013').replace(/(^|[^-\\s])--(?=[^-\\s]|$)/mg, '$1\\u2013');\n\t            }\n\t        }\n\t        if (token.type === 'link_open' && token.info === 'auto') {\n\t            inside_autolink--;\n\t        }\n\t        if (token.type === 'link_close' && token.info === 'auto') {\n\t            inside_autolink++;\n\t        }\n\t    }\n\t}\n\tfunction replace(state) {\n\t    let blkIdx;\n\t    if (!state.md.options.typographer) {\n\t        return;\n\t    }\n\t    for(blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--){\n\t        if (state.tokens[blkIdx].type !== 'inline') {\n\t            continue;\n\t        }\n\t        if (SCOPED_ABBR_TEST_RE.test(state.tokens[blkIdx].content)) {\n\t            replace_scoped(state.tokens[blkIdx].children);\n\t        }\n\t        if (RARE_RE.test(state.tokens[blkIdx].content)) {\n\t            replace_rare(state.tokens[blkIdx].children);\n\t        }\n\t    }\n\t}\n\n\t// Convert straight quotation marks to typographic ones\n\t//\n\tconst QUOTE_TEST_RE = /['\"]/;\n\tconst QUOTE_RE = /['\"]/g;\n\tconst APOSTROPHE = '\\u2019' /* ’ */ ;\n\tfunction replaceAt(str, index, ch) {\n\t    return str.slice(0, index) + ch + str.slice(index + 1);\n\t}\n\tfunction process_inlines(tokens, state) {\n\t    let j;\n\t    const stack = [];\n\t    for(let i = 0; i < tokens.length; i++){\n\t        const token = tokens[i];\n\t        const thisLevel = tokens[i].level;\n\t        for(j = stack.length - 1; j >= 0; j--){\n\t            if (stack[j].level <= thisLevel) {\n\t                break;\n\t            }\n\t        }\n\t        stack.length = j + 1;\n\t        if (token.type !== 'text') {\n\t            continue;\n\t        }\n\t        let text = token.content;\n\t        let pos = 0;\n\t        let max = text.length;\n\t        /* eslint no-labels:0,block-scoped-var:0 */ OUTER: while(pos < max){\n\t            QUOTE_RE.lastIndex = pos;\n\t            const t = QUOTE_RE.exec(text);\n\t            if (!t) {\n\t                break;\n\t            }\n\t            let canOpen = true;\n\t            let canClose = true;\n\t            pos = t.index + 1;\n\t            const isSingle = t[0] === \"'\";\n\t            // Find previous character,\n\t            // default to space if it's the beginning of the line\n\t            //\n\t            let lastChar = 0x20;\n\t            if (t.index - 1 >= 0) {\n\t                lastChar = text.charCodeAt(t.index - 1);\n\t            } else {\n\t                for(j = i - 1; j >= 0; j--){\n\t                    if (tokens[j].type === 'softbreak' || tokens[j].type === 'hardbreak') break; // lastChar defaults to 0x20\n\t                    if (!tokens[j].content) continue; // should skip all tokens except 'text', 'html_inline' or 'code_inline'\n\t                    lastChar = tokens[j].content.charCodeAt(tokens[j].content.length - 1);\n\t                    break;\n\t                }\n\t            }\n\t            // Find next character,\n\t            // default to space if it's the end of the line\n\t            //\n\t            let nextChar = 0x20;\n\t            if (pos < max) {\n\t                nextChar = text.charCodeAt(pos);\n\t            } else {\n\t                for(j = i + 1; j < tokens.length; j++){\n\t                    if (tokens[j].type === 'softbreak' || tokens[j].type === 'hardbreak') break; // nextChar defaults to 0x20\n\t                    if (!tokens[j].content) continue; // should skip all tokens except 'text', 'html_inline' or 'code_inline'\n\t                    nextChar = tokens[j].content.charCodeAt(0);\n\t                    break;\n\t                }\n\t            }\n\t            const isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));\n\t            const isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));\n\t            const isLastWhiteSpace = isWhiteSpace(lastChar);\n\t            const isNextWhiteSpace = isWhiteSpace(nextChar);\n\t            if (isNextWhiteSpace) {\n\t                canOpen = false;\n\t            } else if (isNextPunctChar) {\n\t                if (!(isLastWhiteSpace || isLastPunctChar)) {\n\t                    canOpen = false;\n\t                }\n\t            }\n\t            if (isLastWhiteSpace) {\n\t                canClose = false;\n\t            } else if (isLastPunctChar) {\n\t                if (!(isNextWhiteSpace || isNextPunctChar)) {\n\t                    canClose = false;\n\t                }\n\t            }\n\t            if (nextChar === 0x22 /* \" */  && t[0] === '\"') {\n\t                if (lastChar >= 0x30 /* 0 */  && lastChar <= 0x39 /* 9 */ ) {\n\t                    // special case: 1\"\" - count first quote as an inch\n\t                    canClose = canOpen = false;\n\t                }\n\t            }\n\t            if (canOpen && canClose) {\n\t                // Replace quotes in the middle of punctuation sequence, but not\n\t                // in the middle of the words, i.e.:\n\t                //\n\t                // 1. foo \" bar \" baz - not replaced\n\t                // 2. foo-\"-bar-\"-baz - replaced\n\t                // 3. foo\"bar\"baz     - not replaced\n\t                //\n\t                canOpen = isLastPunctChar;\n\t                canClose = isNextPunctChar;\n\t            }\n\t            if (!canOpen && !canClose) {\n\t                // middle of word\n\t                if (isSingle) {\n\t                    token.content = replaceAt(token.content, t.index, APOSTROPHE);\n\t                }\n\t                continue;\n\t            }\n\t            if (canClose) {\n\t                // this could be a closing quote, rewind the stack to get a match\n\t                for(j = stack.length - 1; j >= 0; j--){\n\t                    let item = stack[j];\n\t                    if (stack[j].level < thisLevel) {\n\t                        break;\n\t                    }\n\t                    if (item.single === isSingle && stack[j].level === thisLevel) {\n\t                        item = stack[j];\n\t                        let openQuote;\n\t                        let closeQuote;\n\t                        if (isSingle) {\n\t                            openQuote = state.md.options.quotes[2];\n\t                            closeQuote = state.md.options.quotes[3];\n\t                        } else {\n\t                            openQuote = state.md.options.quotes[0];\n\t                            closeQuote = state.md.options.quotes[1];\n\t                        }\n\t                        // replace token.content *before* tokens[item.token].content,\n\t                        // because, if they are pointing at the same token, replaceAt\n\t                        // could mess up indices when quote length != 1\n\t                        token.content = replaceAt(token.content, t.index, closeQuote);\n\t                        tokens[item.token].content = replaceAt(tokens[item.token].content, item.pos, openQuote);\n\t                        pos += closeQuote.length - 1;\n\t                        if (item.token === i) {\n\t                            pos += openQuote.length - 1;\n\t                        }\n\t                        text = token.content;\n\t                        max = text.length;\n\t                        stack.length = j;\n\t                        continue OUTER;\n\t                    }\n\t                }\n\t            }\n\t            if (canOpen) {\n\t                stack.push({\n\t                    token: i,\n\t                    pos: t.index,\n\t                    single: isSingle,\n\t                    level: thisLevel\n\t                });\n\t            } else if (canClose && isSingle) {\n\t                token.content = replaceAt(token.content, t.index, APOSTROPHE);\n\t            }\n\t        }\n\t    }\n\t}\n\tfunction smartquotes(state) {\n\t    /* eslint max-depth:0 */ if (!state.md.options.typographer) {\n\t        return;\n\t    }\n\t    for(let blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--){\n\t        if (state.tokens[blkIdx].type !== 'inline' || !QUOTE_TEST_RE.test(state.tokens[blkIdx].content)) {\n\t            continue;\n\t        }\n\t        process_inlines(state.tokens[blkIdx].children, state);\n\t    }\n\t}\n\n\t// Join raw text tokens with the rest of the text\n\t//\n\t// This is set as a separate rule to provide an opportunity for plugins\n\t// to run text replacements after text join, but before escape join.\n\t//\n\t// For example, `\\:)` shouldn't be replaced with an emoji.\n\t//\n\tfunction text_join(state) {\n\t    let curr, last;\n\t    const blockTokens = state.tokens;\n\t    const l = blockTokens.length;\n\t    for(let j = 0; j < l; j++){\n\t        if (blockTokens[j].type !== 'inline') continue;\n\t        const tokens = blockTokens[j].children;\n\t        const max = tokens.length;\n\t        for(curr = 0; curr < max; curr++){\n\t            if (tokens[curr].type === 'text_special') {\n\t                tokens[curr].type = 'text';\n\t            }\n\t        }\n\t        for(curr = last = 0; curr < max; curr++){\n\t            if (tokens[curr].type === 'text' && curr + 1 < max && tokens[curr + 1].type === 'text') {\n\t                // collapse two adjacent text nodes\n\t                tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content;\n\t            } else {\n\t                if (curr !== last) {\n\t                    tokens[last] = tokens[curr];\n\t                }\n\t                last++;\n\t            }\n\t        }\n\t        if (curr !== last) {\n\t            tokens.length = last;\n\t        }\n\t    }\n\t}\n\n\tconst _rules$2 = [\n\t    [\n\t        'normalize',\n\t        normalize\n\t    ],\n\t    [\n\t        'block',\n\t        block\n\t    ],\n\t    [\n\t        'inline',\n\t        inline\n\t    ],\n\t    [\n\t        'linkify',\n\t        linkify$1\n\t    ],\n\t    [\n\t        'replacements',\n\t        replace\n\t    ],\n\t    [\n\t        'smartquotes',\n\t        smartquotes\n\t    ],\n\t    // `text_join` finds `text_special` tokens (for escape sequences)\n\t    // and joins them with the rest of the text\n\t    [\n\t        'text_join',\n\t        text_join\n\t    ]\n\t];\n\t/**\n\t * new Core()\n\t **/ function Core() {\n\t    /**\n\t   * Core#ruler -> Ruler\n\t   *\n\t   * [[Ruler]] instance. Keep configuration of core rules.\n\t   **/ this.ruler = new Ruler();\n\t    for(let i = 0; i < _rules$2.length; i++){\n\t        this.ruler.push(_rules$2[i][0], _rules$2[i][1]);\n\t    }\n\t}\n\t/**\n\t * Core.process(state)\n\t *\n\t * Executes core chain rules.\n\t **/ Core.prototype.process = function(state) {\n\t    const rules = this.ruler.getRules('');\n\t    for(let i = 0, l = rules.length; i < l; i++){\n\t        rules[i](state);\n\t    }\n\t};\n\tCore.prototype.State = StateCore;\n\n\t// Parser state class\n\tfunction StateBlock(src, md, env, tokens) {\n\t    this.src = src;\n\t    // link to parser instance\n\t    this.md = md;\n\t    this.env = env;\n\t    //\n\t    // Internal state vartiables\n\t    //\n\t    this.tokens = tokens;\n\t    this.bMarks = [] // line begin offsets for fast jumps\n\t    ;\n\t    this.eMarks = [] // line end offsets for fast jumps\n\t    ;\n\t    this.tShift = [] // offsets of the first non-space characters (tabs not expanded)\n\t    ;\n\t    this.sCount = [] // indents for each line (tabs expanded)\n\t    ;\n\t    // An amount of virtual spaces (tabs expanded) between beginning\n\t    // of each line (bMarks) and real beginning of that line.\n\t    //\n\t    // It exists only as a hack because blockquotes override bMarks\n\t    // losing information in the process.\n\t    //\n\t    // It's used only when expanding tabs, you can think about it as\n\t    // an initial tab length, e.g. bsCount=21 applied to string `\\t123`\n\t    // means first tab should be expanded to 4-21%4 === 3 spaces.\n\t    //\n\t    this.bsCount = [];\n\t    // block parser variables\n\t    // required block content indent (for example, if we are\n\t    // inside a list, it would be positioned after list marker)\n\t    this.blkIndent = 0;\n\t    this.line = 0 // line index in src\n\t    ;\n\t    this.lineMax = 0 // lines count\n\t    ;\n\t    this.tight = false // loose/tight mode for lists\n\t    ;\n\t    this.ddIndent = -1 // indent of the current dd block (-1 if there isn't any)\n\t    ;\n\t    this.listIndent = -1 // indent of the current list block (-1 if there isn't any)\n\t    ;\n\t    // can be 'blockquote', 'list', 'root', 'paragraph' or 'reference'\n\t    // used in lists to determine if they interrupt a paragraph\n\t    this.parentType = 'root';\n\t    this.level = 0;\n\t    // Create caches\n\t    // Generate markers.\n\t    const s = this.src;\n\t    for(let start = 0, pos = 0, indent = 0, offset = 0, len = s.length, indent_found = false; pos < len; pos++){\n\t        const ch = s.charCodeAt(pos);\n\t        if (!indent_found) {\n\t            if (isSpace(ch)) {\n\t                indent++;\n\t                if (ch === 0x09) {\n\t                    offset += 4 - offset % 4;\n\t                } else {\n\t                    offset++;\n\t                }\n\t                continue;\n\t            } else {\n\t                indent_found = true;\n\t            }\n\t        }\n\t        if (ch === 0x0A || pos === len - 1) {\n\t            if (ch !== 0x0A) {\n\t                pos++;\n\t            }\n\t            this.bMarks.push(start);\n\t            this.eMarks.push(pos);\n\t            this.tShift.push(indent);\n\t            this.sCount.push(offset);\n\t            this.bsCount.push(0);\n\t            indent_found = false;\n\t            indent = 0;\n\t            offset = 0;\n\t            start = pos + 1;\n\t        }\n\t    }\n\t    // Push fake entry to simplify cache bounds checks\n\t    this.bMarks.push(s.length);\n\t    this.eMarks.push(s.length);\n\t    this.tShift.push(0);\n\t    this.sCount.push(0);\n\t    this.bsCount.push(0);\n\t    this.lineMax = this.bMarks.length - 1 // don't count last fake line\n\t    ;\n\t}\n\t// Push new token to \"stream\".\n\t//\n\tStateBlock.prototype.push = function(type, tag, nesting) {\n\t    const token = new Token(type, tag, nesting);\n\t    token.block = true;\n\t    if (nesting < 0) this.level-- // closing tag\n\t    ;\n\t    token.level = this.level;\n\t    if (nesting > 0) this.level++ // opening tag\n\t    ;\n\t    this.tokens.push(token);\n\t    return token;\n\t};\n\tStateBlock.prototype.isEmpty = function isEmpty(line) {\n\t    return this.bMarks[line] + this.tShift[line] >= this.eMarks[line];\n\t};\n\tStateBlock.prototype.skipEmptyLines = function skipEmptyLines(from) {\n\t    for(let max = this.lineMax; from < max; from++){\n\t        if (this.bMarks[from] + this.tShift[from] < this.eMarks[from]) {\n\t            break;\n\t        }\n\t    }\n\t    return from;\n\t};\n\t// Skip spaces from given position.\n\tStateBlock.prototype.skipSpaces = function skipSpaces(pos) {\n\t    for(let max = this.src.length; pos < max; pos++){\n\t        const ch = this.src.charCodeAt(pos);\n\t        if (!isSpace(ch)) {\n\t            break;\n\t        }\n\t    }\n\t    return pos;\n\t};\n\t// Skip spaces from given position in reverse.\n\tStateBlock.prototype.skipSpacesBack = function skipSpacesBack(pos, min) {\n\t    if (pos <= min) {\n\t        return pos;\n\t    }\n\t    while(pos > min){\n\t        if (!isSpace(this.src.charCodeAt(--pos))) {\n\t            return pos + 1;\n\t        }\n\t    }\n\t    return pos;\n\t};\n\t// Skip char codes from given position\n\tStateBlock.prototype.skipChars = function skipChars(pos, code) {\n\t    for(let max = this.src.length; pos < max; pos++){\n\t        if (this.src.charCodeAt(pos) !== code) {\n\t            break;\n\t        }\n\t    }\n\t    return pos;\n\t};\n\t// Skip char codes reverse from given position - 1\n\tStateBlock.prototype.skipCharsBack = function skipCharsBack(pos, code, min) {\n\t    if (pos <= min) {\n\t        return pos;\n\t    }\n\t    while(pos > min){\n\t        if (code !== this.src.charCodeAt(--pos)) {\n\t            return pos + 1;\n\t        }\n\t    }\n\t    return pos;\n\t};\n\t// cut lines range from source.\n\tStateBlock.prototype.getLines = function getLines(begin, end, indent, keepLastLF) {\n\t    if (begin >= end) {\n\t        return '';\n\t    }\n\t    const queue = new Array(end - begin);\n\t    for(let i = 0, line = begin; line < end; line++, i++){\n\t        let lineIndent = 0;\n\t        const lineStart = this.bMarks[line];\n\t        let first = lineStart;\n\t        let last;\n\t        if (line + 1 < end || keepLastLF) {\n\t            // No need for bounds check because we have fake entry on tail.\n\t            last = this.eMarks[line] + 1;\n\t        } else {\n\t            last = this.eMarks[line];\n\t        }\n\t        while(first < last && lineIndent < indent){\n\t            const ch = this.src.charCodeAt(first);\n\t            if (isSpace(ch)) {\n\t                if (ch === 0x09) {\n\t                    lineIndent += 4 - (lineIndent + this.bsCount[line]) % 4;\n\t                } else {\n\t                    lineIndent++;\n\t                }\n\t            } else if (first - lineStart < this.tShift[line]) {\n\t                // patched tShift masked characters to look like spaces (blockquotes, list markers)\n\t                lineIndent++;\n\t            } else {\n\t                break;\n\t            }\n\t            first++;\n\t        }\n\t        if (lineIndent > indent) {\n\t            // partially expanding tabs in code blocks, e.g '\\t\\tfoobar'\n\t            // with indent=2 becomes '  \\tfoobar'\n\t            queue[i] = new Array(lineIndent - indent + 1).join(' ') + this.src.slice(first, last);\n\t        } else {\n\t            queue[i] = this.src.slice(first, last);\n\t        }\n\t    }\n\t    return queue.join('');\n\t};\n\t// re-export Token class to use in block rules\n\tStateBlock.prototype.Token = Token;\n\n\t// GFM table, https://github.github.com/gfm/#tables-extension-\n\t// Limit the amount of empty autocompleted cells in a table,\n\t// see https://github.com/markdown-it/markdown-it/issues/1000,\n\t//\n\t// Both pulldown-cmark and commonmark-hs limit the number of cells this way to ~200k.\n\t// We set it to 65k, which can expand user input by a factor of x370\n\t// (256x256 square is 1.8kB expanded into 650kB).\n\tconst MAX_AUTOCOMPLETED_CELLS = 0x10000;\n\tfunction getLine(state, line) {\n\t    const pos = state.bMarks[line] + state.tShift[line];\n\t    const max = state.eMarks[line];\n\t    return state.src.slice(pos, max);\n\t}\n\tfunction escapedSplit(str) {\n\t    const result = [];\n\t    const max = str.length;\n\t    let pos = 0;\n\t    let ch = str.charCodeAt(pos);\n\t    let isEscaped = false;\n\t    let lastPos = 0;\n\t    let current = '';\n\t    while(pos < max){\n\t        if (ch === 0x7c /* | */ ) {\n\t            if (!isEscaped) {\n\t                // pipe separating cells, '|'\n\t                result.push(current + str.substring(lastPos, pos));\n\t                current = '';\n\t                lastPos = pos + 1;\n\t            } else {\n\t                // escaped pipe, '\\|'\n\t                current += str.substring(lastPos, pos - 1);\n\t                lastPos = pos;\n\t            }\n\t        }\n\t        isEscaped = ch === 0x5c /* \\ */ ;\n\t        pos++;\n\t        ch = str.charCodeAt(pos);\n\t    }\n\t    result.push(current + str.substring(lastPos));\n\t    return result;\n\t}\n\tfunction table(state, startLine, endLine, silent) {\n\t    // should have at least two lines\n\t    if (startLine + 2 > endLine) {\n\t        return false;\n\t    }\n\t    let nextLine = startLine + 1;\n\t    if (state.sCount[nextLine] < state.blkIndent) {\n\t        return false;\n\t    }\n\t    // if it's indented more than 3 spaces, it should be a code block\n\t    if (state.sCount[nextLine] - state.blkIndent >= 4) {\n\t        return false;\n\t    }\n\t    // first character of the second line should be '|', '-', ':',\n\t    // and no other characters are allowed but spaces;\n\t    // basically, this is the equivalent of /^[-:|][-:|\\s]*$/ regexp\n\t    let pos = state.bMarks[nextLine] + state.tShift[nextLine];\n\t    if (pos >= state.eMarks[nextLine]) {\n\t        return false;\n\t    }\n\t    const firstCh = state.src.charCodeAt(pos++);\n\t    if (firstCh !== 0x7C /* | */  && firstCh !== 0x2D /* - */  && firstCh !== 0x3A /* : */ ) {\n\t        return false;\n\t    }\n\t    if (pos >= state.eMarks[nextLine]) {\n\t        return false;\n\t    }\n\t    const secondCh = state.src.charCodeAt(pos++);\n\t    if (secondCh !== 0x7C /* | */  && secondCh !== 0x2D /* - */  && secondCh !== 0x3A /* : */  && !isSpace(secondCh)) {\n\t        return false;\n\t    }\n\t    // if first character is '-', then second character must not be a space\n\t    // (due to parsing ambiguity with list)\n\t    if (firstCh === 0x2D /* - */  && isSpace(secondCh)) {\n\t        return false;\n\t    }\n\t    while(pos < state.eMarks[nextLine]){\n\t        const ch = state.src.charCodeAt(pos);\n\t        if (ch !== 0x7C /* | */  && ch !== 0x2D /* - */  && ch !== 0x3A /* : */  && !isSpace(ch)) {\n\t            return false;\n\t        }\n\t        pos++;\n\t    }\n\t    let lineText = getLine(state, startLine + 1);\n\t    let columns = lineText.split('|');\n\t    const aligns = [];\n\t    for(let i = 0; i < columns.length; i++){\n\t        const t = columns[i].trim();\n\t        if (!t) {\n\t            // allow empty columns before and after table, but not in between columns;\n\t            // e.g. allow ` |---| `, disallow ` ---||--- `\n\t            if (i === 0 || i === columns.length - 1) {\n\t                continue;\n\t            } else {\n\t                return false;\n\t            }\n\t        }\n\t        if (!/^:?-+:?$/.test(t)) {\n\t            return false;\n\t        }\n\t        if (t.charCodeAt(t.length - 1) === 0x3A /* : */ ) {\n\t            aligns.push(t.charCodeAt(0) === 0x3A /* : */  ? 'center' : 'right');\n\t        } else if (t.charCodeAt(0) === 0x3A /* : */ ) {\n\t            aligns.push('left');\n\t        } else {\n\t            aligns.push('');\n\t        }\n\t    }\n\t    lineText = getLine(state, startLine).trim();\n\t    if (lineText.indexOf('|') === -1) {\n\t        return false;\n\t    }\n\t    if (state.sCount[startLine] - state.blkIndent >= 4) {\n\t        return false;\n\t    }\n\t    columns = escapedSplit(lineText);\n\t    if (columns.length && columns[0] === '') columns.shift();\n\t    if (columns.length && columns[columns.length - 1] === '') columns.pop();\n\t    // header row will define an amount of columns in the entire table,\n\t    // and align row should be exactly the same (the rest of the rows can differ)\n\t    const columnCount = columns.length;\n\t    if (columnCount === 0 || columnCount !== aligns.length) {\n\t        return false;\n\t    }\n\t    if (silent) {\n\t        return true;\n\t    }\n\t    const oldParentType = state.parentType;\n\t    state.parentType = 'table';\n\t    // use 'blockquote' lists for termination because it's\n\t    // the most similar to tables\n\t    const terminatorRules = state.md.block.ruler.getRules('blockquote');\n\t    const token_to = state.push('table_open', 'table', 1);\n\t    const tableLines = [\n\t        startLine,\n\t        0\n\t    ];\n\t    token_to.map = tableLines;\n\t    const token_tho = state.push('thead_open', 'thead', 1);\n\t    token_tho.map = [\n\t        startLine,\n\t        startLine + 1\n\t    ];\n\t    const token_htro = state.push('tr_open', 'tr', 1);\n\t    token_htro.map = [\n\t        startLine,\n\t        startLine + 1\n\t    ];\n\t    for(let i = 0; i < columns.length; i++){\n\t        const token_ho = state.push('th_open', 'th', 1);\n\t        if (aligns[i]) {\n\t            token_ho.attrs = [\n\t                [\n\t                    'style',\n\t                    'text-align:' + aligns[i]\n\t                ]\n\t            ];\n\t        }\n\t        const token_il = state.push('inline', '', 0);\n\t        token_il.content = columns[i].trim();\n\t        token_il.children = [];\n\t        state.push('th_close', 'th', -1);\n\t    }\n\t    state.push('tr_close', 'tr', -1);\n\t    state.push('thead_close', 'thead', -1);\n\t    let tbodyLines;\n\t    let autocompletedCells = 0;\n\t    for(nextLine = startLine + 2; nextLine < endLine; nextLine++){\n\t        if (state.sCount[nextLine] < state.blkIndent) {\n\t            break;\n\t        }\n\t        let terminate = false;\n\t        for(let i = 0, l = terminatorRules.length; i < l; i++){\n\t            if (terminatorRules[i](state, nextLine, endLine, true)) {\n\t                terminate = true;\n\t                break;\n\t            }\n\t        }\n\t        if (terminate) {\n\t            break;\n\t        }\n\t        lineText = getLine(state, nextLine).trim();\n\t        if (!lineText) {\n\t            break;\n\t        }\n\t        if (state.sCount[nextLine] - state.blkIndent >= 4) {\n\t            break;\n\t        }\n\t        columns = escapedSplit(lineText);\n\t        if (columns.length && columns[0] === '') columns.shift();\n\t        if (columns.length && columns[columns.length - 1] === '') columns.pop();\n\t        // note: autocomplete count can be negative if user specifies more columns than header,\n\t        // but that does not affect intended use (which is limiting expansion)\n\t        autocompletedCells += columnCount - columns.length;\n\t        if (autocompletedCells > MAX_AUTOCOMPLETED_CELLS) {\n\t            break;\n\t        }\n\t        if (nextLine === startLine + 2) {\n\t            const token_tbo = state.push('tbody_open', 'tbody', 1);\n\t            token_tbo.map = tbodyLines = [\n\t                startLine + 2,\n\t                0\n\t            ];\n\t        }\n\t        const token_tro = state.push('tr_open', 'tr', 1);\n\t        token_tro.map = [\n\t            nextLine,\n\t            nextLine + 1\n\t        ];\n\t        for(let i = 0; i < columnCount; i++){\n\t            const token_tdo = state.push('td_open', 'td', 1);\n\t            if (aligns[i]) {\n\t                token_tdo.attrs = [\n\t                    [\n\t                        'style',\n\t                        'text-align:' + aligns[i]\n\t                    ]\n\t                ];\n\t            }\n\t            const token_il = state.push('inline', '', 0);\n\t            token_il.content = columns[i] ? columns[i].trim() : '';\n\t            token_il.children = [];\n\t            state.push('td_close', 'td', -1);\n\t        }\n\t        state.push('tr_close', 'tr', -1);\n\t    }\n\t    if (tbodyLines) {\n\t        state.push('tbody_close', 'tbody', -1);\n\t        tbodyLines[1] = nextLine;\n\t    }\n\t    state.push('table_close', 'table', -1);\n\t    tableLines[1] = nextLine;\n\t    state.parentType = oldParentType;\n\t    state.line = nextLine;\n\t    return true;\n\t}\n\n\t// Code block (4 spaces padded)\n\tfunction code(state, startLine, endLine /*, silent */ ) {\n\t    if (state.sCount[startLine] - state.blkIndent < 4) {\n\t        return false;\n\t    }\n\t    let nextLine = startLine + 1;\n\t    let last = nextLine;\n\t    while(nextLine < endLine){\n\t        if (state.isEmpty(nextLine)) {\n\t            nextLine++;\n\t            continue;\n\t        }\n\t        if (state.sCount[nextLine] - state.blkIndent >= 4) {\n\t            nextLine++;\n\t            last = nextLine;\n\t            continue;\n\t        }\n\t        break;\n\t    }\n\t    state.line = last;\n\t    const token = state.push('code_block', 'code', 0);\n\t    token.content = state.getLines(startLine, last, 4 + state.blkIndent, false) + '\\n';\n\t    token.map = [\n\t        startLine,\n\t        state.line\n\t    ];\n\t    return true;\n\t}\n\n\t// fences (``` lang, ~~~ lang)\n\tfunction fence(state, startLine, endLine, silent) {\n\t    let pos = state.bMarks[startLine] + state.tShift[startLine];\n\t    let max = state.eMarks[startLine];\n\t    // if it's indented more than 3 spaces, it should be a code block\n\t    if (state.sCount[startLine] - state.blkIndent >= 4) {\n\t        return false;\n\t    }\n\t    if (pos + 3 > max) {\n\t        return false;\n\t    }\n\t    const marker = state.src.charCodeAt(pos);\n\t    if (marker !== 0x7E /* ~ */  && marker !== 0x60 /* ` */ ) {\n\t        return false;\n\t    }\n\t    // scan marker length\n\t    let mem = pos;\n\t    pos = state.skipChars(pos, marker);\n\t    let len = pos - mem;\n\t    if (len < 3) {\n\t        return false;\n\t    }\n\t    const markup = state.src.slice(mem, pos);\n\t    const params = state.src.slice(pos, max);\n\t    if (marker === 0x60 /* ` */ ) {\n\t        if (params.indexOf(String.fromCharCode(marker)) >= 0) {\n\t            return false;\n\t        }\n\t    }\n\t    // Since start is found, we can report success here in validation mode\n\t    if (silent) {\n\t        return true;\n\t    }\n\t    // search end of block\n\t    let nextLine = startLine;\n\t    let haveEndMarker = false;\n\t    for(;;){\n\t        nextLine++;\n\t        if (nextLine >= endLine) {\n\t            break;\n\t        }\n\t        pos = mem = state.bMarks[nextLine] + state.tShift[nextLine];\n\t        max = state.eMarks[nextLine];\n\t        if (pos < max && state.sCount[nextLine] < state.blkIndent) {\n\t            break;\n\t        }\n\t        if (state.src.charCodeAt(pos) !== marker) {\n\t            continue;\n\t        }\n\t        if (state.sCount[nextLine] - state.blkIndent >= 4) {\n\t            continue;\n\t        }\n\t        pos = state.skipChars(pos, marker);\n\t        // closing code fence must be at least as long as the opening one\n\t        if (pos - mem < len) {\n\t            continue;\n\t        }\n\t        // make sure tail has spaces only\n\t        pos = state.skipSpaces(pos);\n\t        if (pos < max) {\n\t            continue;\n\t        }\n\t        haveEndMarker = true;\n\t        break;\n\t    }\n\t    // If a fence has heading spaces, they should be removed from its inner block\n\t    len = state.sCount[startLine];\n\t    state.line = nextLine + (haveEndMarker ? 1 : 0);\n\t    const token = state.push('fence', 'code', 0);\n\t    token.info = params;\n\t    token.content = state.getLines(startLine + 1, nextLine, len, true);\n\t    token.markup = markup;\n\t    token.map = [\n\t        startLine,\n\t        state.line\n\t    ];\n\t    return true;\n\t}\n\n\t// Block quotes\n\tfunction blockquote(state, startLine, endLine, silent) {\n\t    let pos = state.bMarks[startLine] + state.tShift[startLine];\n\t    let max = state.eMarks[startLine];\n\t    const oldLineMax = state.lineMax;\n\t    // if it's indented more than 3 spaces, it should be a code block\n\t    if (state.sCount[startLine] - state.blkIndent >= 4) {\n\t        return false;\n\t    }\n\t    // check the block quote marker\n\t    if (state.src.charCodeAt(pos) !== 0x3E /* > */ ) {\n\t        return false;\n\t    }\n\t    // we know that it's going to be a valid blockquote,\n\t    // so no point trying to find the end of it in silent mode\n\t    if (silent) {\n\t        return true;\n\t    }\n\t    const oldBMarks = [];\n\t    const oldBSCount = [];\n\t    const oldSCount = [];\n\t    const oldTShift = [];\n\t    const terminatorRules = state.md.block.ruler.getRules('blockquote');\n\t    const oldParentType = state.parentType;\n\t    state.parentType = 'blockquote';\n\t    let lastLineEmpty = false;\n\t    let nextLine;\n\t    // Search the end of the block\n\t    //\n\t    // Block ends with either:\n\t    //  1. an empty line outside:\n\t    //     ```\n\t    //     > test\n\t    //\n\t    //     ```\n\t    //  2. an empty line inside:\n\t    //     ```\n\t    //     >\n\t    //     test\n\t    //     ```\n\t    //  3. another tag:\n\t    //     ```\n\t    //     > test\n\t    //      - - -\n\t    //     ```\n\t    for(nextLine = startLine; nextLine < endLine; nextLine++){\n\t        // check if it's outdented, i.e. it's inside list item and indented\n\t        // less than said list item:\n\t        //\n\t        // ```\n\t        // 1. anything\n\t        //    > current blockquote\n\t        // 2. checking this line\n\t        // ```\n\t        const isOutdented = state.sCount[nextLine] < state.blkIndent;\n\t        pos = state.bMarks[nextLine] + state.tShift[nextLine];\n\t        max = state.eMarks[nextLine];\n\t        if (pos >= max) {\n\t            break;\n\t        }\n\t        if (state.src.charCodeAt(pos++) === 0x3E /* > */  && !isOutdented) {\n\t            // This line is inside the blockquote.\n\t            // set offset past spaces and \">\"\n\t            let initial = state.sCount[nextLine] + 1;\n\t            let spaceAfterMarker;\n\t            let adjustTab;\n\t            // skip one optional space after '>'\n\t            if (state.src.charCodeAt(pos) === 0x20 /* space */ ) {\n\t                // ' >   test '\n\t                //     ^ -- position start of line here:\n\t                pos++;\n\t                initial++;\n\t                adjustTab = false;\n\t                spaceAfterMarker = true;\n\t            } else if (state.src.charCodeAt(pos) === 0x09 /* tab */ ) {\n\t                spaceAfterMarker = true;\n\t                if ((state.bsCount[nextLine] + initial) % 4 === 3) {\n\t                    // '  >\\t  test '\n\t                    //       ^ -- position start of line here (tab has width===1)\n\t                    pos++;\n\t                    initial++;\n\t                    adjustTab = false;\n\t                } else {\n\t                    // ' >\\t  test '\n\t                    //    ^ -- position start of line here + shift bsCount slightly\n\t                    //         to make extra space appear\n\t                    adjustTab = true;\n\t                }\n\t            } else {\n\t                spaceAfterMarker = false;\n\t            }\n\t            let offset = initial;\n\t            oldBMarks.push(state.bMarks[nextLine]);\n\t            state.bMarks[nextLine] = pos;\n\t            while(pos < max){\n\t                const ch = state.src.charCodeAt(pos);\n\t                if (isSpace(ch)) {\n\t                    if (ch === 0x09) {\n\t                        offset += 4 - (offset + state.bsCount[nextLine] + (adjustTab ? 1 : 0)) % 4;\n\t                    } else {\n\t                        offset++;\n\t                    }\n\t                } else {\n\t                    break;\n\t                }\n\t                pos++;\n\t            }\n\t            lastLineEmpty = pos >= max;\n\t            oldBSCount.push(state.bsCount[nextLine]);\n\t            state.bsCount[nextLine] = state.sCount[nextLine] + 1 + (spaceAfterMarker ? 1 : 0);\n\t            oldSCount.push(state.sCount[nextLine]);\n\t            state.sCount[nextLine] = offset - initial;\n\t            oldTShift.push(state.tShift[nextLine]);\n\t            state.tShift[nextLine] = pos - state.bMarks[nextLine];\n\t            continue;\n\t        }\n\t        // Case 2: line is not inside the blockquote, and the last line was empty.\n\t        if (lastLineEmpty) {\n\t            break;\n\t        }\n\t        // Case 3: another tag found.\n\t        let terminate = false;\n\t        for(let i = 0, l = terminatorRules.length; i < l; i++){\n\t            if (terminatorRules[i](state, nextLine, endLine, true)) {\n\t                terminate = true;\n\t                break;\n\t            }\n\t        }\n\t        if (terminate) {\n\t            // Quirk to enforce \"hard termination mode\" for paragraphs;\n\t            // normally if you call `tokenize(state, startLine, nextLine)`,\n\t            // paragraphs will look below nextLine for paragraph continuation,\n\t            // but if blockquote is terminated by another tag, they shouldn't\n\t            state.lineMax = nextLine;\n\t            if (state.blkIndent !== 0) {\n\t                // state.blkIndent was non-zero, we now set it to zero,\n\t                // so we need to re-calculate all offsets to appear as\n\t                // if indent wasn't changed\n\t                oldBMarks.push(state.bMarks[nextLine]);\n\t                oldBSCount.push(state.bsCount[nextLine]);\n\t                oldTShift.push(state.tShift[nextLine]);\n\t                oldSCount.push(state.sCount[nextLine]);\n\t                state.sCount[nextLine] -= state.blkIndent;\n\t            }\n\t            break;\n\t        }\n\t        oldBMarks.push(state.bMarks[nextLine]);\n\t        oldBSCount.push(state.bsCount[nextLine]);\n\t        oldTShift.push(state.tShift[nextLine]);\n\t        oldSCount.push(state.sCount[nextLine]);\n\t        // A negative indentation means that this is a paragraph continuation\n\t        //\n\t        state.sCount[nextLine] = -1;\n\t    }\n\t    const oldIndent = state.blkIndent;\n\t    state.blkIndent = 0;\n\t    const token_o = state.push('blockquote_open', 'blockquote', 1);\n\t    token_o.markup = '>';\n\t    const lines = [\n\t        startLine,\n\t        0\n\t    ];\n\t    token_o.map = lines;\n\t    state.md.block.tokenize(state, startLine, nextLine);\n\t    const token_c = state.push('blockquote_close', 'blockquote', -1);\n\t    token_c.markup = '>';\n\t    state.lineMax = oldLineMax;\n\t    state.parentType = oldParentType;\n\t    lines[1] = state.line;\n\t    // Restore original tShift; this might not be necessary since the parser\n\t    // has already been here, but just to make sure we can do that.\n\t    for(let i = 0; i < oldTShift.length; i++){\n\t        state.bMarks[i + startLine] = oldBMarks[i];\n\t        state.tShift[i + startLine] = oldTShift[i];\n\t        state.sCount[i + startLine] = oldSCount[i];\n\t        state.bsCount[i + startLine] = oldBSCount[i];\n\t    }\n\t    state.blkIndent = oldIndent;\n\t    return true;\n\t}\n\n\t// Horizontal rule\n\tfunction hr(state, startLine, endLine, silent) {\n\t    const max = state.eMarks[startLine];\n\t    // if it's indented more than 3 spaces, it should be a code block\n\t    if (state.sCount[startLine] - state.blkIndent >= 4) {\n\t        return false;\n\t    }\n\t    let pos = state.bMarks[startLine] + state.tShift[startLine];\n\t    const marker = state.src.charCodeAt(pos++);\n\t    // Check hr marker\n\t    if (marker !== 0x2A /* * */  && marker !== 0x2D /* - */  && marker !== 0x5F /* _ */ ) {\n\t        return false;\n\t    }\n\t    // markers can be mixed with spaces, but there should be at least 3 of them\n\t    let cnt = 1;\n\t    while(pos < max){\n\t        const ch = state.src.charCodeAt(pos++);\n\t        if (ch !== marker && !isSpace(ch)) {\n\t            return false;\n\t        }\n\t        if (ch === marker) {\n\t            cnt++;\n\t        }\n\t    }\n\t    if (cnt < 3) {\n\t        return false;\n\t    }\n\t    if (silent) {\n\t        return true;\n\t    }\n\t    state.line = startLine + 1;\n\t    const token = state.push('hr', 'hr', 0);\n\t    token.map = [\n\t        startLine,\n\t        state.line\n\t    ];\n\t    token.markup = Array(cnt + 1).join(String.fromCharCode(marker));\n\t    return true;\n\t}\n\n\t// Lists\n\t// Search `[-+*][\\n ]`, returns next pos after marker on success\n\t// or -1 on fail.\n\tfunction skipBulletListMarker(state, startLine) {\n\t    const max = state.eMarks[startLine];\n\t    let pos = state.bMarks[startLine] + state.tShift[startLine];\n\t    const marker = state.src.charCodeAt(pos++);\n\t    // Check bullet\n\t    if (marker !== 0x2A /* * */  && marker !== 0x2D /* - */  && marker !== 0x2B /* + */ ) {\n\t        return -1;\n\t    }\n\t    if (pos < max) {\n\t        const ch = state.src.charCodeAt(pos);\n\t        if (!isSpace(ch)) {\n\t            // \" -test \" - is not a list item\n\t            return -1;\n\t        }\n\t    }\n\t    return pos;\n\t}\n\t// Search `\\d+[.)][\\n ]`, returns next pos after marker on success\n\t// or -1 on fail.\n\tfunction skipOrderedListMarker(state, startLine) {\n\t    const start = state.bMarks[startLine] + state.tShift[startLine];\n\t    const max = state.eMarks[startLine];\n\t    let pos = start;\n\t    // List marker should have at least 2 chars (digit + dot)\n\t    if (pos + 1 >= max) {\n\t        return -1;\n\t    }\n\t    let ch = state.src.charCodeAt(pos++);\n\t    if (ch < 0x30 /* 0 */  || ch > 0x39 /* 9 */ ) {\n\t        return -1;\n\t    }\n\t    for(;;){\n\t        // EOL -> fail\n\t        if (pos >= max) {\n\t            return -1;\n\t        }\n\t        ch = state.src.charCodeAt(pos++);\n\t        if (ch >= 0x30 /* 0 */  && ch <= 0x39 /* 9 */ ) {\n\t            // List marker should have no more than 9 digits\n\t            // (prevents integer overflow in browsers)\n\t            if (pos - start >= 10) {\n\t                return -1;\n\t            }\n\t            continue;\n\t        }\n\t        // found valid marker\n\t        if (ch === 0x29 /* ) */  || ch === 0x2e /* . */ ) {\n\t            break;\n\t        }\n\t        return -1;\n\t    }\n\t    if (pos < max) {\n\t        ch = state.src.charCodeAt(pos);\n\t        if (!isSpace(ch)) {\n\t            // \" 1.test \" - is not a list item\n\t            return -1;\n\t        }\n\t    }\n\t    return pos;\n\t}\n\tfunction markTightParagraphs(state, idx) {\n\t    const level = state.level + 2;\n\t    for(let i = idx + 2, l = state.tokens.length - 2; i < l; i++){\n\t        if (state.tokens[i].level === level && state.tokens[i].type === 'paragraph_open') {\n\t            state.tokens[i + 2].hidden = true;\n\t            state.tokens[i].hidden = true;\n\t            i += 2;\n\t        }\n\t    }\n\t}\n\tfunction list(state, startLine, endLine, silent) {\n\t    let max, pos, start, token;\n\t    let nextLine = startLine;\n\t    let tight = true;\n\t    // if it's indented more than 3 spaces, it should be a code block\n\t    if (state.sCount[nextLine] - state.blkIndent >= 4) {\n\t        return false;\n\t    }\n\t    // Special case:\n\t    //  - item 1\n\t    //   - item 2\n\t    //    - item 3\n\t    //     - item 4\n\t    //      - this one is a paragraph continuation\n\t    if (state.listIndent >= 0 && state.sCount[nextLine] - state.listIndent >= 4 && state.sCount[nextLine] < state.blkIndent) {\n\t        return false;\n\t    }\n\t    let isTerminatingParagraph = false;\n\t    // limit conditions when list can interrupt\n\t    // a paragraph (validation mode only)\n\t    if (silent && state.parentType === 'paragraph') {\n\t        // Next list item should still terminate previous list item;\n\t        //\n\t        // This code can fail if plugins use blkIndent as well as lists,\n\t        // but I hope the spec gets fixed long before that happens.\n\t        //\n\t        if (state.sCount[nextLine] >= state.blkIndent) {\n\t            isTerminatingParagraph = true;\n\t        }\n\t    }\n\t    // Detect list type and position after marker\n\t    let isOrdered;\n\t    let markerValue;\n\t    let posAfterMarker;\n\t    if ((posAfterMarker = skipOrderedListMarker(state, nextLine)) >= 0) {\n\t        isOrdered = true;\n\t        start = state.bMarks[nextLine] + state.tShift[nextLine];\n\t        markerValue = Number(state.src.slice(start, posAfterMarker - 1));\n\t        // If we're starting a new ordered list right after\n\t        // a paragraph, it should start with 1.\n\t        if (isTerminatingParagraph && markerValue !== 1) return false;\n\t    } else if ((posAfterMarker = skipBulletListMarker(state, nextLine)) >= 0) {\n\t        isOrdered = false;\n\t    } else {\n\t        return false;\n\t    }\n\t    // If we're starting a new unordered list right after\n\t    // a paragraph, first line should not be empty.\n\t    if (isTerminatingParagraph) {\n\t        if (state.skipSpaces(posAfterMarker) >= state.eMarks[nextLine]) return false;\n\t    }\n\t    // For validation mode we can terminate immediately\n\t    if (silent) {\n\t        return true;\n\t    }\n\t    // We should terminate list on style change. Remember first one to compare.\n\t    const markerCharCode = state.src.charCodeAt(posAfterMarker - 1);\n\t    // Start list\n\t    const listTokIdx = state.tokens.length;\n\t    if (isOrdered) {\n\t        token = state.push('ordered_list_open', 'ol', 1);\n\t        if (markerValue !== 1) {\n\t            token.attrs = [\n\t                [\n\t                    'start',\n\t                    markerValue\n\t                ]\n\t            ];\n\t        }\n\t    } else {\n\t        token = state.push('bullet_list_open', 'ul', 1);\n\t    }\n\t    const listLines = [\n\t        nextLine,\n\t        0\n\t    ];\n\t    token.map = listLines;\n\t    token.markup = String.fromCharCode(markerCharCode);\n\t    //\n\t    // Iterate list items\n\t    //\n\t    let prevEmptyEnd = false;\n\t    const terminatorRules = state.md.block.ruler.getRules('list');\n\t    const oldParentType = state.parentType;\n\t    state.parentType = 'list';\n\t    while(nextLine < endLine){\n\t        pos = posAfterMarker;\n\t        max = state.eMarks[nextLine];\n\t        const initial = state.sCount[nextLine] + posAfterMarker - (state.bMarks[nextLine] + state.tShift[nextLine]);\n\t        let offset = initial;\n\t        while(pos < max){\n\t            const ch = state.src.charCodeAt(pos);\n\t            if (ch === 0x09) {\n\t                offset += 4 - (offset + state.bsCount[nextLine]) % 4;\n\t            } else if (ch === 0x20) {\n\t                offset++;\n\t            } else {\n\t                break;\n\t            }\n\t            pos++;\n\t        }\n\t        const contentStart = pos;\n\t        let indentAfterMarker;\n\t        if (contentStart >= max) {\n\t            // trimming space in \"-    \\n  3\" case, indent is 1 here\n\t            indentAfterMarker = 1;\n\t        } else {\n\t            indentAfterMarker = offset - initial;\n\t        }\n\t        // If we have more than 4 spaces, the indent is 1\n\t        // (the rest is just indented code block)\n\t        if (indentAfterMarker > 4) {\n\t            indentAfterMarker = 1;\n\t        }\n\t        // \"  -  test\"\n\t        //  ^^^^^ - calculating total length of this thing\n\t        const indent = initial + indentAfterMarker;\n\t        // Run subparser & write tokens\n\t        token = state.push('list_item_open', 'li', 1);\n\t        token.markup = String.fromCharCode(markerCharCode);\n\t        const itemLines = [\n\t            nextLine,\n\t            0\n\t        ];\n\t        token.map = itemLines;\n\t        if (isOrdered) {\n\t            token.info = state.src.slice(start, posAfterMarker - 1);\n\t        }\n\t        // change current state, then restore it after parser subcall\n\t        const oldTight = state.tight;\n\t        const oldTShift = state.tShift[nextLine];\n\t        const oldSCount = state.sCount[nextLine];\n\t        //  - example list\n\t        // ^ listIndent position will be here\n\t        //   ^ blkIndent position will be here\n\t        //\n\t        const oldListIndent = state.listIndent;\n\t        state.listIndent = state.blkIndent;\n\t        state.blkIndent = indent;\n\t        state.tight = true;\n\t        state.tShift[nextLine] = contentStart - state.bMarks[nextLine];\n\t        state.sCount[nextLine] = offset;\n\t        if (contentStart >= max && state.isEmpty(nextLine + 1)) {\n\t            // workaround for this case\n\t            // (list item is empty, list terminates before \"foo\"):\n\t            // ~~~~~~~~\n\t            //   -\n\t            //\n\t            //     foo\n\t            // ~~~~~~~~\n\t            state.line = Math.min(state.line + 2, endLine);\n\t        } else {\n\t            state.md.block.tokenize(state, nextLine, endLine, true);\n\t        }\n\t        // If any of list item is tight, mark list as tight\n\t        if (!state.tight || prevEmptyEnd) {\n\t            tight = false;\n\t        }\n\t        // Item become loose if finish with empty line,\n\t        // but we should filter last element, because it means list finish\n\t        prevEmptyEnd = state.line - nextLine > 1 && state.isEmpty(state.line - 1);\n\t        state.blkIndent = state.listIndent;\n\t        state.listIndent = oldListIndent;\n\t        state.tShift[nextLine] = oldTShift;\n\t        state.sCount[nextLine] = oldSCount;\n\t        state.tight = oldTight;\n\t        token = state.push('list_item_close', 'li', -1);\n\t        token.markup = String.fromCharCode(markerCharCode);\n\t        nextLine = state.line;\n\t        itemLines[1] = nextLine;\n\t        if (nextLine >= endLine) {\n\t            break;\n\t        }\n\t        //\n\t        // Try to check if list is terminated or continued.\n\t        //\n\t        if (state.sCount[nextLine] < state.blkIndent) {\n\t            break;\n\t        }\n\t        // if it's indented more than 3 spaces, it should be a code block\n\t        if (state.sCount[nextLine] - state.blkIndent >= 4) {\n\t            break;\n\t        }\n\t        // fail if terminating block found\n\t        let terminate = false;\n\t        for(let i = 0, l = terminatorRules.length; i < l; i++){\n\t            if (terminatorRules[i](state, nextLine, endLine, true)) {\n\t                terminate = true;\n\t                break;\n\t            }\n\t        }\n\t        if (terminate) {\n\t            break;\n\t        }\n\t        // fail if list has another type\n\t        if (isOrdered) {\n\t            posAfterMarker = skipOrderedListMarker(state, nextLine);\n\t            if (posAfterMarker < 0) {\n\t                break;\n\t            }\n\t            start = state.bMarks[nextLine] + state.tShift[nextLine];\n\t        } else {\n\t            posAfterMarker = skipBulletListMarker(state, nextLine);\n\t            if (posAfterMarker < 0) {\n\t                break;\n\t            }\n\t        }\n\t        if (markerCharCode !== state.src.charCodeAt(posAfterMarker - 1)) {\n\t            break;\n\t        }\n\t    }\n\t    // Finalize list\n\t    if (isOrdered) {\n\t        token = state.push('ordered_list_close', 'ol', -1);\n\t    } else {\n\t        token = state.push('bullet_list_close', 'ul', -1);\n\t    }\n\t    token.markup = String.fromCharCode(markerCharCode);\n\t    listLines[1] = nextLine;\n\t    state.line = nextLine;\n\t    state.parentType = oldParentType;\n\t    // mark paragraphs tight if needed\n\t    if (tight) {\n\t        markTightParagraphs(state, listTokIdx);\n\t    }\n\t    return true;\n\t}\n\n\tfunction reference(state, startLine, _endLine, silent) {\n\t    let pos = state.bMarks[startLine] + state.tShift[startLine];\n\t    let max = state.eMarks[startLine];\n\t    let nextLine = startLine + 1;\n\t    // if it's indented more than 3 spaces, it should be a code block\n\t    if (state.sCount[startLine] - state.blkIndent >= 4) {\n\t        return false;\n\t    }\n\t    if (state.src.charCodeAt(pos) !== 0x5B /* [ */ ) {\n\t        return false;\n\t    }\n\t    function getNextLine(nextLine) {\n\t        const endLine = state.lineMax;\n\t        if (nextLine >= endLine || state.isEmpty(nextLine)) {\n\t            // empty line or end of input\n\t            return null;\n\t        }\n\t        let isContinuation = false;\n\t        // this would be a code block normally, but after paragraph\n\t        // it's considered a lazy continuation regardless of what's there\n\t        if (state.sCount[nextLine] - state.blkIndent > 3) {\n\t            isContinuation = true;\n\t        }\n\t        // quirk for blockquotes, this line should already be checked by that rule\n\t        if (state.sCount[nextLine] < 0) {\n\t            isContinuation = true;\n\t        }\n\t        if (!isContinuation) {\n\t            const terminatorRules = state.md.block.ruler.getRules('reference');\n\t            const oldParentType = state.parentType;\n\t            state.parentType = 'reference';\n\t            // Some tags can terminate paragraph without empty line.\n\t            let terminate = false;\n\t            for(let i = 0, l = terminatorRules.length; i < l; i++){\n\t                if (terminatorRules[i](state, nextLine, endLine, true)) {\n\t                    terminate = true;\n\t                    break;\n\t                }\n\t            }\n\t            state.parentType = oldParentType;\n\t            if (terminate) {\n\t                // terminated by another block\n\t                return null;\n\t            }\n\t        }\n\t        const pos = state.bMarks[nextLine] + state.tShift[nextLine];\n\t        const max = state.eMarks[nextLine];\n\t        // max + 1 explicitly includes the newline\n\t        return state.src.slice(pos, max + 1);\n\t    }\n\t    let str = state.src.slice(pos, max + 1);\n\t    max = str.length;\n\t    let labelEnd = -1;\n\t    for(pos = 1; pos < max; pos++){\n\t        const ch = str.charCodeAt(pos);\n\t        if (ch === 0x5B /* [ */ ) {\n\t            return false;\n\t        } else if (ch === 0x5D /* ] */ ) {\n\t            labelEnd = pos;\n\t            break;\n\t        } else if (ch === 0x0A /* \\n */ ) {\n\t            const lineContent = getNextLine(nextLine);\n\t            if (lineContent !== null) {\n\t                str += lineContent;\n\t                max = str.length;\n\t                nextLine++;\n\t            }\n\t        } else if (ch === 0x5C /* \\ */ ) {\n\t            pos++;\n\t            if (pos < max && str.charCodeAt(pos) === 0x0A) {\n\t                const lineContent = getNextLine(nextLine);\n\t                if (lineContent !== null) {\n\t                    str += lineContent;\n\t                    max = str.length;\n\t                    nextLine++;\n\t                }\n\t            }\n\t        }\n\t    }\n\t    if (labelEnd < 0 || str.charCodeAt(labelEnd + 1) !== 0x3A /* : */ ) {\n\t        return false;\n\t    }\n\t    // [label]:   destination   'title'\n\t    //         ^^^ skip optional whitespace here\n\t    for(pos = labelEnd + 2; pos < max; pos++){\n\t        const ch = str.charCodeAt(pos);\n\t        if (ch === 0x0A) {\n\t            const lineContent = getNextLine(nextLine);\n\t            if (lineContent !== null) {\n\t                str += lineContent;\n\t                max = str.length;\n\t                nextLine++;\n\t            }\n\t        } else if (isSpace(ch)) ; else {\n\t            break;\n\t        }\n\t    }\n\t    // [label]:   destination   'title'\n\t    //            ^^^^^^^^^^^ parse this\n\t    const destRes = state.md.helpers.parseLinkDestination(str, pos, max);\n\t    if (!destRes.ok) {\n\t        return false;\n\t    }\n\t    const href = state.md.normalizeLink(destRes.str);\n\t    if (!state.md.validateLink(href)) {\n\t        return false;\n\t    }\n\t    pos = destRes.pos;\n\t    // save cursor state, we could require to rollback later\n\t    const destEndPos = pos;\n\t    const destEndLineNo = nextLine;\n\t    // [label]:   destination   'title'\n\t    //                       ^^^ skipping those spaces\n\t    const start = pos;\n\t    for(; pos < max; pos++){\n\t        const ch = str.charCodeAt(pos);\n\t        if (ch === 0x0A) {\n\t            const lineContent = getNextLine(nextLine);\n\t            if (lineContent !== null) {\n\t                str += lineContent;\n\t                max = str.length;\n\t                nextLine++;\n\t            }\n\t        } else if (isSpace(ch)) ; else {\n\t            break;\n\t        }\n\t    }\n\t    // [label]:   destination   'title'\n\t    //                          ^^^^^^^ parse this\n\t    let titleRes = state.md.helpers.parseLinkTitle(str, pos, max);\n\t    while(titleRes.can_continue){\n\t        const lineContent = getNextLine(nextLine);\n\t        if (lineContent === null) break;\n\t        str += lineContent;\n\t        pos = max;\n\t        max = str.length;\n\t        nextLine++;\n\t        titleRes = state.md.helpers.parseLinkTitle(str, pos, max, titleRes);\n\t    }\n\t    let title;\n\t    if (pos < max && start !== pos && titleRes.ok) {\n\t        title = titleRes.str;\n\t        pos = titleRes.pos;\n\t    } else {\n\t        title = '';\n\t        pos = destEndPos;\n\t        nextLine = destEndLineNo;\n\t    }\n\t    // skip trailing spaces until the rest of the line\n\t    while(pos < max){\n\t        const ch = str.charCodeAt(pos);\n\t        if (!isSpace(ch)) {\n\t            break;\n\t        }\n\t        pos++;\n\t    }\n\t    if (pos < max && str.charCodeAt(pos) !== 0x0A) {\n\t        if (title) {\n\t            // garbage at the end of the line after title,\n\t            // but it could still be a valid reference if we roll back\n\t            title = '';\n\t            pos = destEndPos;\n\t            nextLine = destEndLineNo;\n\t            while(pos < max){\n\t                const ch = str.charCodeAt(pos);\n\t                if (!isSpace(ch)) {\n\t                    break;\n\t                }\n\t                pos++;\n\t            }\n\t        }\n\t    }\n\t    if (pos < max && str.charCodeAt(pos) !== 0x0A) {\n\t        // garbage at the end of the line\n\t        return false;\n\t    }\n\t    const label = normalizeReference(str.slice(1, labelEnd));\n\t    if (!label) {\n\t        // CommonMark 0.20 disallows empty labels\n\t        return false;\n\t    }\n\t    // Reference can not terminate anything. This check is for safety only.\n\t    /* istanbul ignore if */ if (silent) {\n\t        return true;\n\t    }\n\t    if (typeof state.env.references === 'undefined') {\n\t        state.env.references = {};\n\t    }\n\t    if (typeof state.env.references[label] === 'undefined') {\n\t        state.env.references[label] = {\n\t            title,\n\t            href\n\t        };\n\t    }\n\t    state.line = nextLine;\n\t    return true;\n\t}\n\n\t// List of valid html blocks names, according to commonmark spec\n\t// https://spec.commonmark.org/0.30/#html-blocks\n\tvar block_names = [\n\t    'address',\n\t    'article',\n\t    'aside',\n\t    'base',\n\t    'basefont',\n\t    'blockquote',\n\t    'body',\n\t    'caption',\n\t    'center',\n\t    'col',\n\t    'colgroup',\n\t    'dd',\n\t    'details',\n\t    'dialog',\n\t    'dir',\n\t    'div',\n\t    'dl',\n\t    'dt',\n\t    'fieldset',\n\t    'figcaption',\n\t    'figure',\n\t    'footer',\n\t    'form',\n\t    'frame',\n\t    'frameset',\n\t    'h1',\n\t    'h2',\n\t    'h3',\n\t    'h4',\n\t    'h5',\n\t    'h6',\n\t    'head',\n\t    'header',\n\t    'hr',\n\t    'html',\n\t    'iframe',\n\t    'legend',\n\t    'li',\n\t    'link',\n\t    'main',\n\t    'menu',\n\t    'menuitem',\n\t    'nav',\n\t    'noframes',\n\t    'ol',\n\t    'optgroup',\n\t    'option',\n\t    'p',\n\t    'param',\n\t    'search',\n\t    'section',\n\t    'summary',\n\t    'table',\n\t    'tbody',\n\t    'td',\n\t    'tfoot',\n\t    'th',\n\t    'thead',\n\t    'title',\n\t    'tr',\n\t    'track',\n\t    'ul'\n\t];\n\n\t// Regexps to match html elements\n\tconst attr_name = '[a-zA-Z_:][a-zA-Z0-9:._-]*';\n\tconst unquoted = '[^\"\\'=<>`\\\\x00-\\\\x20]+';\n\tconst single_quoted = \"'[^']*'\";\n\tconst double_quoted = '\"[^\"]*\"';\n\tconst attr_value = '(?:' + unquoted + '|' + single_quoted + '|' + double_quoted + ')';\n\tconst attribute = '(?:\\\\s+' + attr_name + '(?:\\\\s*=\\\\s*' + attr_value + ')?)';\n\tconst open_tag = '<[A-Za-z][A-Za-z0-9\\\\-]*' + attribute + '*\\\\s*\\\\/?>';\n\tconst close_tag = '<\\\\/[A-Za-z][A-Za-z0-9\\\\-]*\\\\s*>';\n\tconst comment = '<!---?>|<!--(?:[^-]|-[^-]|--[^>])*-->';\n\tconst processing = '<[?][\\\\s\\\\S]*?[?]>';\n\tconst declaration = '<![A-Za-z][^>]*>';\n\tconst cdata = '<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>';\n\tconst HTML_TAG_RE = new RegExp('^(?:' + open_tag + '|' + close_tag + '|' + comment + '|' + processing + '|' + declaration + '|' + cdata + ')');\n\tconst HTML_OPEN_CLOSE_TAG_RE = new RegExp('^(?:' + open_tag + '|' + close_tag + ')');\n\n\t// HTML block\n\t// An array of opening and corresponding closing sequences for html tags,\n\t// last argument defines whether it can terminate a paragraph or not\n\t//\n\tconst HTML_SEQUENCES = [\n\t    [\n\t        /^<(script|pre|style|textarea)(?=(\\s|>|$))/i,\n\t        /<\\/(script|pre|style|textarea)>/i,\n\t        true\n\t    ],\n\t    [\n\t        /^<!--/,\n\t        /-->/,\n\t        true\n\t    ],\n\t    [\n\t        /^<\\?/,\n\t        /\\?>/,\n\t        true\n\t    ],\n\t    [\n\t        /^<![A-Z]/,\n\t        />/,\n\t        true\n\t    ],\n\t    [\n\t        /^<!\\[CDATA\\[/,\n\t        /\\]\\]>/,\n\t        true\n\t    ],\n\t    [\n\t        new RegExp('^</?(' + block_names.join('|') + ')(?=(\\\\s|/?>|$))', 'i'),\n\t        /^$/,\n\t        true\n\t    ],\n\t    [\n\t        new RegExp(HTML_OPEN_CLOSE_TAG_RE.source + '\\\\s*$'),\n\t        /^$/,\n\t        false\n\t    ]\n\t];\n\tfunction html_block(state, startLine, endLine, silent) {\n\t    let pos = state.bMarks[startLine] + state.tShift[startLine];\n\t    let max = state.eMarks[startLine];\n\t    // if it's indented more than 3 spaces, it should be a code block\n\t    if (state.sCount[startLine] - state.blkIndent >= 4) {\n\t        return false;\n\t    }\n\t    if (!state.md.options.html) {\n\t        return false;\n\t    }\n\t    if (state.src.charCodeAt(pos) !== 0x3C /* < */ ) {\n\t        return false;\n\t    }\n\t    let lineText = state.src.slice(pos, max);\n\t    let i = 0;\n\t    for(; i < HTML_SEQUENCES.length; i++){\n\t        if (HTML_SEQUENCES[i][0].test(lineText)) {\n\t            break;\n\t        }\n\t    }\n\t    if (i === HTML_SEQUENCES.length) {\n\t        return false;\n\t    }\n\t    if (silent) {\n\t        // true if this sequence can be a terminator, false otherwise\n\t        return HTML_SEQUENCES[i][2];\n\t    }\n\t    let nextLine = startLine + 1;\n\t    // If we are here - we detected HTML block.\n\t    // Let's roll down till block end.\n\t    if (!HTML_SEQUENCES[i][1].test(lineText)) {\n\t        for(; nextLine < endLine; nextLine++){\n\t            if (state.sCount[nextLine] < state.blkIndent) {\n\t                break;\n\t            }\n\t            pos = state.bMarks[nextLine] + state.tShift[nextLine];\n\t            max = state.eMarks[nextLine];\n\t            lineText = state.src.slice(pos, max);\n\t            if (HTML_SEQUENCES[i][1].test(lineText)) {\n\t                if (lineText.length !== 0) {\n\t                    nextLine++;\n\t                }\n\t                break;\n\t            }\n\t        }\n\t    }\n\t    state.line = nextLine;\n\t    const token = state.push('html_block', '', 0);\n\t    token.map = [\n\t        startLine,\n\t        nextLine\n\t    ];\n\t    token.content = state.getLines(startLine, nextLine, state.blkIndent, true);\n\t    return true;\n\t}\n\n\t// heading (#, ##, ...)\n\tfunction heading(state, startLine, endLine, silent) {\n\t    let pos = state.bMarks[startLine] + state.tShift[startLine];\n\t    let max = state.eMarks[startLine];\n\t    // if it's indented more than 3 spaces, it should be a code block\n\t    if (state.sCount[startLine] - state.blkIndent >= 4) {\n\t        return false;\n\t    }\n\t    let ch = state.src.charCodeAt(pos);\n\t    if (ch !== 0x23 /* # */  || pos >= max) {\n\t        return false;\n\t    }\n\t    // count heading level\n\t    let level = 1;\n\t    ch = state.src.charCodeAt(++pos);\n\t    while(ch === 0x23 /* # */  && pos < max && level <= 6){\n\t        level++;\n\t        ch = state.src.charCodeAt(++pos);\n\t    }\n\t    if (level > 6 || pos < max && !isSpace(ch)) {\n\t        return false;\n\t    }\n\t    if (silent) {\n\t        return true;\n\t    }\n\t    // Let's cut tails like '    ###  ' from the end of string\n\t    max = state.skipSpacesBack(max, pos);\n\t    const tmp = state.skipCharsBack(max, 0x23, pos) // #\n\t    ;\n\t    if (tmp > pos && isSpace(state.src.charCodeAt(tmp - 1))) {\n\t        max = tmp;\n\t    }\n\t    state.line = startLine + 1;\n\t    const token_o = state.push('heading_open', 'h' + String(level), 1);\n\t    token_o.markup = '########'.slice(0, level);\n\t    token_o.map = [\n\t        startLine,\n\t        state.line\n\t    ];\n\t    const token_i = state.push('inline', '', 0);\n\t    token_i.content = state.src.slice(pos, max).trim();\n\t    token_i.map = [\n\t        startLine,\n\t        state.line\n\t    ];\n\t    token_i.children = [];\n\t    const token_c = state.push('heading_close', 'h' + String(level), -1);\n\t    token_c.markup = '########'.slice(0, level);\n\t    return true;\n\t}\n\n\t// lheading (---, ===)\n\tfunction lheading(state, startLine, endLine /*, silent */ ) {\n\t    const terminatorRules = state.md.block.ruler.getRules('paragraph');\n\t    // if it's indented more than 3 spaces, it should be a code block\n\t    if (state.sCount[startLine] - state.blkIndent >= 4) {\n\t        return false;\n\t    }\n\t    const oldParentType = state.parentType;\n\t    state.parentType = 'paragraph' // use paragraph to match terminatorRules\n\t    ;\n\t    // jump line-by-line until empty one or EOF\n\t    let level = 0;\n\t    let marker;\n\t    let nextLine = startLine + 1;\n\t    for(; nextLine < endLine && !state.isEmpty(nextLine); nextLine++){\n\t        // this would be a code block normally, but after paragraph\n\t        // it's considered a lazy continuation regardless of what's there\n\t        if (state.sCount[nextLine] - state.blkIndent > 3) {\n\t            continue;\n\t        }\n\t        //\n\t        // Check for underline in setext header\n\t        //\n\t        if (state.sCount[nextLine] >= state.blkIndent) {\n\t            let pos = state.bMarks[nextLine] + state.tShift[nextLine];\n\t            const max = state.eMarks[nextLine];\n\t            if (pos < max) {\n\t                marker = state.src.charCodeAt(pos);\n\t                if (marker === 0x2D /* - */  || marker === 0x3D /* = */ ) {\n\t                    pos = state.skipChars(pos, marker);\n\t                    pos = state.skipSpaces(pos);\n\t                    if (pos >= max) {\n\t                        level = marker === 0x3D /* = */  ? 1 : 2;\n\t                        break;\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        // quirk for blockquotes, this line should already be checked by that rule\n\t        if (state.sCount[nextLine] < 0) {\n\t            continue;\n\t        }\n\t        // Some tags can terminate paragraph without empty line.\n\t        let terminate = false;\n\t        for(let i = 0, l = terminatorRules.length; i < l; i++){\n\t            if (terminatorRules[i](state, nextLine, endLine, true)) {\n\t                terminate = true;\n\t                break;\n\t            }\n\t        }\n\t        if (terminate) {\n\t            break;\n\t        }\n\t    }\n\t    if (!level) {\n\t        // Didn't find valid underline\n\t        return false;\n\t    }\n\t    const content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n\t    state.line = nextLine + 1;\n\t    const token_o = state.push('heading_open', 'h' + String(level), 1);\n\t    token_o.markup = String.fromCharCode(marker);\n\t    token_o.map = [\n\t        startLine,\n\t        state.line\n\t    ];\n\t    const token_i = state.push('inline', '', 0);\n\t    token_i.content = content;\n\t    token_i.map = [\n\t        startLine,\n\t        state.line - 1\n\t    ];\n\t    token_i.children = [];\n\t    const token_c = state.push('heading_close', 'h' + String(level), -1);\n\t    token_c.markup = String.fromCharCode(marker);\n\t    state.parentType = oldParentType;\n\t    return true;\n\t}\n\n\t// Paragraph\n\tfunction paragraph(state, startLine, endLine) {\n\t    const terminatorRules = state.md.block.ruler.getRules('paragraph');\n\t    const oldParentType = state.parentType;\n\t    let nextLine = startLine + 1;\n\t    state.parentType = 'paragraph';\n\t    // jump line-by-line until empty one or EOF\n\t    for(; nextLine < endLine && !state.isEmpty(nextLine); nextLine++){\n\t        // this would be a code block normally, but after paragraph\n\t        // it's considered a lazy continuation regardless of what's there\n\t        if (state.sCount[nextLine] - state.blkIndent > 3) {\n\t            continue;\n\t        }\n\t        // quirk for blockquotes, this line should already be checked by that rule\n\t        if (state.sCount[nextLine] < 0) {\n\t            continue;\n\t        }\n\t        // Some tags can terminate paragraph without empty line.\n\t        let terminate = false;\n\t        for(let i = 0, l = terminatorRules.length; i < l; i++){\n\t            if (terminatorRules[i](state, nextLine, endLine, true)) {\n\t                terminate = true;\n\t                break;\n\t            }\n\t        }\n\t        if (terminate) {\n\t            break;\n\t        }\n\t    }\n\t    const content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n\t    state.line = nextLine;\n\t    const token_o = state.push('paragraph_open', 'p', 1);\n\t    token_o.map = [\n\t        startLine,\n\t        state.line\n\t    ];\n\t    const token_i = state.push('inline', '', 0);\n\t    token_i.content = content;\n\t    token_i.map = [\n\t        startLine,\n\t        state.line\n\t    ];\n\t    token_i.children = [];\n\t    state.push('paragraph_close', 'p', -1);\n\t    state.parentType = oldParentType;\n\t    return true;\n\t}\n\n\tconst _rules$1 = [\n\t    // First 2 params - rule name & source. Secondary array - list of rules,\n\t    // which can be terminated by this one.\n\t    [\n\t        'table',\n\t        table,\n\t        [\n\t            'paragraph',\n\t            'reference'\n\t        ]\n\t    ],\n\t    [\n\t        'code',\n\t        code\n\t    ],\n\t    [\n\t        'fence',\n\t        fence,\n\t        [\n\t            'paragraph',\n\t            'reference',\n\t            'blockquote',\n\t            'list'\n\t        ]\n\t    ],\n\t    [\n\t        'blockquote',\n\t        blockquote,\n\t        [\n\t            'paragraph',\n\t            'reference',\n\t            'blockquote',\n\t            'list'\n\t        ]\n\t    ],\n\t    [\n\t        'hr',\n\t        hr,\n\t        [\n\t            'paragraph',\n\t            'reference',\n\t            'blockquote',\n\t            'list'\n\t        ]\n\t    ],\n\t    [\n\t        'list',\n\t        list,\n\t        [\n\t            'paragraph',\n\t            'reference',\n\t            'blockquote'\n\t        ]\n\t    ],\n\t    [\n\t        'reference',\n\t        reference\n\t    ],\n\t    [\n\t        'html_block',\n\t        html_block,\n\t        [\n\t            'paragraph',\n\t            'reference',\n\t            'blockquote'\n\t        ]\n\t    ],\n\t    [\n\t        'heading',\n\t        heading,\n\t        [\n\t            'paragraph',\n\t            'reference',\n\t            'blockquote'\n\t        ]\n\t    ],\n\t    [\n\t        'lheading',\n\t        lheading\n\t    ],\n\t    [\n\t        'paragraph',\n\t        paragraph\n\t    ]\n\t];\n\t/**\n\t * new ParserBlock()\n\t **/ function ParserBlock() {\n\t    /**\n\t   * ParserBlock#ruler -> Ruler\n\t   *\n\t   * [[Ruler]] instance. Keep configuration of block rules.\n\t   **/ this.ruler = new Ruler();\n\t    for(let i = 0; i < _rules$1.length; i++){\n\t        this.ruler.push(_rules$1[i][0], _rules$1[i][1], {\n\t            alt: (_rules$1[i][2] || []).slice()\n\t        });\n\t    }\n\t}\n\t// Generate tokens for input range\n\t//\n\tParserBlock.prototype.tokenize = function(state, startLine, endLine) {\n\t    const rules = this.ruler.getRules('');\n\t    const len = rules.length;\n\t    const maxNesting = state.md.options.maxNesting;\n\t    let line = startLine;\n\t    let hasEmptyLines = false;\n\t    while(line < endLine){\n\t        state.line = line = state.skipEmptyLines(line);\n\t        if (line >= endLine) {\n\t            break;\n\t        }\n\t        // Termination condition for nested calls.\n\t        // Nested calls currently used for blockquotes & lists\n\t        if (state.sCount[line] < state.blkIndent) {\n\t            break;\n\t        }\n\t        // If nesting level exceeded - skip tail to the end. That's not ordinary\n\t        // situation and we should not care about content.\n\t        if (state.level >= maxNesting) {\n\t            state.line = endLine;\n\t            break;\n\t        }\n\t        // Try all possible rules.\n\t        // On success, rule should:\n\t        //\n\t        // - update `state.line`\n\t        // - update `state.tokens`\n\t        // - return true\n\t        const prevLine = state.line;\n\t        let ok = false;\n\t        for(let i = 0; i < len; i++){\n\t            ok = rules[i](state, line, endLine, false);\n\t            if (ok) {\n\t                if (prevLine >= state.line) {\n\t                    throw new Error(\"block rule didn't increment state.line\");\n\t                }\n\t                break;\n\t            }\n\t        }\n\t        // this can only happen if user disables paragraph rule\n\t        if (!ok) throw new Error('none of the block rules matched');\n\t        // set state.tight if we had an empty line before current tag\n\t        // i.e. latest empty line should not count\n\t        state.tight = !hasEmptyLines;\n\t        // paragraph might \"eat\" one newline after it in nested lists\n\t        if (state.isEmpty(state.line - 1)) {\n\t            hasEmptyLines = true;\n\t        }\n\t        line = state.line;\n\t        if (line < endLine && state.isEmpty(line)) {\n\t            hasEmptyLines = true;\n\t            line++;\n\t            state.line = line;\n\t        }\n\t    }\n\t};\n\t/**\n\t * ParserBlock.parse(str, md, env, outTokens)\n\t *\n\t * Process input string and push block tokens into `outTokens`\n\t **/ ParserBlock.prototype.parse = function(src, md, env, outTokens) {\n\t    if (!src) {\n\t        return;\n\t    }\n\t    const state = new this.State(src, md, env, outTokens);\n\t    this.tokenize(state, state.line, state.lineMax);\n\t};\n\tParserBlock.prototype.State = StateBlock;\n\n\t// Inline parser state\n\tfunction StateInline(src, md, env, outTokens) {\n\t    this.src = src;\n\t    this.env = env;\n\t    this.md = md;\n\t    this.tokens = outTokens;\n\t    this.tokens_meta = Array(outTokens.length);\n\t    this.pos = 0;\n\t    this.posMax = this.src.length;\n\t    this.level = 0;\n\t    this.pending = '';\n\t    this.pendingLevel = 0;\n\t    // Stores { start: end } pairs. Useful for backtrack\n\t    // optimization of pairs parse (emphasis, strikes).\n\t    this.cache = {};\n\t    // List of emphasis-like delimiters for current tag\n\t    this.delimiters = [];\n\t    // Stack of delimiter lists for upper level tags\n\t    this._prev_delimiters = [];\n\t    // backtick length => last seen position\n\t    this.backticks = {};\n\t    this.backticksScanned = false;\n\t    // Counter used to disable inline linkify-it execution\n\t    // inside <a> and markdown links\n\t    this.linkLevel = 0;\n\t}\n\t// Flush pending text\n\t//\n\tStateInline.prototype.pushPending = function() {\n\t    const token = new Token('text', '', 0);\n\t    token.content = this.pending;\n\t    token.level = this.pendingLevel;\n\t    this.tokens.push(token);\n\t    this.pending = '';\n\t    return token;\n\t};\n\t// Push new token to \"stream\".\n\t// If pending text exists - flush it as text token\n\t//\n\tStateInline.prototype.push = function(type, tag, nesting) {\n\t    if (this.pending) {\n\t        this.pushPending();\n\t    }\n\t    const token = new Token(type, tag, nesting);\n\t    let token_meta = null;\n\t    if (nesting < 0) {\n\t        // closing tag\n\t        this.level--;\n\t        this.delimiters = this._prev_delimiters.pop();\n\t    }\n\t    token.level = this.level;\n\t    if (nesting > 0) {\n\t        // opening tag\n\t        this.level++;\n\t        this._prev_delimiters.push(this.delimiters);\n\t        this.delimiters = [];\n\t        token_meta = {\n\t            delimiters: this.delimiters\n\t        };\n\t    }\n\t    this.pendingLevel = this.level;\n\t    this.tokens.push(token);\n\t    this.tokens_meta.push(token_meta);\n\t    return token;\n\t};\n\t// Scan a sequence of emphasis-like markers, and determine whether\n\t// it can start an emphasis sequence or end an emphasis sequence.\n\t//\n\t//  - start - position to scan from (it should point at a valid marker);\n\t//  - canSplitWord - determine if these markers can be found inside a word\n\t//\n\tStateInline.prototype.scanDelims = function(start, canSplitWord) {\n\t    const max = this.posMax;\n\t    const marker = this.src.charCodeAt(start);\n\t    // treat beginning of the line as a whitespace\n\t    const lastChar = start > 0 ? this.src.charCodeAt(start - 1) : 0x20;\n\t    let pos = start;\n\t    while(pos < max && this.src.charCodeAt(pos) === marker){\n\t        pos++;\n\t    }\n\t    const count = pos - start;\n\t    // treat end of the line as a whitespace\n\t    const nextChar = pos < max ? this.src.charCodeAt(pos) : 0x20;\n\t    const isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));\n\t    const isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));\n\t    const isLastWhiteSpace = isWhiteSpace(lastChar);\n\t    const isNextWhiteSpace = isWhiteSpace(nextChar);\n\t    const left_flanking = !isNextWhiteSpace && (!isNextPunctChar || isLastWhiteSpace || isLastPunctChar);\n\t    const right_flanking = !isLastWhiteSpace && (!isLastPunctChar || isNextWhiteSpace || isNextPunctChar);\n\t    const can_open = left_flanking && (canSplitWord || !right_flanking || isLastPunctChar);\n\t    const can_close = right_flanking && (canSplitWord || !left_flanking || isNextPunctChar);\n\t    return {\n\t        can_open,\n\t        can_close,\n\t        length: count\n\t    };\n\t};\n\t// re-export Token class to use in block rules\n\tStateInline.prototype.Token = Token;\n\n\t// Skip text characters for text token, place those to pending buffer\n\t// and increment current pos\n\t// Rule to skip pure text\n\t// '{}$%@~+=:' reserved for extentions\n\t// !, \", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \\, ], ^, _, `, {, |, }, or ~\n\t// !!!! Don't confuse with \"Markdown ASCII Punctuation\" chars\n\t// http://spec.commonmark.org/0.15/#ascii-punctuation-character\n\tfunction isTerminatorChar(ch) {\n\t    switch(ch){\n\t        case 0x0A /* \\n */ :\n\t        case 0x21 /* ! */ :\n\t        case 0x23 /* # */ :\n\t        case 0x24 /* $ */ :\n\t        case 0x25 /* % */ :\n\t        case 0x26 /* & */ :\n\t        case 0x2A /* * */ :\n\t        case 0x2B /* + */ :\n\t        case 0x2D /* - */ :\n\t        case 0x3A /* : */ :\n\t        case 0x3C /* < */ :\n\t        case 0x3D /* = */ :\n\t        case 0x3E /* > */ :\n\t        case 0x40 /* @ */ :\n\t        case 0x5B /* [ */ :\n\t        case 0x5C /* \\ */ :\n\t        case 0x5D /* ] */ :\n\t        case 0x5E /* ^ */ :\n\t        case 0x5F /* _ */ :\n\t        case 0x60 /* ` */ :\n\t        case 0x7B /* { */ :\n\t        case 0x7D /* } */ :\n\t        case 0x7E /* ~ */ :\n\t            return true;\n\t        default:\n\t            return false;\n\t    }\n\t}\n\tfunction text(state, silent) {\n\t    let pos = state.pos;\n\t    while(pos < state.posMax && !isTerminatorChar(state.src.charCodeAt(pos))){\n\t        pos++;\n\t    }\n\t    if (pos === state.pos) {\n\t        return false;\n\t    }\n\t    if (!silent) {\n\t        state.pending += state.src.slice(state.pos, pos);\n\t    }\n\t    state.pos = pos;\n\t    return true;\n\t} // Alternative implementation, for memory.\n\t //\n\t // It costs 10% of performance, but allows extend terminators list, if place it\n\t // to `ParserInline` property. Probably, will switch to it sometime, such\n\t // flexibility required.\n\t /*\n\tvar TERMINATOR_RE = /[\\n!#$%&*+\\-:<=>@[\\\\\\]^_`{}~]/;\n\n\tmodule.exports = function text(state, silent) {\n\t  var pos = state.pos,\n\t      idx = state.src.slice(pos).search(TERMINATOR_RE);\n\n\t  // first char is terminator -> empty text\n\t  if (idx === 0) { return false; }\n\n\t  // no terminator -> text till end of string\n\t  if (idx < 0) {\n\t    if (!silent) { state.pending += state.src.slice(pos); }\n\t    state.pos = state.src.length;\n\t    return true;\n\t  }\n\n\t  if (!silent) { state.pending += state.src.slice(pos, pos + idx); }\n\n\t  state.pos += idx;\n\n\t  return true;\n\t}; */\n\n\t// Process links like https://example.org/\n\t// RFC3986: scheme = ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\n\tconst SCHEME_RE = /(?:^|[^a-z0-9.+-])([a-z][a-z0-9.+-]*)$/i;\n\tfunction linkify(state, silent) {\n\t    if (!state.md.options.linkify) return false;\n\t    if (state.linkLevel > 0) return false;\n\t    const pos = state.pos;\n\t    const max = state.posMax;\n\t    if (pos + 3 > max) return false;\n\t    if (state.src.charCodeAt(pos) !== 0x3A /* : */ ) return false;\n\t    if (state.src.charCodeAt(pos + 1) !== 0x2F /* / */ ) return false;\n\t    if (state.src.charCodeAt(pos + 2) !== 0x2F /* / */ ) return false;\n\t    const match = state.pending.match(SCHEME_RE);\n\t    if (!match) return false;\n\t    const proto = match[1];\n\t    const link = state.md.linkify.matchAtStart(state.src.slice(pos - proto.length));\n\t    if (!link) return false;\n\t    let url = link.url;\n\t    // invalid link, but still detected by linkify somehow;\n\t    // need to check to prevent infinite loop below\n\t    if (url.length <= proto.length) return false;\n\t    // disallow '*' at the end of the link (conflicts with emphasis)\n\t    url = url.replace(/\\*+$/, '');\n\t    const fullUrl = state.md.normalizeLink(url);\n\t    if (!state.md.validateLink(fullUrl)) return false;\n\t    if (!silent) {\n\t        state.pending = state.pending.slice(0, -proto.length);\n\t        const token_o = state.push('link_open', 'a', 1);\n\t        token_o.attrs = [\n\t            [\n\t                'href',\n\t                fullUrl\n\t            ]\n\t        ];\n\t        token_o.markup = 'linkify';\n\t        token_o.info = 'auto';\n\t        const token_t = state.push('text', '', 0);\n\t        token_t.content = state.md.normalizeLinkText(url);\n\t        const token_c = state.push('link_close', 'a', -1);\n\t        token_c.markup = 'linkify';\n\t        token_c.info = 'auto';\n\t    }\n\t    state.pos += url.length - proto.length;\n\t    return true;\n\t}\n\n\t// Proceess '\\n'\n\tfunction newline(state, silent) {\n\t    let pos = state.pos;\n\t    if (state.src.charCodeAt(pos) !== 0x0A /* \\n */ ) {\n\t        return false;\n\t    }\n\t    const pmax = state.pending.length - 1;\n\t    const max = state.posMax;\n\t    // '  \\n' -> hardbreak\n\t    // Lookup in pending chars is bad practice! Don't copy to other rules!\n\t    // Pending string is stored in concat mode, indexed lookups will cause\n\t    // convertion to flat mode.\n\t    if (!silent) {\n\t        if (pmax >= 0 && state.pending.charCodeAt(pmax) === 0x20) {\n\t            if (pmax >= 1 && state.pending.charCodeAt(pmax - 1) === 0x20) {\n\t                // Find whitespaces tail of pending chars.\n\t                let ws = pmax - 1;\n\t                while(ws >= 1 && state.pending.charCodeAt(ws - 1) === 0x20)ws--;\n\t                state.pending = state.pending.slice(0, ws);\n\t                state.push('hardbreak', 'br', 0);\n\t            } else {\n\t                state.pending = state.pending.slice(0, -1);\n\t                state.push('softbreak', 'br', 0);\n\t            }\n\t        } else {\n\t            state.push('softbreak', 'br', 0);\n\t        }\n\t    }\n\t    pos++;\n\t    // skip heading spaces for next line\n\t    while(pos < max && isSpace(state.src.charCodeAt(pos))){\n\t        pos++;\n\t    }\n\t    state.pos = pos;\n\t    return true;\n\t}\n\n\t// Process escaped chars and hardbreaks\n\tconst ESCAPED = [];\n\tfor(let i = 0; i < 256; i++){\n\t    ESCAPED.push(0);\n\t}\n\t'\\\\!\"#$%&\\'()*+,./:;<=>?@[]^_`{|}~-'.split('').forEach(function(ch) {\n\t    ESCAPED[ch.charCodeAt(0)] = 1;\n\t});\n\tfunction escape(state, silent) {\n\t    let pos = state.pos;\n\t    const max = state.posMax;\n\t    if (state.src.charCodeAt(pos) !== 0x5C /* \\ */ ) return false;\n\t    pos++;\n\t    // '\\' at the end of the inline block\n\t    if (pos >= max) return false;\n\t    let ch1 = state.src.charCodeAt(pos);\n\t    if (ch1 === 0x0A) {\n\t        if (!silent) {\n\t            state.push('hardbreak', 'br', 0);\n\t        }\n\t        pos++;\n\t        // skip leading whitespaces from next line\n\t        while(pos < max){\n\t            ch1 = state.src.charCodeAt(pos);\n\t            if (!isSpace(ch1)) break;\n\t            pos++;\n\t        }\n\t        state.pos = pos;\n\t        return true;\n\t    }\n\t    let escapedStr = state.src[pos];\n\t    if (ch1 >= 0xD800 && ch1 <= 0xDBFF && pos + 1 < max) {\n\t        const ch2 = state.src.charCodeAt(pos + 1);\n\t        if (ch2 >= 0xDC00 && ch2 <= 0xDFFF) {\n\t            escapedStr += state.src[pos + 1];\n\t            pos++;\n\t        }\n\t    }\n\t    const origStr = '\\\\' + escapedStr;\n\t    if (!silent) {\n\t        const token = state.push('text_special', '', 0);\n\t        if (ch1 < 256 && ESCAPED[ch1] !== 0) {\n\t            token.content = escapedStr;\n\t        } else {\n\t            token.content = origStr;\n\t        }\n\t        token.markup = origStr;\n\t        token.info = 'escape';\n\t    }\n\t    state.pos = pos + 1;\n\t    return true;\n\t}\n\n\t// Parse backticks\n\tfunction backtick(state, silent) {\n\t    let pos = state.pos;\n\t    const ch = state.src.charCodeAt(pos);\n\t    if (ch !== 0x60 /* ` */ ) {\n\t        return false;\n\t    }\n\t    const start = pos;\n\t    pos++;\n\t    const max = state.posMax;\n\t    // scan marker length\n\t    while(pos < max && state.src.charCodeAt(pos) === 0x60 /* ` */ ){\n\t        pos++;\n\t    }\n\t    const marker = state.src.slice(start, pos);\n\t    const openerLength = marker.length;\n\t    if (state.backticksScanned && (state.backticks[openerLength] || 0) <= start) {\n\t        if (!silent) state.pending += marker;\n\t        state.pos += openerLength;\n\t        return true;\n\t    }\n\t    let matchEnd = pos;\n\t    let matchStart;\n\t    // Nothing found in the cache, scan until the end of the line (or until marker is found)\n\t    while((matchStart = state.src.indexOf('`', matchEnd)) !== -1){\n\t        matchEnd = matchStart + 1;\n\t        // scan marker length\n\t        while(matchEnd < max && state.src.charCodeAt(matchEnd) === 0x60 /* ` */ ){\n\t            matchEnd++;\n\t        }\n\t        const closerLength = matchEnd - matchStart;\n\t        if (closerLength === openerLength) {\n\t            // Found matching closer length.\n\t            if (!silent) {\n\t                const token = state.push('code_inline', 'code', 0);\n\t                token.markup = marker;\n\t                token.content = state.src.slice(pos, matchStart).replace(/\\n/g, ' ').replace(/^ (.+) $/, '$1');\n\t            }\n\t            state.pos = matchEnd;\n\t            return true;\n\t        }\n\t        // Some different length found, put it in cache as upper limit of where closer can be found\n\t        state.backticks[closerLength] = matchStart;\n\t    }\n\t    // Scanned through the end, didn't find anything\n\t    state.backticksScanned = true;\n\t    if (!silent) state.pending += marker;\n\t    state.pos += openerLength;\n\t    return true;\n\t}\n\n\t// ~~strike through~~\n\t//\n\t// Insert each marker as a separate text token, and add it to delimiter list\n\t//\n\tfunction strikethrough_tokenize(state, silent) {\n\t    const start = state.pos;\n\t    const marker = state.src.charCodeAt(start);\n\t    if (silent) {\n\t        return false;\n\t    }\n\t    if (marker !== 0x7E /* ~ */ ) {\n\t        return false;\n\t    }\n\t    const scanned = state.scanDelims(state.pos, true);\n\t    let len = scanned.length;\n\t    const ch = String.fromCharCode(marker);\n\t    if (len < 2) {\n\t        return false;\n\t    }\n\t    let token;\n\t    if (len % 2) {\n\t        token = state.push('text', '', 0);\n\t        token.content = ch;\n\t        len--;\n\t    }\n\t    for(let i = 0; i < len; i += 2){\n\t        token = state.push('text', '', 0);\n\t        token.content = ch + ch;\n\t        state.delimiters.push({\n\t            marker,\n\t            length: 0,\n\t            token: state.tokens.length - 1,\n\t            end: -1,\n\t            open: scanned.can_open,\n\t            close: scanned.can_close\n\t        });\n\t    }\n\t    state.pos += scanned.length;\n\t    return true;\n\t}\n\tfunction postProcess$1(state, delimiters) {\n\t    let token;\n\t    const loneMarkers = [];\n\t    const max = delimiters.length;\n\t    for(let i = 0; i < max; i++){\n\t        const startDelim = delimiters[i];\n\t        if (startDelim.marker !== 0x7E /* ~ */ ) {\n\t            continue;\n\t        }\n\t        if (startDelim.end === -1) {\n\t            continue;\n\t        }\n\t        const endDelim = delimiters[startDelim.end];\n\t        token = state.tokens[startDelim.token];\n\t        token.type = 's_open';\n\t        token.tag = 's';\n\t        token.nesting = 1;\n\t        token.markup = '~~';\n\t        token.content = '';\n\t        token = state.tokens[endDelim.token];\n\t        token.type = 's_close';\n\t        token.tag = 's';\n\t        token.nesting = -1;\n\t        token.markup = '~~';\n\t        token.content = '';\n\t        if (state.tokens[endDelim.token - 1].type === 'text' && state.tokens[endDelim.token - 1].content === '~') {\n\t            loneMarkers.push(endDelim.token - 1);\n\t        }\n\t    }\n\t    // If a marker sequence has an odd number of characters, it's splitted\n\t    // like this: `~~~~~` -> `~` + `~~` + `~~`, leaving one marker at the\n\t    // start of the sequence.\n\t    //\n\t    // So, we have to move all those markers after subsequent s_close tags.\n\t    //\n\t    while(loneMarkers.length){\n\t        const i = loneMarkers.pop();\n\t        let j = i + 1;\n\t        while(j < state.tokens.length && state.tokens[j].type === 's_close'){\n\t            j++;\n\t        }\n\t        j--;\n\t        if (i !== j) {\n\t            token = state.tokens[j];\n\t            state.tokens[j] = state.tokens[i];\n\t            state.tokens[i] = token;\n\t        }\n\t    }\n\t}\n\t// Walk through delimiter list and replace text tokens with tags\n\t//\n\tfunction strikethrough_postProcess(state) {\n\t    const tokens_meta = state.tokens_meta;\n\t    const max = state.tokens_meta.length;\n\t    postProcess$1(state, state.delimiters);\n\t    for(let curr = 0; curr < max; curr++){\n\t        if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n\t            postProcess$1(state, tokens_meta[curr].delimiters);\n\t        }\n\t    }\n\t}\n\tvar r_strikethrough = {\n\t    tokenize: strikethrough_tokenize,\n\t    postProcess: strikethrough_postProcess\n\t};\n\n\t// Process *this* and _that_\n\t//\n\t// Insert each marker as a separate text token, and add it to delimiter list\n\t//\n\tfunction emphasis_tokenize(state, silent) {\n\t    const start = state.pos;\n\t    const marker = state.src.charCodeAt(start);\n\t    if (silent) {\n\t        return false;\n\t    }\n\t    if (marker !== 0x5F /* _ */  && marker !== 0x2A /* * */ ) {\n\t        return false;\n\t    }\n\t    const scanned = state.scanDelims(state.pos, marker === 0x2A);\n\t    for(let i = 0; i < scanned.length; i++){\n\t        const token = state.push('text', '', 0);\n\t        token.content = String.fromCharCode(marker);\n\t        state.delimiters.push({\n\t            // Char code of the starting marker (number).\n\t            //\n\t            marker,\n\t            // Total length of these series of delimiters.\n\t            //\n\t            length: scanned.length,\n\t            // A position of the token this delimiter corresponds to.\n\t            //\n\t            token: state.tokens.length - 1,\n\t            // If this delimiter is matched as a valid opener, `end` will be\n\t            // equal to its position, otherwise it's `-1`.\n\t            //\n\t            end: -1,\n\t            // Boolean flags that determine if this delimiter could open or close\n\t            // an emphasis.\n\t            //\n\t            open: scanned.can_open,\n\t            close: scanned.can_close\n\t        });\n\t    }\n\t    state.pos += scanned.length;\n\t    return true;\n\t}\n\tfunction postProcess(state, delimiters) {\n\t    const max = delimiters.length;\n\t    for(let i = max - 1; i >= 0; i--){\n\t        const startDelim = delimiters[i];\n\t        if (startDelim.marker !== 0x5F /* _ */  && startDelim.marker !== 0x2A /* * */ ) {\n\t            continue;\n\t        }\n\t        // Process only opening markers\n\t        if (startDelim.end === -1) {\n\t            continue;\n\t        }\n\t        const endDelim = delimiters[startDelim.end];\n\t        // If the previous delimiter has the same marker and is adjacent to this one,\n\t        // merge those into one strong delimiter.\n\t        //\n\t        // `<em><em>whatever</em></em>` -> `<strong>whatever</strong>`\n\t        //\n\t        const isStrong = i > 0 && delimiters[i - 1].end === startDelim.end + 1 && // check that first two markers match and adjacent\n\t        delimiters[i - 1].marker === startDelim.marker && delimiters[i - 1].token === startDelim.token - 1 && // check that last two markers are adjacent (we can safely assume they match)\n\t        delimiters[startDelim.end + 1].token === endDelim.token + 1;\n\t        const ch = String.fromCharCode(startDelim.marker);\n\t        const token_o = state.tokens[startDelim.token];\n\t        token_o.type = isStrong ? 'strong_open' : 'em_open';\n\t        token_o.tag = isStrong ? 'strong' : 'em';\n\t        token_o.nesting = 1;\n\t        token_o.markup = isStrong ? ch + ch : ch;\n\t        token_o.content = '';\n\t        const token_c = state.tokens[endDelim.token];\n\t        token_c.type = isStrong ? 'strong_close' : 'em_close';\n\t        token_c.tag = isStrong ? 'strong' : 'em';\n\t        token_c.nesting = -1;\n\t        token_c.markup = isStrong ? ch + ch : ch;\n\t        token_c.content = '';\n\t        if (isStrong) {\n\t            state.tokens[delimiters[i - 1].token].content = '';\n\t            state.tokens[delimiters[startDelim.end + 1].token].content = '';\n\t            i--;\n\t        }\n\t    }\n\t}\n\t// Walk through delimiter list and replace text tokens with tags\n\t//\n\tfunction emphasis_post_process(state) {\n\t    const tokens_meta = state.tokens_meta;\n\t    const max = state.tokens_meta.length;\n\t    postProcess(state, state.delimiters);\n\t    for(let curr = 0; curr < max; curr++){\n\t        if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n\t            postProcess(state, tokens_meta[curr].delimiters);\n\t        }\n\t    }\n\t}\n\tvar r_emphasis = {\n\t    tokenize: emphasis_tokenize,\n\t    postProcess: emphasis_post_process\n\t};\n\n\t// Process [link](<to> \"stuff\")\n\tfunction link(state, silent) {\n\t    let code, label, res, ref;\n\t    let href = '';\n\t    let title = '';\n\t    let start = state.pos;\n\t    let parseReference = true;\n\t    if (state.src.charCodeAt(state.pos) !== 0x5B /* [ */ ) {\n\t        return false;\n\t    }\n\t    const oldPos = state.pos;\n\t    const max = state.posMax;\n\t    const labelStart = state.pos + 1;\n\t    const labelEnd = state.md.helpers.parseLinkLabel(state, state.pos, true);\n\t    // parser failed to find ']', so it's not a valid link\n\t    if (labelEnd < 0) {\n\t        return false;\n\t    }\n\t    let pos = labelEnd + 1;\n\t    if (pos < max && state.src.charCodeAt(pos) === 0x28 /* ( */ ) {\n\t        //\n\t        // Inline link\n\t        //\n\t        // might have found a valid shortcut link, disable reference parsing\n\t        parseReference = false;\n\t        // [link](  <href>  \"title\"  )\n\t        //        ^^ skipping these spaces\n\t        pos++;\n\t        for(; pos < max; pos++){\n\t            code = state.src.charCodeAt(pos);\n\t            if (!isSpace(code) && code !== 0x0A) {\n\t                break;\n\t            }\n\t        }\n\t        if (pos >= max) {\n\t            return false;\n\t        }\n\t        // [link](  <href>  \"title\"  )\n\t        //          ^^^^^^ parsing link destination\n\t        start = pos;\n\t        res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);\n\t        if (res.ok) {\n\t            href = state.md.normalizeLink(res.str);\n\t            if (state.md.validateLink(href)) {\n\t                pos = res.pos;\n\t            } else {\n\t                href = '';\n\t            }\n\t            // [link](  <href>  \"title\"  )\n\t            //                ^^ skipping these spaces\n\t            start = pos;\n\t            for(; pos < max; pos++){\n\t                code = state.src.charCodeAt(pos);\n\t                if (!isSpace(code) && code !== 0x0A) {\n\t                    break;\n\t                }\n\t            }\n\t            // [link](  <href>  \"title\"  )\n\t            //                  ^^^^^^^ parsing link title\n\t            res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);\n\t            if (pos < max && start !== pos && res.ok) {\n\t                title = res.str;\n\t                pos = res.pos;\n\t                // [link](  <href>  \"title\"  )\n\t                //                         ^^ skipping these spaces\n\t                for(; pos < max; pos++){\n\t                    code = state.src.charCodeAt(pos);\n\t                    if (!isSpace(code) && code !== 0x0A) {\n\t                        break;\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        if (pos >= max || state.src.charCodeAt(pos) !== 0x29 /* ) */ ) {\n\t            // parsing a valid shortcut link failed, fallback to reference\n\t            parseReference = true;\n\t        }\n\t        pos++;\n\t    }\n\t    if (parseReference) {\n\t        //\n\t        // Link reference\n\t        //\n\t        if (typeof state.env.references === 'undefined') {\n\t            return false;\n\t        }\n\t        if (pos < max && state.src.charCodeAt(pos) === 0x5B /* [ */ ) {\n\t            start = pos + 1;\n\t            pos = state.md.helpers.parseLinkLabel(state, pos);\n\t            if (pos >= 0) {\n\t                label = state.src.slice(start, pos++);\n\t            } else {\n\t                pos = labelEnd + 1;\n\t            }\n\t        } else {\n\t            pos = labelEnd + 1;\n\t        }\n\t        // covers label === '' and label === undefined\n\t        // (collapsed reference link and shortcut reference link respectively)\n\t        if (!label) {\n\t            label = state.src.slice(labelStart, labelEnd);\n\t        }\n\t        ref = state.env.references[normalizeReference(label)];\n\t        if (!ref) {\n\t            state.pos = oldPos;\n\t            return false;\n\t        }\n\t        href = ref.href;\n\t        title = ref.title;\n\t    }\n\t    //\n\t    // We found the end of the link, and know for a fact it's a valid link;\n\t    // so all that's left to do is to call tokenizer.\n\t    //\n\t    if (!silent) {\n\t        state.pos = labelStart;\n\t        state.posMax = labelEnd;\n\t        const token_o = state.push('link_open', 'a', 1);\n\t        const attrs = [\n\t            [\n\t                'href',\n\t                href\n\t            ]\n\t        ];\n\t        token_o.attrs = attrs;\n\t        if (title) {\n\t            attrs.push([\n\t                'title',\n\t                title\n\t            ]);\n\t        }\n\t        state.linkLevel++;\n\t        state.md.inline.tokenize(state);\n\t        state.linkLevel--;\n\t        state.push('link_close', 'a', -1);\n\t    }\n\t    state.pos = pos;\n\t    state.posMax = max;\n\t    return true;\n\t}\n\n\t// Process ![image](<src> \"title\")\n\tfunction image(state, silent) {\n\t    let code, content, label, pos, ref, res, title, start;\n\t    let href = '';\n\t    const oldPos = state.pos;\n\t    const max = state.posMax;\n\t    if (state.src.charCodeAt(state.pos) !== 0x21 /* ! */ ) {\n\t        return false;\n\t    }\n\t    if (state.src.charCodeAt(state.pos + 1) !== 0x5B /* [ */ ) {\n\t        return false;\n\t    }\n\t    const labelStart = state.pos + 2;\n\t    const labelEnd = state.md.helpers.parseLinkLabel(state, state.pos + 1, false);\n\t    // parser failed to find ']', so it's not a valid link\n\t    if (labelEnd < 0) {\n\t        return false;\n\t    }\n\t    pos = labelEnd + 1;\n\t    if (pos < max && state.src.charCodeAt(pos) === 0x28 /* ( */ ) {\n\t        //\n\t        // Inline link\n\t        //\n\t        // [link](  <href>  \"title\"  )\n\t        //        ^^ skipping these spaces\n\t        pos++;\n\t        for(; pos < max; pos++){\n\t            code = state.src.charCodeAt(pos);\n\t            if (!isSpace(code) && code !== 0x0A) {\n\t                break;\n\t            }\n\t        }\n\t        if (pos >= max) {\n\t            return false;\n\t        }\n\t        // [link](  <href>  \"title\"  )\n\t        //          ^^^^^^ parsing link destination\n\t        start = pos;\n\t        res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);\n\t        if (res.ok) {\n\t            href = state.md.normalizeLink(res.str);\n\t            if (state.md.validateLink(href)) {\n\t                pos = res.pos;\n\t            } else {\n\t                href = '';\n\t            }\n\t        }\n\t        // [link](  <href>  \"title\"  )\n\t        //                ^^ skipping these spaces\n\t        start = pos;\n\t        for(; pos < max; pos++){\n\t            code = state.src.charCodeAt(pos);\n\t            if (!isSpace(code) && code !== 0x0A) {\n\t                break;\n\t            }\n\t        }\n\t        // [link](  <href>  \"title\"  )\n\t        //                  ^^^^^^^ parsing link title\n\t        res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);\n\t        if (pos < max && start !== pos && res.ok) {\n\t            title = res.str;\n\t            pos = res.pos;\n\t            // [link](  <href>  \"title\"  )\n\t            //                         ^^ skipping these spaces\n\t            for(; pos < max; pos++){\n\t                code = state.src.charCodeAt(pos);\n\t                if (!isSpace(code) && code !== 0x0A) {\n\t                    break;\n\t                }\n\t            }\n\t        } else {\n\t            title = '';\n\t        }\n\t        if (pos >= max || state.src.charCodeAt(pos) !== 0x29 /* ) */ ) {\n\t            state.pos = oldPos;\n\t            return false;\n\t        }\n\t        pos++;\n\t    } else {\n\t        //\n\t        // Link reference\n\t        //\n\t        if (typeof state.env.references === 'undefined') {\n\t            return false;\n\t        }\n\t        if (pos < max && state.src.charCodeAt(pos) === 0x5B /* [ */ ) {\n\t            start = pos + 1;\n\t            pos = state.md.helpers.parseLinkLabel(state, pos);\n\t            if (pos >= 0) {\n\t                label = state.src.slice(start, pos++);\n\t            } else {\n\t                pos = labelEnd + 1;\n\t            }\n\t        } else {\n\t            pos = labelEnd + 1;\n\t        }\n\t        // covers label === '' and label === undefined\n\t        // (collapsed reference link and shortcut reference link respectively)\n\t        if (!label) {\n\t            label = state.src.slice(labelStart, labelEnd);\n\t        }\n\t        ref = state.env.references[normalizeReference(label)];\n\t        if (!ref) {\n\t            state.pos = oldPos;\n\t            return false;\n\t        }\n\t        href = ref.href;\n\t        title = ref.title;\n\t    }\n\t    //\n\t    // We found the end of the link, and know for a fact it's a valid link;\n\t    // so all that's left to do is to call tokenizer.\n\t    //\n\t    if (!silent) {\n\t        content = state.src.slice(labelStart, labelEnd);\n\t        const tokens = [];\n\t        state.md.inline.parse(content, state.md, state.env, tokens);\n\t        const token = state.push('image', 'img', 0);\n\t        const attrs = [\n\t            [\n\t                'src',\n\t                href\n\t            ],\n\t            [\n\t                'alt',\n\t                ''\n\t            ]\n\t        ];\n\t        token.attrs = attrs;\n\t        token.children = tokens;\n\t        token.content = content;\n\t        if (title) {\n\t            attrs.push([\n\t                'title',\n\t                title\n\t            ]);\n\t        }\n\t    }\n\t    state.pos = pos;\n\t    state.posMax = max;\n\t    return true;\n\t}\n\n\t// Process autolinks '<protocol:...>'\n\t/* eslint max-len:0 */ const EMAIL_RE = /^([a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)$/;\n\t/* eslint-disable-next-line no-control-regex */ const AUTOLINK_RE = /^([a-zA-Z][a-zA-Z0-9+.-]{1,31}):([^<>\\x00-\\x20]*)$/;\n\tfunction autolink(state, silent) {\n\t    let pos = state.pos;\n\t    if (state.src.charCodeAt(pos) !== 0x3C /* < */ ) {\n\t        return false;\n\t    }\n\t    const start = state.pos;\n\t    const max = state.posMax;\n\t    for(;;){\n\t        if (++pos >= max) return false;\n\t        const ch = state.src.charCodeAt(pos);\n\t        if (ch === 0x3C /* < */ ) return false;\n\t        if (ch === 0x3E /* > */ ) break;\n\t    }\n\t    const url = state.src.slice(start + 1, pos);\n\t    if (AUTOLINK_RE.test(url)) {\n\t        const fullUrl = state.md.normalizeLink(url);\n\t        if (!state.md.validateLink(fullUrl)) {\n\t            return false;\n\t        }\n\t        if (!silent) {\n\t            const token_o = state.push('link_open', 'a', 1);\n\t            token_o.attrs = [\n\t                [\n\t                    'href',\n\t                    fullUrl\n\t                ]\n\t            ];\n\t            token_o.markup = 'autolink';\n\t            token_o.info = 'auto';\n\t            const token_t = state.push('text', '', 0);\n\t            token_t.content = state.md.normalizeLinkText(url);\n\t            const token_c = state.push('link_close', 'a', -1);\n\t            token_c.markup = 'autolink';\n\t            token_c.info = 'auto';\n\t        }\n\t        state.pos += url.length + 2;\n\t        return true;\n\t    }\n\t    if (EMAIL_RE.test(url)) {\n\t        const fullUrl = state.md.normalizeLink('mailto:' + url);\n\t        if (!state.md.validateLink(fullUrl)) {\n\t            return false;\n\t        }\n\t        if (!silent) {\n\t            const token_o = state.push('link_open', 'a', 1);\n\t            token_o.attrs = [\n\t                [\n\t                    'href',\n\t                    fullUrl\n\t                ]\n\t            ];\n\t            token_o.markup = 'autolink';\n\t            token_o.info = 'auto';\n\t            const token_t = state.push('text', '', 0);\n\t            token_t.content = state.md.normalizeLinkText(url);\n\t            const token_c = state.push('link_close', 'a', -1);\n\t            token_c.markup = 'autolink';\n\t            token_c.info = 'auto';\n\t        }\n\t        state.pos += url.length + 2;\n\t        return true;\n\t    }\n\t    return false;\n\t}\n\n\t// Process html tags\n\tfunction isLinkOpen(str) {\n\t    return /^<a[>\\s]/i.test(str);\n\t}\n\tfunction isLinkClose(str) {\n\t    return /^<\\/a\\s*>/i.test(str);\n\t}\n\tfunction isLetter(ch) {\n\t    /* eslint no-bitwise:0 */ const lc = ch | 0x20 // to lower case\n\t    ;\n\t    return lc >= 0x61 /* a */  && lc <= 0x7a /* z */ ;\n\t}\n\tfunction html_inline(state, silent) {\n\t    if (!state.md.options.html) {\n\t        return false;\n\t    }\n\t    // Check start\n\t    const max = state.posMax;\n\t    const pos = state.pos;\n\t    if (state.src.charCodeAt(pos) !== 0x3C /* < */  || pos + 2 >= max) {\n\t        return false;\n\t    }\n\t    // Quick fail on second char\n\t    const ch = state.src.charCodeAt(pos + 1);\n\t    if (ch !== 0x21 /* ! */  && ch !== 0x3F /* ? */  && ch !== 0x2F /* / */  && !isLetter(ch)) {\n\t        return false;\n\t    }\n\t    const match = state.src.slice(pos).match(HTML_TAG_RE);\n\t    if (!match) {\n\t        return false;\n\t    }\n\t    if (!silent) {\n\t        const token = state.push('html_inline', '', 0);\n\t        token.content = match[0];\n\t        if (isLinkOpen(token.content)) state.linkLevel++;\n\t        if (isLinkClose(token.content)) state.linkLevel--;\n\t    }\n\t    state.pos += match[0].length;\n\t    return true;\n\t}\n\n\t// Process html entity - &#123;, &#xAF;, &quot;, ...\n\tconst DIGITAL_RE = /^&#((?:x[a-f0-9]{1,6}|[0-9]{1,7}));/i;\n\tconst NAMED_RE = /^&([a-z][a-z0-9]{1,31});/i;\n\tfunction entity(state, silent) {\n\t    const pos = state.pos;\n\t    const max = state.posMax;\n\t    if (state.src.charCodeAt(pos) !== 0x26 /* & */ ) return false;\n\t    if (pos + 1 >= max) return false;\n\t    const ch = state.src.charCodeAt(pos + 1);\n\t    if (ch === 0x23 /* # */ ) {\n\t        const match = state.src.slice(pos).match(DIGITAL_RE);\n\t        if (match) {\n\t            if (!silent) {\n\t                const code = match[1][0].toLowerCase() === 'x' ? parseInt(match[1].slice(1), 16) : parseInt(match[1], 10);\n\t                const token = state.push('text_special', '', 0);\n\t                token.content = isValidEntityCode(code) ? fromCodePoint(code) : fromCodePoint(0xFFFD);\n\t                token.markup = match[0];\n\t                token.info = 'entity';\n\t            }\n\t            state.pos += match[0].length;\n\t            return true;\n\t        }\n\t    } else {\n\t        const match = state.src.slice(pos).match(NAMED_RE);\n\t        if (match) {\n\t            const decoded = decodeHTML(match[0]);\n\t            if (decoded !== match[0]) {\n\t                if (!silent) {\n\t                    const token = state.push('text_special', '', 0);\n\t                    token.content = decoded;\n\t                    token.markup = match[0];\n\t                    token.info = 'entity';\n\t                }\n\t                state.pos += match[0].length;\n\t                return true;\n\t            }\n\t        }\n\t    }\n\t    return false;\n\t}\n\n\t// For each opening emphasis-like marker find a matching closing one\n\t//\n\tfunction processDelimiters(delimiters) {\n\t    const openersBottom = {};\n\t    const max = delimiters.length;\n\t    if (!max) return;\n\t    // headerIdx is the first delimiter of the current (where closer is) delimiter run\n\t    let headerIdx = 0;\n\t    let lastTokenIdx = -2 // needs any value lower than -1\n\t    ;\n\t    const jumps = [];\n\t    for(let closerIdx = 0; closerIdx < max; closerIdx++){\n\t        const closer = delimiters[closerIdx];\n\t        jumps.push(0);\n\t        // markers belong to same delimiter run if:\n\t        //  - they have adjacent tokens\n\t        //  - AND markers are the same\n\t        //\n\t        if (delimiters[headerIdx].marker !== closer.marker || lastTokenIdx !== closer.token - 1) {\n\t            headerIdx = closerIdx;\n\t        }\n\t        lastTokenIdx = closer.token;\n\t        // Length is only used for emphasis-specific \"rule of 3\",\n\t        // if it's not defined (in strikethrough or 3rd party plugins),\n\t        // we can default it to 0 to disable those checks.\n\t        //\n\t        closer.length = closer.length || 0;\n\t        if (!closer.close) continue;\n\t        // Previously calculated lower bounds (previous fails)\n\t        // for each marker, each delimiter length modulo 3,\n\t        // and for whether this closer can be an opener;\n\t        // https://github.com/commonmark/cmark/commit/34250e12ccebdc6372b8b49c44fab57c72443460\n\t        /* eslint-disable-next-line no-prototype-builtins */ if (!openersBottom.hasOwnProperty(closer.marker)) {\n\t            openersBottom[closer.marker] = [\n\t                -1,\n\t                -1,\n\t                -1,\n\t                -1,\n\t                -1,\n\t                -1\n\t            ];\n\t        }\n\t        const minOpenerIdx = openersBottom[closer.marker][(closer.open ? 3 : 0) + closer.length % 3];\n\t        let openerIdx = headerIdx - jumps[headerIdx] - 1;\n\t        let newMinOpenerIdx = openerIdx;\n\t        for(; openerIdx > minOpenerIdx; openerIdx -= jumps[openerIdx] + 1){\n\t            const opener = delimiters[openerIdx];\n\t            if (opener.marker !== closer.marker) continue;\n\t            if (opener.open && opener.end < 0) {\n\t                let isOddMatch = false;\n\t                // from spec:\n\t                //\n\t                // If one of the delimiters can both open and close emphasis, then the\n\t                // sum of the lengths of the delimiter runs containing the opening and\n\t                // closing delimiters must not be a multiple of 3 unless both lengths\n\t                // are multiples of 3.\n\t                //\n\t                if (opener.close || closer.open) {\n\t                    if ((opener.length + closer.length) % 3 === 0) {\n\t                        if (opener.length % 3 !== 0 || closer.length % 3 !== 0) {\n\t                            isOddMatch = true;\n\t                        }\n\t                    }\n\t                }\n\t                if (!isOddMatch) {\n\t                    // If previous delimiter cannot be an opener, we can safely skip\n\t                    // the entire sequence in future checks. This is required to make\n\t                    // sure algorithm has linear complexity (see *_*_*_*_*_... case).\n\t                    //\n\t                    const lastJump = openerIdx > 0 && !delimiters[openerIdx - 1].open ? jumps[openerIdx - 1] + 1 : 0;\n\t                    jumps[closerIdx] = closerIdx - openerIdx + lastJump;\n\t                    jumps[openerIdx] = lastJump;\n\t                    closer.open = false;\n\t                    opener.end = closerIdx;\n\t                    opener.close = false;\n\t                    newMinOpenerIdx = -1;\n\t                    // treat next token as start of run,\n\t                    // it optimizes skips in **<...>**a**<...>** pathological case\n\t                    lastTokenIdx = -2;\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t        if (newMinOpenerIdx !== -1) {\n\t            // If match for this delimiter run failed, we want to set lower bound for\n\t            // future lookups. This is required to make sure algorithm has linear\n\t            // complexity.\n\t            //\n\t            // See details here:\n\t            // https://github.com/commonmark/cmark/issues/178#issuecomment-270417442\n\t            //\n\t            openersBottom[closer.marker][(closer.open ? 3 : 0) + (closer.length || 0) % 3] = newMinOpenerIdx;\n\t        }\n\t    }\n\t}\n\tfunction link_pairs(state) {\n\t    const tokens_meta = state.tokens_meta;\n\t    const max = state.tokens_meta.length;\n\t    processDelimiters(state.delimiters);\n\t    for(let curr = 0; curr < max; curr++){\n\t        if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n\t            processDelimiters(tokens_meta[curr].delimiters);\n\t        }\n\t    }\n\t}\n\n\t// Clean up tokens after emphasis and strikethrough postprocessing:\n\t// merge adjacent text nodes into one and re-calculate all token levels\n\t//\n\t// This is necessary because initially emphasis delimiter markers (*, _, ~)\n\t// are treated as their own separate text tokens. Then emphasis rule either\n\t// leaves them as text (needed to merge with adjacent text) or turns them\n\t// into opening/closing tags (which messes up levels inside).\n\t//\n\tfunction fragments_join(state) {\n\t    let curr, last;\n\t    let level = 0;\n\t    const tokens = state.tokens;\n\t    const max = state.tokens.length;\n\t    for(curr = last = 0; curr < max; curr++){\n\t        // re-calculate levels after emphasis/strikethrough turns some text nodes\n\t        // into opening/closing tags\n\t        if (tokens[curr].nesting < 0) level-- // closing tag\n\t        ;\n\t        tokens[curr].level = level;\n\t        if (tokens[curr].nesting > 0) level++ // opening tag\n\t        ;\n\t        if (tokens[curr].type === 'text' && curr + 1 < max && tokens[curr + 1].type === 'text') {\n\t            // collapse two adjacent text nodes\n\t            tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content;\n\t        } else {\n\t            if (curr !== last) {\n\t                tokens[last] = tokens[curr];\n\t            }\n\t            last++;\n\t        }\n\t    }\n\t    if (curr !== last) {\n\t        tokens.length = last;\n\t    }\n\t}\n\n\t// Parser rules\n\tconst _rules = [\n\t    [\n\t        'text',\n\t        text\n\t    ],\n\t    [\n\t        'linkify',\n\t        linkify\n\t    ],\n\t    [\n\t        'newline',\n\t        newline\n\t    ],\n\t    [\n\t        'escape',\n\t        escape\n\t    ],\n\t    [\n\t        'backticks',\n\t        backtick\n\t    ],\n\t    [\n\t        'strikethrough',\n\t        r_strikethrough.tokenize\n\t    ],\n\t    [\n\t        'emphasis',\n\t        r_emphasis.tokenize\n\t    ],\n\t    [\n\t        'link',\n\t        link\n\t    ],\n\t    [\n\t        'image',\n\t        image\n\t    ],\n\t    [\n\t        'autolink',\n\t        autolink\n\t    ],\n\t    [\n\t        'html_inline',\n\t        html_inline\n\t    ],\n\t    [\n\t        'entity',\n\t        entity\n\t    ]\n\t];\n\t// `rule2` ruleset was created specifically for emphasis/strikethrough\n\t// post-processing and may be changed in the future.\n\t//\n\t// Don't use this for anything except pairs (plugins working with `balance_pairs`).\n\t//\n\tconst _rules2 = [\n\t    [\n\t        'balance_pairs',\n\t        link_pairs\n\t    ],\n\t    [\n\t        'strikethrough',\n\t        r_strikethrough.postProcess\n\t    ],\n\t    [\n\t        'emphasis',\n\t        r_emphasis.postProcess\n\t    ],\n\t    // rules for pairs separate '**' into its own text tokens, which may be left unused,\n\t    // rule below merges unused segments back with the rest of the text\n\t    [\n\t        'fragments_join',\n\t        fragments_join\n\t    ]\n\t];\n\t/**\n\t * new ParserInline()\n\t **/ function ParserInline() {\n\t    /**\n\t   * ParserInline#ruler -> Ruler\n\t   *\n\t   * [[Ruler]] instance. Keep configuration of inline rules.\n\t   **/ this.ruler = new Ruler();\n\t    for(let i = 0; i < _rules.length; i++){\n\t        this.ruler.push(_rules[i][0], _rules[i][1]);\n\t    }\n\t    /**\n\t   * ParserInline#ruler2 -> Ruler\n\t   *\n\t   * [[Ruler]] instance. Second ruler used for post-processing\n\t   * (e.g. in emphasis-like rules).\n\t   **/ this.ruler2 = new Ruler();\n\t    for(let i = 0; i < _rules2.length; i++){\n\t        this.ruler2.push(_rules2[i][0], _rules2[i][1]);\n\t    }\n\t}\n\t// Skip single token by running all rules in validation mode;\n\t// returns `true` if any rule reported success\n\t//\n\tParserInline.prototype.skipToken = function(state) {\n\t    const pos = state.pos;\n\t    const rules = this.ruler.getRules('');\n\t    const len = rules.length;\n\t    const maxNesting = state.md.options.maxNesting;\n\t    const cache = state.cache;\n\t    if (typeof cache[pos] !== 'undefined') {\n\t        state.pos = cache[pos];\n\t        return;\n\t    }\n\t    let ok = false;\n\t    if (state.level < maxNesting) {\n\t        for(let i = 0; i < len; i++){\n\t            // Increment state.level and decrement it later to limit recursion.\n\t            // It's harmless to do here, because no tokens are created. But ideally,\n\t            // we'd need a separate private state variable for this purpose.\n\t            //\n\t            state.level++;\n\t            ok = rules[i](state, true);\n\t            state.level--;\n\t            if (ok) {\n\t                if (pos >= state.pos) {\n\t                    throw new Error(\"inline rule didn't increment state.pos\");\n\t                }\n\t                break;\n\t            }\n\t        }\n\t    } else {\n\t        // Too much nesting, just skip until the end of the paragraph.\n\t        //\n\t        // NOTE: this will cause links to behave incorrectly in the following case,\n\t        //       when an amount of `[` is exactly equal to `maxNesting + 1`:\n\t        //\n\t        //       [[[[[[[[[[[[[[[[[[[[[foo]()\n\t        //\n\t        // TODO: remove this workaround when CM standard will allow nested links\n\t        //       (we can replace it by preventing links from being parsed in\n\t        //       validation mode)\n\t        //\n\t        state.pos = state.posMax;\n\t    }\n\t    if (!ok) {\n\t        state.pos++;\n\t    }\n\t    cache[pos] = state.pos;\n\t};\n\t// Generate tokens for input range\n\t//\n\tParserInline.prototype.tokenize = function(state) {\n\t    const rules = this.ruler.getRules('');\n\t    const len = rules.length;\n\t    const end = state.posMax;\n\t    const maxNesting = state.md.options.maxNesting;\n\t    while(state.pos < end){\n\t        // Try all possible rules.\n\t        // On success, rule should:\n\t        //\n\t        // - update `state.pos`\n\t        // - update `state.tokens`\n\t        // - return true\n\t        const prevPos = state.pos;\n\t        let ok = false;\n\t        if (state.level < maxNesting) {\n\t            for(let i = 0; i < len; i++){\n\t                ok = rules[i](state, false);\n\t                if (ok) {\n\t                    if (prevPos >= state.pos) {\n\t                        throw new Error(\"inline rule didn't increment state.pos\");\n\t                    }\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t        if (ok) {\n\t            if (state.pos >= end) {\n\t                break;\n\t            }\n\t            continue;\n\t        }\n\t        state.pending += state.src[state.pos++];\n\t    }\n\t    if (state.pending) {\n\t        state.pushPending();\n\t    }\n\t};\n\t/**\n\t * ParserInline.parse(str, md, env, outTokens)\n\t *\n\t * Process input string and push inline tokens into `outTokens`\n\t **/ ParserInline.prototype.parse = function(str, md, env, outTokens) {\n\t    const state = new this.State(str, md, env, outTokens);\n\t    this.tokenize(state);\n\t    const rules = this.ruler2.getRules('');\n\t    const len = rules.length;\n\t    for(let i = 0; i < len; i++){\n\t        rules[i](state);\n\t    }\n\t};\n\tParserInline.prototype.State = StateInline;\n\n\tfunction reFactory(opts) {\n\t    const re = {};\n\t    opts = opts || {};\n\t    re.src_Any = Any.source;\n\t    re.src_Cc = Cc.source;\n\t    re.src_Z = Z.source;\n\t    re.src_P = P.source;\n\t    // \\p{\\Z\\P\\Cc\\CF} (white spaces + control + format + punctuation)\n\t    re.src_ZPCc = [\n\t        re.src_Z,\n\t        re.src_P,\n\t        re.src_Cc\n\t    ].join('|');\n\t    // \\p{\\Z\\Cc} (white spaces + control)\n\t    re.src_ZCc = [\n\t        re.src_Z,\n\t        re.src_Cc\n\t    ].join('|');\n\t    // Experimental. List of chars, completely prohibited in links\n\t    // because can separate it from other part of text\n\t    const text_separators = '[><\\uff5c]';\n\t    // All possible word characters (everything without punctuation, spaces & controls)\n\t    // Defined via punctuation & spaces to save space\n\t    // Should be something like \\p{\\L\\N\\S\\M} (\\w but without `_`)\n\t    re.src_pseudo_letter = '(?:(?!' + text_separators + '|' + re.src_ZPCc + ')' + re.src_Any + ')';\n\t    // The same as abothe but without [0-9]\n\t    // var src_pseudo_letter_non_d = '(?:(?![0-9]|' + src_ZPCc + ')' + src_Any + ')';\n\t    re.src_ip4 = '(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)';\n\t    // Prohibit any of \"@/[]()\" in user/pass to avoid wrong domain fetch.\n\t    re.src_auth = '(?:(?:(?!' + re.src_ZCc + '|[@/\\\\[\\\\]()]).)+@)?';\n\t    re.src_port = '(?::(?:6(?:[0-4]\\\\d{3}|5(?:[0-4]\\\\d{2}|5(?:[0-2]\\\\d|3[0-5])))|[1-5]?\\\\d{1,4}))?';\n\t    re.src_host_terminator = '(?=$|' + text_separators + '|' + re.src_ZPCc + ')' + '(?!' + (opts['---'] ? '-(?!--)|' : '-|') + '_|:\\\\d|\\\\.-|\\\\.(?!$|' + re.src_ZPCc + '))';\n\t    re.src_path = '(?:' + '[/?#]' + '(?:' + '(?!' + re.src_ZCc + '|' + text_separators + '|[()[\\\\]{}.,\"\\'?!\\\\-;]).|' + '\\\\[(?:(?!' + re.src_ZCc + '|\\\\]).)*\\\\]|' + '\\\\((?:(?!' + re.src_ZCc + '|[)]).)*\\\\)|' + '\\\\{(?:(?!' + re.src_ZCc + '|[}]).)*\\\\}|' + '\\\\\"(?:(?!' + re.src_ZCc + '|[\"]).)+\\\\\"|' + \"\\\\'(?:(?!\" + re.src_ZCc + \"|[']).)+\\\\'|\" + // allow `I'm_king` if no pair found\n\t    \"\\\\'(?=\" + re.src_pseudo_letter + '|[-])|' + // google has many dots in \"google search\" links (#66, #81).\n\t    // github has ... in commit range links,\n\t    // Restrict to\n\t    // - english\n\t    // - percent-encoded\n\t    // - parts of file path\n\t    // - params separator\n\t    // until more examples found.\n\t    '\\\\.{2,}[a-zA-Z0-9%/&]|' + '\\\\.(?!' + re.src_ZCc + '|[.]|$)|' + (opts['---'] ? '\\\\-(?!--(?:[^-]|$))(?:-*)|' // `---` => long dash, terminate\n\t     : '\\\\-+|') + // allow `,,,` in paths\n\t    ',(?!' + re.src_ZCc + '|$)|' + // allow `;` if not followed by space-like char\n\t    ';(?!' + re.src_ZCc + '|$)|' + // allow `!!!` in paths, but not at the end\n\t    '\\\\!+(?!' + re.src_ZCc + '|[!]|$)|' + '\\\\?(?!' + re.src_ZCc + '|[?]|$)' + ')+' + '|\\\\/' + ')?';\n\t    // Allow anything in markdown spec, forbid quote (\") at the first position\n\t    // because emails enclosed in quotes are far more common\n\t    re.src_email_name = '[\\\\-;:&=\\\\+\\\\$,\\\\.a-zA-Z0-9_][\\\\-;:&=\\\\+\\\\$,\\\\\"\\\\.a-zA-Z0-9_]*';\n\t    re.src_xn = 'xn--[a-z0-9\\\\-]{1,59}';\n\t    // More to read about domain names\n\t    // http://serverfault.com/questions/638260/\n\t    re.src_domain_root = // Allow letters & digits (http://test1)\n\t    '(?:' + re.src_xn + '|' + re.src_pseudo_letter + '{1,63}' + ')';\n\t    re.src_domain = '(?:' + re.src_xn + '|' + '(?:' + re.src_pseudo_letter + ')' + '|' + '(?:' + re.src_pseudo_letter + '(?:-|' + re.src_pseudo_letter + '){0,61}' + re.src_pseudo_letter + ')' + ')';\n\t    re.src_host = '(?:' + // Don't need IP check, because digits are already allowed in normal domain names\n\t    //   src_ip4 +\n\t    // '|' +\n\t    '(?:(?:(?:' + re.src_domain + ')\\\\.)*' + re.src_domain /* _root */  + ')' + ')';\n\t    re.tpl_host_fuzzy = '(?:' + re.src_ip4 + '|' + '(?:(?:(?:' + re.src_domain + ')\\\\.)+(?:%TLDS%))' + ')';\n\t    re.tpl_host_no_ip_fuzzy = '(?:(?:(?:' + re.src_domain + ')\\\\.)+(?:%TLDS%))';\n\t    re.src_host_strict = re.src_host + re.src_host_terminator;\n\t    re.tpl_host_fuzzy_strict = re.tpl_host_fuzzy + re.src_host_terminator;\n\t    re.src_host_port_strict = re.src_host + re.src_port + re.src_host_terminator;\n\t    re.tpl_host_port_fuzzy_strict = re.tpl_host_fuzzy + re.src_port + re.src_host_terminator;\n\t    re.tpl_host_port_no_ip_fuzzy_strict = re.tpl_host_no_ip_fuzzy + re.src_port + re.src_host_terminator;\n\t    //\n\t    // Main rules\n\t    //\n\t    // Rude test fuzzy links by host, for quick deny\n\t    re.tpl_host_fuzzy_test = 'localhost|www\\\\.|\\\\.\\\\d{1,3}\\\\.|(?:\\\\.(?:%TLDS%)(?:' + re.src_ZPCc + '|>|$))';\n\t    re.tpl_email_fuzzy = '(^|' + text_separators + '|\"|\\\\(|' + re.src_ZCc + ')' + '(' + re.src_email_name + '@' + re.tpl_host_fuzzy_strict + ')';\n\t    re.tpl_link_fuzzy = // Fuzzy link can't be prepended with .:/\\- and non punctuation.\n\t    // but can start with > (markdown blockquote)\n\t    '(^|(?![.:/\\\\-_@])(?:[$+<=>^`|\\uff5c]|' + re.src_ZPCc + '))' + '((?![$+<=>^`|\\uff5c])' + re.tpl_host_port_fuzzy_strict + re.src_path + ')';\n\t    re.tpl_link_no_ip_fuzzy = // Fuzzy link can't be prepended with .:/\\- and non punctuation.\n\t    // but can start with > (markdown blockquote)\n\t    '(^|(?![.:/\\\\-_@])(?:[$+<=>^`|\\uff5c]|' + re.src_ZPCc + '))' + '((?![$+<=>^`|\\uff5c])' + re.tpl_host_port_no_ip_fuzzy_strict + re.src_path + ')';\n\t    return re;\n\t}\n\n\t//\n\t// Helpers\n\t//\n\t// Merge objects\n\t//\n\tfunction assign(obj /* from1, from2, from3, ... */ ) {\n\t    const sources = Array.prototype.slice.call(arguments, 1);\n\t    sources.forEach(function(source) {\n\t        if (!source) {\n\t            return;\n\t        }\n\t        Object.keys(source).forEach(function(key) {\n\t            obj[key] = source[key];\n\t        });\n\t    });\n\t    return obj;\n\t}\n\tfunction _class(obj) {\n\t    return Object.prototype.toString.call(obj);\n\t}\n\tfunction isString(obj) {\n\t    return _class(obj) === '[object String]';\n\t}\n\tfunction isObject(obj) {\n\t    return _class(obj) === '[object Object]';\n\t}\n\tfunction isRegExp(obj) {\n\t    return _class(obj) === '[object RegExp]';\n\t}\n\tfunction isFunction(obj) {\n\t    return _class(obj) === '[object Function]';\n\t}\n\tfunction escapeRE(str) {\n\t    return str.replace(/[.?*+^$[\\]\\\\(){}|-]/g, '\\\\$&');\n\t}\n\t//\n\tconst defaultOptions = {\n\t    fuzzyLink: true,\n\t    fuzzyEmail: true,\n\t    fuzzyIP: false\n\t};\n\tfunction isOptionsObj(obj) {\n\t    return Object.keys(obj || {}).reduce(function(acc, k) {\n\t        /* eslint-disable-next-line no-prototype-builtins */ return acc || defaultOptions.hasOwnProperty(k);\n\t    }, false);\n\t}\n\tconst defaultSchemas = {\n\t    'http:': {\n\t        validate: function(text, pos, self) {\n\t            const tail = text.slice(pos);\n\t            if (!self.re.http) {\n\t                // compile lazily, because \"host\"-containing variables can change on tlds update.\n\t                self.re.http = new RegExp('^\\\\/\\\\/' + self.re.src_auth + self.re.src_host_port_strict + self.re.src_path, 'i');\n\t            }\n\t            if (self.re.http.test(tail)) {\n\t                return tail.match(self.re.http)[0].length;\n\t            }\n\t            return 0;\n\t        }\n\t    },\n\t    'https:': 'http:',\n\t    'ftp:': 'http:',\n\t    '//': {\n\t        validate: function(text, pos, self) {\n\t            const tail = text.slice(pos);\n\t            if (!self.re.no_http) {\n\t                // compile lazily, because \"host\"-containing variables can change on tlds update.\n\t                self.re.no_http = new RegExp('^' + self.re.src_auth + // Don't allow single-level domains, because of false positives like '//test'\n\t                // with code comments\n\t                '(?:localhost|(?:(?:' + self.re.src_domain + ')\\\\.)+' + self.re.src_domain_root + ')' + self.re.src_port + self.re.src_host_terminator + self.re.src_path, 'i');\n\t            }\n\t            if (self.re.no_http.test(tail)) {\n\t                // should not be `://` & `///`, that protects from errors in protocol name\n\t                if (pos >= 3 && text[pos - 3] === ':') {\n\t                    return 0;\n\t                }\n\t                if (pos >= 3 && text[pos - 3] === '/') {\n\t                    return 0;\n\t                }\n\t                return tail.match(self.re.no_http)[0].length;\n\t            }\n\t            return 0;\n\t        }\n\t    },\n\t    'mailto:': {\n\t        validate: function(text, pos, self) {\n\t            const tail = text.slice(pos);\n\t            if (!self.re.mailto) {\n\t                self.re.mailto = new RegExp('^' + self.re.src_email_name + '@' + self.re.src_host_strict, 'i');\n\t            }\n\t            if (self.re.mailto.test(tail)) {\n\t                return tail.match(self.re.mailto)[0].length;\n\t            }\n\t            return 0;\n\t        }\n\t    }\n\t};\n\t// RE pattern for 2-character tlds (autogenerated by ./support/tlds_2char_gen.js)\n\t/* eslint-disable-next-line max-len */ const tlds_2ch_src_re = 'a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]';\n\t// DON'T try to make PRs with changes. Extend TLDs with LinkifyIt.tlds() instead\n\tconst tlds_default = 'biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф'.split('|');\n\tfunction resetScanCache(self) {\n\t    self.__index__ = -1;\n\t    self.__text_cache__ = '';\n\t}\n\tfunction createValidator(re) {\n\t    return function(text, pos) {\n\t        const tail = text.slice(pos);\n\t        if (re.test(tail)) {\n\t            return tail.match(re)[0].length;\n\t        }\n\t        return 0;\n\t    };\n\t}\n\tfunction createNormalizer() {\n\t    return function(match, self) {\n\t        self.normalize(match);\n\t    };\n\t}\n\t// Schemas compiler. Build regexps.\n\t//\n\tfunction compile(self) {\n\t    // Load & clone RE patterns.\n\t    const re = self.re = reFactory(self.__opts__);\n\t    // Define dynamic patterns\n\t    const tlds = self.__tlds__.slice();\n\t    self.onCompile();\n\t    if (!self.__tlds_replaced__) {\n\t        tlds.push(tlds_2ch_src_re);\n\t    }\n\t    tlds.push(re.src_xn);\n\t    re.src_tlds = tlds.join('|');\n\t    function untpl(tpl) {\n\t        return tpl.replace('%TLDS%', re.src_tlds);\n\t    }\n\t    re.email_fuzzy = RegExp(untpl(re.tpl_email_fuzzy), 'i');\n\t    re.link_fuzzy = RegExp(untpl(re.tpl_link_fuzzy), 'i');\n\t    re.link_no_ip_fuzzy = RegExp(untpl(re.tpl_link_no_ip_fuzzy), 'i');\n\t    re.host_fuzzy_test = RegExp(untpl(re.tpl_host_fuzzy_test), 'i');\n\t    //\n\t    // Compile each schema\n\t    //\n\t    const aliases = [];\n\t    self.__compiled__ = {} // Reset compiled data\n\t    ;\n\t    function schemaError(name, val) {\n\t        throw new Error('(LinkifyIt) Invalid schema \"' + name + '\": ' + val);\n\t    }\n\t    Object.keys(self.__schemas__).forEach(function(name) {\n\t        const val = self.__schemas__[name];\n\t        // skip disabled methods\n\t        if (val === null) {\n\t            return;\n\t        }\n\t        const compiled = {\n\t            validate: null,\n\t            link: null\n\t        };\n\t        self.__compiled__[name] = compiled;\n\t        if (isObject(val)) {\n\t            if (isRegExp(val.validate)) {\n\t                compiled.validate = createValidator(val.validate);\n\t            } else if (isFunction(val.validate)) {\n\t                compiled.validate = val.validate;\n\t            } else {\n\t                schemaError(name, val);\n\t            }\n\t            if (isFunction(val.normalize)) {\n\t                compiled.normalize = val.normalize;\n\t            } else if (!val.normalize) {\n\t                compiled.normalize = createNormalizer();\n\t            } else {\n\t                schemaError(name, val);\n\t            }\n\t            return;\n\t        }\n\t        if (isString(val)) {\n\t            aliases.push(name);\n\t            return;\n\t        }\n\t        schemaError(name, val);\n\t    });\n\t    //\n\t    // Compile postponed aliases\n\t    //\n\t    aliases.forEach(function(alias) {\n\t        if (!self.__compiled__[self.__schemas__[alias]]) {\n\t            // Silently fail on missed schemas to avoid errons on disable.\n\t            // schemaError(alias, self.__schemas__[alias]);\n\t            return;\n\t        }\n\t        self.__compiled__[alias].validate = self.__compiled__[self.__schemas__[alias]].validate;\n\t        self.__compiled__[alias].normalize = self.__compiled__[self.__schemas__[alias]].normalize;\n\t    });\n\t    //\n\t    // Fake record for guessed links\n\t    //\n\t    self.__compiled__[''] = {\n\t        validate: null,\n\t        normalize: createNormalizer()\n\t    };\n\t    //\n\t    // Build schema condition\n\t    //\n\t    const slist = Object.keys(self.__compiled__).filter(function(name) {\n\t        // Filter disabled & fake schemas\n\t        return name.length > 0 && self.__compiled__[name];\n\t    }).map(escapeRE).join('|');\n\t    // (?!_) cause 1.5x slowdown\n\t    self.re.schema_test = RegExp('(^|(?!_)(?:[><\\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'i');\n\t    self.re.schema_search = RegExp('(^|(?!_)(?:[><\\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'ig');\n\t    self.re.schema_at_start = RegExp('^' + self.re.schema_search.source, 'i');\n\t    self.re.pretest = RegExp('(' + self.re.schema_test.source + ')|(' + self.re.host_fuzzy_test.source + ')|@', 'i');\n\t    //\n\t    // Cleanup\n\t    //\n\t    resetScanCache(self);\n\t}\n\t/**\n\t * class Match\n\t *\n\t * Match result. Single element of array, returned by [[LinkifyIt#match]]\n\t **/ function Match(self, shift) {\n\t    const start = self.__index__;\n\t    const end = self.__last_index__;\n\t    const text = self.__text_cache__.slice(start, end);\n\t    /**\n\t   * Match#schema -> String\n\t   *\n\t   * Prefix (protocol) for matched string.\n\t   **/ this.schema = self.__schema__.toLowerCase();\n\t    /**\n\t   * Match#index -> Number\n\t   *\n\t   * First position of matched string.\n\t   **/ this.index = start + shift;\n\t    /**\n\t   * Match#lastIndex -> Number\n\t   *\n\t   * Next position after matched string.\n\t   **/ this.lastIndex = end + shift;\n\t    /**\n\t   * Match#raw -> String\n\t   *\n\t   * Matched string.\n\t   **/ this.raw = text;\n\t    /**\n\t   * Match#text -> String\n\t   *\n\t   * Notmalized text of matched string.\n\t   **/ this.text = text;\n\t    /**\n\t   * Match#url -> String\n\t   *\n\t   * Normalized url of matched string.\n\t   **/ this.url = text;\n\t}\n\tfunction createMatch(self, shift) {\n\t    const match = new Match(self, shift);\n\t    self.__compiled__[match.schema].normalize(match, self);\n\t    return match;\n\t}\n\t/**\n\t * class LinkifyIt\n\t **/ /**\n\t * new LinkifyIt(schemas, options)\n\t * - schemas (Object): Optional. Additional schemas to validate (prefix/validator)\n\t * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }\n\t *\n\t * Creates new linkifier instance with optional additional schemas.\n\t * Can be called without `new` keyword for convenience.\n\t *\n\t * By default understands:\n\t *\n\t * - `http(s)://...` , `ftp://...`, `mailto:...` & `//...` links\n\t * - \"fuzzy\" links and emails (example.com, foo@bar.com).\n\t *\n\t * `schemas` is an object, where each key/value describes protocol/rule:\n\t *\n\t * - __key__ - link prefix (usually, protocol name with `:` at the end, `skype:`\n\t *   for example). `linkify-it` makes shure that prefix is not preceeded with\n\t *   alphanumeric char and symbols. Only whitespaces and punctuation allowed.\n\t * - __value__ - rule to check tail after link prefix\n\t *   - _String_ - just alias to existing rule\n\t *   - _Object_\n\t *     - _validate_ - validator function (should return matched length on success),\n\t *       or `RegExp`.\n\t *     - _normalize_ - optional function to normalize text & url of matched result\n\t *       (for example, for @twitter mentions).\n\t *\n\t * `options`:\n\t *\n\t * - __fuzzyLink__ - recognige URL-s without `http(s):` prefix. Default `true`.\n\t * - __fuzzyIP__ - allow IPs in fuzzy links above. Can conflict with some texts\n\t *   like version numbers. Default `false`.\n\t * - __fuzzyEmail__ - recognize emails without `mailto:` prefix.\n\t *\n\t **/ function LinkifyIt(schemas, options) {\n\t    if (!(this instanceof LinkifyIt)) {\n\t        return new LinkifyIt(schemas, options);\n\t    }\n\t    if (!options) {\n\t        if (isOptionsObj(schemas)) {\n\t            options = schemas;\n\t            schemas = {};\n\t        }\n\t    }\n\t    this.__opts__ = assign({}, defaultOptions, options);\n\t    // Cache last tested result. Used to skip repeating steps on next `match` call.\n\t    this.__index__ = -1;\n\t    this.__last_index__ = -1 // Next scan position\n\t    ;\n\t    this.__schema__ = '';\n\t    this.__text_cache__ = '';\n\t    this.__schemas__ = assign({}, defaultSchemas, schemas);\n\t    this.__compiled__ = {};\n\t    this.__tlds__ = tlds_default;\n\t    this.__tlds_replaced__ = false;\n\t    this.re = {};\n\t    compile(this);\n\t}\n\t/** chainable\n\t * LinkifyIt#add(schema, definition)\n\t * - schema (String): rule name (fixed pattern prefix)\n\t * - definition (String|RegExp|Object): schema definition\n\t *\n\t * Add new rule definition. See constructor description for details.\n\t **/ LinkifyIt.prototype.add = function add(schema, definition) {\n\t    this.__schemas__[schema] = definition;\n\t    compile(this);\n\t    return this;\n\t};\n\t/** chainable\n\t * LinkifyIt#set(options)\n\t * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }\n\t *\n\t * Set recognition options for links without schema.\n\t **/ LinkifyIt.prototype.set = function set(options) {\n\t    this.__opts__ = assign(this.__opts__, options);\n\t    return this;\n\t};\n\t/**\n\t * LinkifyIt#test(text) -> Boolean\n\t *\n\t * Searches linkifiable pattern and returns `true` on success or `false` on fail.\n\t **/ LinkifyIt.prototype.test = function test(text) {\n\t    // Reset scan cache\n\t    this.__text_cache__ = text;\n\t    this.__index__ = -1;\n\t    if (!text.length) {\n\t        return false;\n\t    }\n\t    let m, ml, me, len, shift, next, re, tld_pos, at_pos;\n\t    // try to scan for link with schema - that's the most simple rule\n\t    if (this.re.schema_test.test(text)) {\n\t        re = this.re.schema_search;\n\t        re.lastIndex = 0;\n\t        while((m = re.exec(text)) !== null){\n\t            len = this.testSchemaAt(text, m[2], re.lastIndex);\n\t            if (len) {\n\t                this.__schema__ = m[2];\n\t                this.__index__ = m.index + m[1].length;\n\t                this.__last_index__ = m.index + m[0].length + len;\n\t                break;\n\t            }\n\t        }\n\t    }\n\t    if (this.__opts__.fuzzyLink && this.__compiled__['http:']) {\n\t        // guess schemaless links\n\t        tld_pos = text.search(this.re.host_fuzzy_test);\n\t        if (tld_pos >= 0) {\n\t            // if tld is located after found link - no need to check fuzzy pattern\n\t            if (this.__index__ < 0 || tld_pos < this.__index__) {\n\t                if ((ml = text.match(this.__opts__.fuzzyIP ? this.re.link_fuzzy : this.re.link_no_ip_fuzzy)) !== null) {\n\t                    shift = ml.index + ml[1].length;\n\t                    if (this.__index__ < 0 || shift < this.__index__) {\n\t                        this.__schema__ = '';\n\t                        this.__index__ = shift;\n\t                        this.__last_index__ = ml.index + ml[0].length;\n\t                    }\n\t                }\n\t            }\n\t        }\n\t    }\n\t    if (this.__opts__.fuzzyEmail && this.__compiled__['mailto:']) {\n\t        // guess schemaless emails\n\t        at_pos = text.indexOf('@');\n\t        if (at_pos >= 0) {\n\t            // We can't skip this check, because this cases are possible:\n\t            // 192.168.1.1@gmail.com, my.in@example.com\n\t            if ((me = text.match(this.re.email_fuzzy)) !== null) {\n\t                shift = me.index + me[1].length;\n\t                next = me.index + me[0].length;\n\t                if (this.__index__ < 0 || shift < this.__index__ || shift === this.__index__ && next > this.__last_index__) {\n\t                    this.__schema__ = 'mailto:';\n\t                    this.__index__ = shift;\n\t                    this.__last_index__ = next;\n\t                }\n\t            }\n\t        }\n\t    }\n\t    return this.__index__ >= 0;\n\t};\n\t/**\n\t * LinkifyIt#pretest(text) -> Boolean\n\t *\n\t * Very quick check, that can give false positives. Returns true if link MAY BE\n\t * can exists. Can be used for speed optimization, when you need to check that\n\t * link NOT exists.\n\t **/ LinkifyIt.prototype.pretest = function pretest(text) {\n\t    return this.re.pretest.test(text);\n\t};\n\t/**\n\t * LinkifyIt#testSchemaAt(text, name, position) -> Number\n\t * - text (String): text to scan\n\t * - name (String): rule (schema) name\n\t * - position (Number): text offset to check from\n\t *\n\t * Similar to [[LinkifyIt#test]] but checks only specific protocol tail exactly\n\t * at given position. Returns length of found pattern (0 on fail).\n\t **/ LinkifyIt.prototype.testSchemaAt = function testSchemaAt(text, schema, pos) {\n\t    // If not supported schema check requested - terminate\n\t    if (!this.__compiled__[schema.toLowerCase()]) {\n\t        return 0;\n\t    }\n\t    return this.__compiled__[schema.toLowerCase()].validate(text, pos, this);\n\t};\n\t/**\n\t * LinkifyIt#match(text) -> Array|null\n\t *\n\t * Returns array of found link descriptions or `null` on fail. We strongly\n\t * recommend to use [[LinkifyIt#test]] first, for best speed.\n\t *\n\t * ##### Result match description\n\t *\n\t * - __schema__ - link schema, can be empty for fuzzy links, or `//` for\n\t *   protocol-neutral  links.\n\t * - __index__ - offset of matched text\n\t * - __lastIndex__ - index of next char after mathch end\n\t * - __raw__ - matched text\n\t * - __text__ - normalized text\n\t * - __url__ - link, generated from matched text\n\t **/ LinkifyIt.prototype.match = function match(text) {\n\t    const result = [];\n\t    let shift = 0;\n\t    // Try to take previous element from cache, if .test() called before\n\t    if (this.__index__ >= 0 && this.__text_cache__ === text) {\n\t        result.push(createMatch(this, shift));\n\t        shift = this.__last_index__;\n\t    }\n\t    // Cut head if cache was used\n\t    let tail = shift ? text.slice(shift) : text;\n\t    // Scan string until end reached\n\t    while(this.test(tail)){\n\t        result.push(createMatch(this, shift));\n\t        tail = tail.slice(this.__last_index__);\n\t        shift += this.__last_index__;\n\t    }\n\t    if (result.length) {\n\t        return result;\n\t    }\n\t    return null;\n\t};\n\t/**\n\t * LinkifyIt#matchAtStart(text) -> Match|null\n\t *\n\t * Returns fully-formed (not fuzzy) link if it starts at the beginning\n\t * of the string, and null otherwise.\n\t **/ LinkifyIt.prototype.matchAtStart = function matchAtStart(text) {\n\t    // Reset scan cache\n\t    this.__text_cache__ = text;\n\t    this.__index__ = -1;\n\t    if (!text.length) return null;\n\t    const m = this.re.schema_at_start.exec(text);\n\t    if (!m) return null;\n\t    const len = this.testSchemaAt(text, m[2], m[0].length);\n\t    if (!len) return null;\n\t    this.__schema__ = m[2];\n\t    this.__index__ = m.index + m[1].length;\n\t    this.__last_index__ = m.index + m[0].length + len;\n\t    return createMatch(this, 0);\n\t};\n\t/** chainable\n\t * LinkifyIt#tlds(list [, keepOld]) -> this\n\t * - list (Array): list of tlds\n\t * - keepOld (Boolean): merge with current list if `true` (`false` by default)\n\t *\n\t * Load (or merge) new tlds list. Those are user for fuzzy links (without prefix)\n\t * to avoid false positives. By default this algorythm used:\n\t *\n\t * - hostname with any 2-letter root zones are ok.\n\t * - biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф\n\t *   are ok.\n\t * - encoded (`xn--...`) root zones are ok.\n\t *\n\t * If list is replaced, then exact match for 2-chars root zones will be checked.\n\t **/ LinkifyIt.prototype.tlds = function tlds(list, keepOld) {\n\t    list = Array.isArray(list) ? list : [\n\t        list\n\t    ];\n\t    if (!keepOld) {\n\t        this.__tlds__ = list.slice();\n\t        this.__tlds_replaced__ = true;\n\t        compile(this);\n\t        return this;\n\t    }\n\t    this.__tlds__ = this.__tlds__.concat(list).sort().filter(function(el, idx, arr) {\n\t        return el !== arr[idx - 1];\n\t    }).reverse();\n\t    compile(this);\n\t    return this;\n\t};\n\t/**\n\t * LinkifyIt#normalize(match)\n\t *\n\t * Default normalizer (if schema does not define it's own).\n\t **/ LinkifyIt.prototype.normalize = function normalize(match) {\n\t    // Do minimal possible changes by default. Need to collect feedback prior\n\t    // to move forward https://github.com/markdown-it/linkify-it/issues/1\n\t    if (!match.schema) {\n\t        match.url = 'http://' + match.url;\n\t    }\n\t    if (match.schema === 'mailto:' && !/^mailto:/i.test(match.url)) {\n\t        match.url = 'mailto:' + match.url;\n\t    }\n\t};\n\t/**\n\t * LinkifyIt#onCompile()\n\t *\n\t * Override to modify basic RegExp-s.\n\t **/ LinkifyIt.prototype.onCompile = function onCompile() {};\n\n\t/*! https://mths.be/punycode v1.4.1 by @mathias */\n\n\n\t/** Highest positive signed 32-bit float value */\n\tvar maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1\n\n\t/** Bootstring parameters */\n\tvar base = 36;\n\tvar tMin = 1;\n\tvar tMax = 26;\n\tvar skew = 38;\n\tvar damp = 700;\n\tvar initialBias = 72;\n\tvar initialN = 128; // 0x80\n\tvar delimiter = '-'; // '\\x2D'\n\n\t/** Regular expressions */\n\tvar regexPunycode = /^xn--/;\n\tvar regexNonASCII = /[^\\x20-\\x7E]/; // unprintable ASCII chars + non-ASCII chars\n\tvar regexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g; // RFC 3490 separators\n\n\t/** Error messages */\n\tvar errors = {\n\t  'overflow': 'Overflow: input needs wider integers to process',\n\t  'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t  'invalid-input': 'Invalid input'\n\t};\n\n\t/** Convenience shortcuts */\n\tvar baseMinusTMin = base - tMin;\n\tvar floor = Math.floor;\n\tvar stringFromCharCode = String.fromCharCode;\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/**\n\t * A generic error utility function.\n\t * @private\n\t * @param {String} type The error type.\n\t * @returns {Error} Throws a `RangeError` with the applicable error message.\n\t */\n\tfunction error(type) {\n\t  throw new RangeError(errors[type]);\n\t}\n\n\t/**\n\t * A generic `Array#map` utility function.\n\t * @private\n\t * @param {Array} array The array to iterate over.\n\t * @param {Function} callback The function that gets called for every array\n\t * item.\n\t * @returns {Array} A new array of values returned by the callback function.\n\t */\n\tfunction map(array, fn) {\n\t  var length = array.length;\n\t  var result = [];\n\t  while (length--) {\n\t    result[length] = fn(array[length]);\n\t  }\n\t  return result;\n\t}\n\n\t/**\n\t * A simple `Array#map`-like wrapper to work with domain name strings or email\n\t * addresses.\n\t * @private\n\t * @param {String} domain The domain name or email address.\n\t * @param {Function} callback The function that gets called for every\n\t * character.\n\t * @returns {Array} A new string of characters returned by the callback\n\t * function.\n\t */\n\tfunction mapDomain(string, fn) {\n\t  var parts = string.split('@');\n\t  var result = '';\n\t  if (parts.length > 1) {\n\t    // In email addresses, only the domain name should be punycoded. Leave\n\t    // the local part (i.e. everything up to `@`) intact.\n\t    result = parts[0] + '@';\n\t    string = parts[1];\n\t  }\n\t  // Avoid `split(regex)` for IE8 compatibility. See #17.\n\t  string = string.replace(regexSeparators, '\\x2E');\n\t  var labels = string.split('.');\n\t  var encoded = map(labels, fn).join('.');\n\t  return result + encoded;\n\t}\n\n\t/**\n\t * Creates an array containing the numeric code points of each Unicode\n\t * character in the string. While JavaScript uses UCS-2 internally,\n\t * this function will convert a pair of surrogate halves (each of which\n\t * UCS-2 exposes as separate characters) into a single code point,\n\t * matching UTF-16.\n\t * @see `punycode.ucs2.encode`\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode.ucs2\n\t * @name decode\n\t * @param {String} string The Unicode input string (UCS-2).\n\t * @returns {Array} The new array of code points.\n\t */\n\tfunction ucs2decode(string) {\n\t  var output = [],\n\t    counter = 0,\n\t    length = string.length,\n\t    value,\n\t    extra;\n\t  while (counter < length) {\n\t    value = string.charCodeAt(counter++);\n\t    if (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t      // high surrogate, and there is a next character\n\t      extra = string.charCodeAt(counter++);\n\t      if ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t        output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t      } else {\n\t        // unmatched surrogate; only append this code unit, in case the next\n\t        // code unit is the high surrogate of a surrogate pair\n\t        output.push(value);\n\t        counter--;\n\t      }\n\t    } else {\n\t      output.push(value);\n\t    }\n\t  }\n\t  return output;\n\t}\n\n\t/**\n\t * Creates a string based on an array of numeric code points.\n\t * @see `punycode.ucs2.decode`\n\t * @memberOf punycode.ucs2\n\t * @name encode\n\t * @param {Array} codePoints The array of numeric code points.\n\t * @returns {String} The new Unicode string (UCS-2).\n\t */\n\tfunction ucs2encode(array) {\n\t  return map(array, function(value) {\n\t    var output = '';\n\t    if (value > 0xFFFF) {\n\t      value -= 0x10000;\n\t      output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t      value = 0xDC00 | value & 0x3FF;\n\t    }\n\t    output += stringFromCharCode(value);\n\t    return output;\n\t  }).join('');\n\t}\n\n\t/**\n\t * Converts a basic code point into a digit/integer.\n\t * @see `digitToBasic()`\n\t * @private\n\t * @param {Number} codePoint The basic numeric code point value.\n\t * @returns {Number} The numeric value of a basic code point (for use in\n\t * representing integers) in the range `0` to `base - 1`, or `base` if\n\t * the code point does not represent a value.\n\t */\n\tfunction basicToDigit(codePoint) {\n\t  if (codePoint - 48 < 10) {\n\t    return codePoint - 22;\n\t  }\n\t  if (codePoint - 65 < 26) {\n\t    return codePoint - 65;\n\t  }\n\t  if (codePoint - 97 < 26) {\n\t    return codePoint - 97;\n\t  }\n\t  return base;\n\t}\n\n\t/**\n\t * Converts a digit/integer into a basic code point.\n\t * @see `basicToDigit()`\n\t * @private\n\t * @param {Number} digit The numeric value of a basic code point.\n\t * @returns {Number} The basic code point whose value (when used for\n\t * representing integers) is `digit`, which needs to be in the range\n\t * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n\t * used; else, the lowercase form is used. The behavior is undefined\n\t * if `flag` is non-zero and `digit` has no uppercase form.\n\t */\n\tfunction digitToBasic(digit, flag) {\n\t  //  0..25 map to ASCII a..z or A..Z\n\t  // 26..35 map to ASCII 0..9\n\t  return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n\t}\n\n\t/**\n\t * Bias adaptation function as per section 3.4 of RFC 3492.\n\t * https://tools.ietf.org/html/rfc3492#section-3.4\n\t * @private\n\t */\n\tfunction adapt(delta, numPoints, firstTime) {\n\t  var k = 0;\n\t  delta = firstTime ? floor(delta / damp) : delta >> 1;\n\t  delta += floor(delta / numPoints);\n\t  for ( /* no initialization */ ; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t    delta = floor(delta / baseMinusTMin);\n\t  }\n\t  return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n\t}\n\n\t/**\n\t * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n\t * symbols.\n\t * @memberOf punycode\n\t * @param {String} input The Punycode string of ASCII-only symbols.\n\t * @returns {String} The resulting string of Unicode symbols.\n\t */\n\tfunction decode(input) {\n\t  // Don't use UCS-2\n\t  var output = [],\n\t    inputLength = input.length,\n\t    out,\n\t    i = 0,\n\t    n = initialN,\n\t    bias = initialBias,\n\t    basic,\n\t    j,\n\t    index,\n\t    oldi,\n\t    w,\n\t    k,\n\t    digit,\n\t    t,\n\t    /** Cached calculation results */\n\t    baseMinusT;\n\n\t  // Handle the basic code points: let `basic` be the number of input code\n\t  // points before the last delimiter, or `0` if there is none, then copy\n\t  // the first basic code points to the output.\n\n\t  basic = input.lastIndexOf(delimiter);\n\t  if (basic < 0) {\n\t    basic = 0;\n\t  }\n\n\t  for (j = 0; j < basic; ++j) {\n\t    // if it's not a basic code point\n\t    if (input.charCodeAt(j) >= 0x80) {\n\t      error('not-basic');\n\t    }\n\t    output.push(input.charCodeAt(j));\n\t  }\n\n\t  // Main decoding loop: start just after the last delimiter if any basic code\n\t  // points were copied; start at the beginning otherwise.\n\n\t  for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */ ) {\n\n\t    // `index` is the index of the next character to be consumed.\n\t    // Decode a generalized variable-length integer into `delta`,\n\t    // which gets added to `i`. The overflow checking is easier\n\t    // if we increase `i` as we go, then subtract off its starting\n\t    // value at the end to obtain `delta`.\n\t    for (oldi = i, w = 1, k = base; /* no condition */ ; k += base) {\n\n\t      if (index >= inputLength) {\n\t        error('invalid-input');\n\t      }\n\n\t      digit = basicToDigit(input.charCodeAt(index++));\n\n\t      if (digit >= base || digit > floor((maxInt - i) / w)) {\n\t        error('overflow');\n\t      }\n\n\t      i += digit * w;\n\t      t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t      if (digit < t) {\n\t        break;\n\t      }\n\n\t      baseMinusT = base - t;\n\t      if (w > floor(maxInt / baseMinusT)) {\n\t        error('overflow');\n\t      }\n\n\t      w *= baseMinusT;\n\n\t    }\n\n\t    out = output.length + 1;\n\t    bias = adapt(i - oldi, out, oldi == 0);\n\n\t    // `i` was supposed to wrap around from `out` to `0`,\n\t    // incrementing `n` each time, so we'll fix that now:\n\t    if (floor(i / out) > maxInt - n) {\n\t      error('overflow');\n\t    }\n\n\t    n += floor(i / out);\n\t    i %= out;\n\n\t    // Insert `n` at position `i` of the output\n\t    output.splice(i++, 0, n);\n\n\t  }\n\n\t  return ucs2encode(output);\n\t}\n\n\t/**\n\t * Converts a string of Unicode symbols (e.g. a domain name label) to a\n\t * Punycode string of ASCII-only symbols.\n\t * @memberOf punycode\n\t * @param {String} input The string of Unicode symbols.\n\t * @returns {String} The resulting Punycode string of ASCII-only symbols.\n\t */\n\tfunction encode(input) {\n\t  var n,\n\t    delta,\n\t    handledCPCount,\n\t    basicLength,\n\t    bias,\n\t    j,\n\t    m,\n\t    q,\n\t    k,\n\t    t,\n\t    currentValue,\n\t    output = [],\n\t    /** `inputLength` will hold the number of code points in `input`. */\n\t    inputLength,\n\t    /** Cached calculation results */\n\t    handledCPCountPlusOne,\n\t    baseMinusT,\n\t    qMinusT;\n\n\t  // Convert the input in UCS-2 to Unicode\n\t  input = ucs2decode(input);\n\n\t  // Cache the length\n\t  inputLength = input.length;\n\n\t  // Initialize the state\n\t  n = initialN;\n\t  delta = 0;\n\t  bias = initialBias;\n\n\t  // Handle the basic code points\n\t  for (j = 0; j < inputLength; ++j) {\n\t    currentValue = input[j];\n\t    if (currentValue < 0x80) {\n\t      output.push(stringFromCharCode(currentValue));\n\t    }\n\t  }\n\n\t  handledCPCount = basicLength = output.length;\n\n\t  // `handledCPCount` is the number of code points that have been handled;\n\t  // `basicLength` is the number of basic code points.\n\n\t  // Finish the basic string - if it is not empty - with a delimiter\n\t  if (basicLength) {\n\t    output.push(delimiter);\n\t  }\n\n\t  // Main encoding loop:\n\t  while (handledCPCount < inputLength) {\n\n\t    // All non-basic code points < n have been handled already. Find the next\n\t    // larger one:\n\t    for (m = maxInt, j = 0; j < inputLength; ++j) {\n\t      currentValue = input[j];\n\t      if (currentValue >= n && currentValue < m) {\n\t        m = currentValue;\n\t      }\n\t    }\n\n\t    // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t    // but guard against overflow\n\t    handledCPCountPlusOne = handledCPCount + 1;\n\t    if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t      error('overflow');\n\t    }\n\n\t    delta += (m - n) * handledCPCountPlusOne;\n\t    n = m;\n\n\t    for (j = 0; j < inputLength; ++j) {\n\t      currentValue = input[j];\n\n\t      if (currentValue < n && ++delta > maxInt) {\n\t        error('overflow');\n\t      }\n\n\t      if (currentValue == n) {\n\t        // Represent delta as a generalized variable-length integer\n\t        for (q = delta, k = base; /* no condition */ ; k += base) {\n\t          t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t          if (q < t) {\n\t            break;\n\t          }\n\t          qMinusT = q - t;\n\t          baseMinusT = base - t;\n\t          output.push(\n\t            stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t          );\n\t          q = floor(qMinusT / baseMinusT);\n\t        }\n\n\t        output.push(stringFromCharCode(digitToBasic(q, 0)));\n\t        bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t        delta = 0;\n\t        ++handledCPCount;\n\t      }\n\t    }\n\n\t    ++delta;\n\t    ++n;\n\n\t  }\n\t  return output.join('');\n\t}\n\n\t/**\n\t * Converts a Punycode string representing a domain name or an email address\n\t * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n\t * it doesn't matter if you call it on a string that has already been\n\t * converted to Unicode.\n\t * @memberOf punycode\n\t * @param {String} input The Punycoded domain name or email address to\n\t * convert to Unicode.\n\t * @returns {String} The Unicode representation of the given Punycode\n\t * string.\n\t */\n\tfunction toUnicode(input) {\n\t  return mapDomain(input, function(string) {\n\t    return regexPunycode.test(string) ?\n\t      decode(string.slice(4).toLowerCase()) :\n\t      string;\n\t  });\n\t}\n\n\t/**\n\t * Converts a Unicode string representing a domain name or an email address to\n\t * Punycode. Only the non-ASCII parts of the domain name will be converted,\n\t * i.e. it doesn't matter if you call it with a domain that's already in\n\t * ASCII.\n\t * @memberOf punycode\n\t * @param {String} input The domain name or email address to convert, as a\n\t * Unicode string.\n\t * @returns {String} The Punycode representation of the given domain name or\n\t * email address.\n\t */\n\tfunction toASCII(input) {\n\t  return mapDomain(input, function(string) {\n\t    return regexNonASCII.test(string) ?\n\t      'xn--' + encode(string) :\n\t      string;\n\t  });\n\t}\n\tvar version = '1.4.1';\n\t/**\n\t * An object of methods to convert from JavaScript's internal character\n\t * representation (UCS-2) to Unicode code points, and back.\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode\n\t * @type Object\n\t */\n\n\tvar ucs2 = {\n\t  decode: ucs2decode,\n\t  encode: ucs2encode\n\t};\n\tvar punycode = {\n\t  version: version,\n\t  ucs2: ucs2,\n\t  toASCII: toASCII,\n\t  toUnicode: toUnicode,\n\t  encode: encode,\n\t  decode: decode\n\t};\n\n\t// markdown-it default options\n\tvar cfg_default = {\n\t    options: {\n\t        // Enable HTML tags in source\n\t        html: false,\n\t        // Use '/' to close single tags (<br />)\n\t        xhtmlOut: false,\n\t        // Convert '\\n' in paragraphs into <br>\n\t        breaks: false,\n\t        // CSS language prefix for fenced blocks\n\t        langPrefix: 'language-',\n\t        // autoconvert URL-like texts to links\n\t        linkify: false,\n\t        // Enable some language-neutral replacements + quotes beautification\n\t        typographer: false,\n\t        // Double + single quotes replacement pairs, when typographer enabled,\n\t        // and smartquotes on. Could be either a String or an Array.\n\t        //\n\t        // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n\t        // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n\t        quotes: '\\u201c\\u201d\\u2018\\u2019',\n\t        /* “”‘’ */ // Highlighter function. Should return escaped HTML,\n\t        // or '' if the source string is not changed and should be escaped externaly.\n\t        // If result starts with <pre... internal wrapper is skipped.\n\t        //\n\t        // function (/*str, lang*/) { return ''; }\n\t        //\n\t        highlight: null,\n\t        // Internal protection, recursion limit\n\t        maxNesting: 100\n\t    },\n\t    components: {\n\t        core: {},\n\t        block: {},\n\t        inline: {}\n\t    }\n\t};\n\n\t// \"Zero\" preset, with nothing enabled. Useful for manual configuring of simple\n\t// modes. For example, to parse bold/italic only.\n\tvar cfg_zero = {\n\t    options: {\n\t        // Enable HTML tags in source\n\t        html: false,\n\t        // Use '/' to close single tags (<br />)\n\t        xhtmlOut: false,\n\t        // Convert '\\n' in paragraphs into <br>\n\t        breaks: false,\n\t        // CSS language prefix for fenced blocks\n\t        langPrefix: 'language-',\n\t        // autoconvert URL-like texts to links\n\t        linkify: false,\n\t        // Enable some language-neutral replacements + quotes beautification\n\t        typographer: false,\n\t        // Double + single quotes replacement pairs, when typographer enabled,\n\t        // and smartquotes on. Could be either a String or an Array.\n\t        //\n\t        // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n\t        // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n\t        quotes: '\\u201c\\u201d\\u2018\\u2019',\n\t        /* “”‘’ */ // Highlighter function. Should return escaped HTML,\n\t        // or '' if the source string is not changed and should be escaped externaly.\n\t        // If result starts with <pre... internal wrapper is skipped.\n\t        //\n\t        // function (/*str, lang*/) { return ''; }\n\t        //\n\t        highlight: null,\n\t        // Internal protection, recursion limit\n\t        maxNesting: 20\n\t    },\n\t    components: {\n\t        core: {\n\t            rules: [\n\t                'normalize',\n\t                'block',\n\t                'inline',\n\t                'text_join'\n\t            ]\n\t        },\n\t        block: {\n\t            rules: [\n\t                'paragraph'\n\t            ]\n\t        },\n\t        inline: {\n\t            rules: [\n\t                'text'\n\t            ],\n\t            rules2: [\n\t                'balance_pairs',\n\t                'fragments_join'\n\t            ]\n\t        }\n\t    }\n\t};\n\n\t// Commonmark default options\n\tvar cfg_commonmark = {\n\t    options: {\n\t        // Enable HTML tags in source\n\t        html: true,\n\t        // Use '/' to close single tags (<br />)\n\t        xhtmlOut: true,\n\t        // Convert '\\n' in paragraphs into <br>\n\t        breaks: false,\n\t        // CSS language prefix for fenced blocks\n\t        langPrefix: 'language-',\n\t        // autoconvert URL-like texts to links\n\t        linkify: false,\n\t        // Enable some language-neutral replacements + quotes beautification\n\t        typographer: false,\n\t        // Double + single quotes replacement pairs, when typographer enabled,\n\t        // and smartquotes on. Could be either a String or an Array.\n\t        //\n\t        // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n\t        // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n\t        quotes: '\\u201c\\u201d\\u2018\\u2019',\n\t        /* “”‘’ */ // Highlighter function. Should return escaped HTML,\n\t        // or '' if the source string is not changed and should be escaped externaly.\n\t        // If result starts with <pre... internal wrapper is skipped.\n\t        //\n\t        // function (/*str, lang*/) { return ''; }\n\t        //\n\t        highlight: null,\n\t        // Internal protection, recursion limit\n\t        maxNesting: 20\n\t    },\n\t    components: {\n\t        core: {\n\t            rules: [\n\t                'normalize',\n\t                'block',\n\t                'inline',\n\t                'text_join'\n\t            ]\n\t        },\n\t        block: {\n\t            rules: [\n\t                'blockquote',\n\t                'code',\n\t                'fence',\n\t                'heading',\n\t                'hr',\n\t                'html_block',\n\t                'lheading',\n\t                'list',\n\t                'reference',\n\t                'paragraph'\n\t            ]\n\t        },\n\t        inline: {\n\t            rules: [\n\t                'autolink',\n\t                'backticks',\n\t                'emphasis',\n\t                'entity',\n\t                'escape',\n\t                'html_inline',\n\t                'image',\n\t                'link',\n\t                'newline',\n\t                'text'\n\t            ],\n\t            rules2: [\n\t                'balance_pairs',\n\t                'emphasis',\n\t                'fragments_join'\n\t            ]\n\t        }\n\t    }\n\t};\n\n\t// Main parser class\n\tconst config = {\n\t    default: cfg_default,\n\t    zero: cfg_zero,\n\t    commonmark: cfg_commonmark\n\t};\n\t//\n\t// This validator can prohibit more than really needed to prevent XSS. It's a\n\t// tradeoff to keep code simple and to be secure by default.\n\t//\n\t// If you need different setup - override validator method as you wish. Or\n\t// replace it with dummy function and use external sanitizer.\n\t//\n\tconst BAD_PROTO_RE = /^(vbscript|javascript|file|data):/;\n\tconst GOOD_DATA_RE = /^data:image\\/(gif|png|jpeg|webp);/;\n\tfunction validateLink(url) {\n\t    // url should be normalized at this point, and existing entities are decoded\n\t    const str = url.trim().toLowerCase();\n\t    return BAD_PROTO_RE.test(str) ? GOOD_DATA_RE.test(str) : true;\n\t}\n\tconst RECODE_HOSTNAME_FOR = [\n\t    'http:',\n\t    'https:',\n\t    'mailto:'\n\t];\n\tfunction normalizeLink(url) {\n\t    const parsed = urlParse(url, true);\n\t    if (parsed.hostname) {\n\t        // Encode hostnames in urls like:\n\t        // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`\n\t        //\n\t        // We don't encode unknown schemas, because it's likely that we encode\n\t        // something we shouldn't (e.g. `skype:name` treated as `skype:host`)\n\t        //\n\t        if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {\n\t            try {\n\t                parsed.hostname = punycode.toASCII(parsed.hostname);\n\t            } catch (er) {}\n\t        }\n\t    }\n\t    return encode$1(format(parsed));\n\t}\n\tfunction normalizeLinkText(url) {\n\t    const parsed = urlParse(url, true);\n\t    if (parsed.hostname) {\n\t        // Encode hostnames in urls like:\n\t        // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`\n\t        //\n\t        // We don't encode unknown schemas, because it's likely that we encode\n\t        // something we shouldn't (e.g. `skype:name` treated as `skype:host`)\n\t        //\n\t        if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {\n\t            try {\n\t                parsed.hostname = punycode.toUnicode(parsed.hostname);\n\t            } catch (er) {}\n\t        }\n\t    }\n\t    // add '%' to exclude list because of https://github.com/markdown-it/markdown-it/issues/720\n\t    return decode$1(format(parsed), decode$1.defaultChars + '%');\n\t}\n\t/**\n\t * class MarkdownIt\n\t *\n\t * Main parser/renderer class.\n\t *\n\t * ##### Usage\n\t *\n\t * ```javascript\n\t * // node.js, \"classic\" way:\n\t * var MarkdownIt = require('markdown-it'),\n\t *     md = new MarkdownIt();\n\t * var result = md.render('# markdown-it rulezz!');\n\t *\n\t * // node.js, the same, but with sugar:\n\t * var md = require('markdown-it')();\n\t * var result = md.render('# markdown-it rulezz!');\n\t *\n\t * // browser without AMD, added to \"window\" on script load\n\t * // Note, there are no dash.\n\t * var md = window.markdownit();\n\t * var result = md.render('# markdown-it rulezz!');\n\t * ```\n\t *\n\t * Single line rendering, without paragraph wrap:\n\t *\n\t * ```javascript\n\t * var md = require('markdown-it')();\n\t * var result = md.renderInline('__markdown-it__ rulezz!');\n\t * ```\n\t **/ /**\n\t * new MarkdownIt([presetName, options])\n\t * - presetName (String): optional, `commonmark` / `zero`\n\t * - options (Object)\n\t *\n\t * Creates parser instanse with given config. Can be called without `new`.\n\t *\n\t * ##### presetName\n\t *\n\t * MarkdownIt provides named presets as a convenience to quickly\n\t * enable/disable active syntax rules and options for common use cases.\n\t *\n\t * - [\"commonmark\"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/commonmark.mjs) -\n\t *   configures parser to strict [CommonMark](http://commonmark.org/) mode.\n\t * - [default](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/default.mjs) -\n\t *   similar to GFM, used when no preset name given. Enables all available rules,\n\t *   but still without html, typographer & autolinker.\n\t * - [\"zero\"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/zero.mjs) -\n\t *   all rules disabled. Useful to quickly setup your config via `.enable()`.\n\t *   For example, when you need only `bold` and `italic` markup and nothing else.\n\t *\n\t * ##### options:\n\t *\n\t * - __html__ - `false`. Set `true` to enable HTML tags in source. Be careful!\n\t *   That's not safe! You may need external sanitizer to protect output from XSS.\n\t *   It's better to extend features via plugins, instead of enabling HTML.\n\t * - __xhtmlOut__ - `false`. Set `true` to add '/' when closing single tags\n\t *   (`<br />`). This is needed only for full CommonMark compatibility. In real\n\t *   world you will need HTML output.\n\t * - __breaks__ - `false`. Set `true` to convert `\\n` in paragraphs into `<br>`.\n\t * - __langPrefix__ - `language-`. CSS language class prefix for fenced blocks.\n\t *   Can be useful for external highlighters.\n\t * - __linkify__ - `false`. Set `true` to autoconvert URL-like text to links.\n\t * - __typographer__  - `false`. Set `true` to enable [some language-neutral\n\t *   replacement](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/replacements.mjs) +\n\t *   quotes beautification (smartquotes).\n\t * - __quotes__ - `“”‘’`, String or Array. Double + single quotes replacement\n\t *   pairs, when typographer enabled and smartquotes on. For example, you can\n\t *   use `'«»„“'` for Russian, `'„“‚‘'` for German, and\n\t *   `['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›']` for French (including nbsp).\n\t * - __highlight__ - `null`. Highlighter function for fenced code blocks.\n\t *   Highlighter `function (str, lang)` should return escaped HTML. It can also\n\t *   return empty string if the source was not changed and should be escaped\n\t *   externaly. If result starts with <pre... internal wrapper is skipped.\n\t *\n\t * ##### Example\n\t *\n\t * ```javascript\n\t * // commonmark mode\n\t * var md = require('markdown-it')('commonmark');\n\t *\n\t * // default mode\n\t * var md = require('markdown-it')();\n\t *\n\t * // enable everything\n\t * var md = require('markdown-it')({\n\t *   html: true,\n\t *   linkify: true,\n\t *   typographer: true\n\t * });\n\t * ```\n\t *\n\t * ##### Syntax highlighting\n\t *\n\t * ```js\n\t * var hljs = require('highlight.js') // https://highlightjs.org/\n\t *\n\t * var md = require('markdown-it')({\n\t *   highlight: function (str, lang) {\n\t *     if (lang && hljs.getLanguage(lang)) {\n\t *       try {\n\t *         return hljs.highlight(str, { language: lang, ignoreIllegals: true }).value;\n\t *       } catch (__) {}\n\t *     }\n\t *\n\t *     return ''; // use external default escaping\n\t *   }\n\t * });\n\t * ```\n\t *\n\t * Or with full wrapper override (if you need assign class to `<pre>` or `<code>`):\n\t *\n\t * ```javascript\n\t * var hljs = require('highlight.js') // https://highlightjs.org/\n\t *\n\t * // Actual default values\n\t * var md = require('markdown-it')({\n\t *   highlight: function (str, lang) {\n\t *     if (lang && hljs.getLanguage(lang)) {\n\t *       try {\n\t *         return '<pre><code class=\"hljs\">' +\n\t *                hljs.highlight(str, { language: lang, ignoreIllegals: true }).value +\n\t *                '</code></pre>';\n\t *       } catch (__) {}\n\t *     }\n\t *\n\t *     return '<pre><code class=\"hljs\">' + md.utils.escapeHtml(str) + '</code></pre>';\n\t *   }\n\t * });\n\t * ```\n\t *\n\t **/ function MarkdownIt(presetName, options) {\n\t    if (!(this instanceof MarkdownIt)) {\n\t        return new MarkdownIt(presetName, options);\n\t    }\n\t    if (!options) {\n\t        if (!isString$1(presetName)) {\n\t            options = presetName || {};\n\t            presetName = 'default';\n\t        }\n\t    }\n\t    /**\n\t   * MarkdownIt#inline -> ParserInline\n\t   *\n\t   * Instance of [[ParserInline]]. You may need it to add new rules when\n\t   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n\t   * [[MarkdownIt.enable]].\n\t   **/ this.inline = new ParserInline();\n\t    /**\n\t   * MarkdownIt#block -> ParserBlock\n\t   *\n\t   * Instance of [[ParserBlock]]. You may need it to add new rules when\n\t   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n\t   * [[MarkdownIt.enable]].\n\t   **/ this.block = new ParserBlock();\n\t    /**\n\t   * MarkdownIt#core -> Core\n\t   *\n\t   * Instance of [[Core]] chain executor. You may need it to add new rules when\n\t   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n\t   * [[MarkdownIt.enable]].\n\t   **/ this.core = new Core();\n\t    /**\n\t   * MarkdownIt#renderer -> Renderer\n\t   *\n\t   * Instance of [[Renderer]]. Use it to modify output look. Or to add rendering\n\t   * rules for new token types, generated by plugins.\n\t   *\n\t   * ##### Example\n\t   *\n\t   * ```javascript\n\t   * var md = require('markdown-it')();\n\t   *\n\t   * function myToken(tokens, idx, options, env, self) {\n\t   *   //...\n\t   *   return result;\n\t   * };\n\t   *\n\t   * md.renderer.rules['my_token'] = myToken\n\t   * ```\n\t   *\n\t   * See [[Renderer]] docs and [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.mjs).\n\t   **/ this.renderer = new Renderer();\n\t    /**\n\t   * MarkdownIt#linkify -> LinkifyIt\n\t   *\n\t   * [linkify-it](https://github.com/markdown-it/linkify-it) instance.\n\t   * Used by [linkify](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/linkify.mjs)\n\t   * rule.\n\t   **/ this.linkify = new LinkifyIt();\n\t    /**\n\t   * MarkdownIt#validateLink(url) -> Boolean\n\t   *\n\t   * Link validation function. CommonMark allows too much in links. By default\n\t   * we disable `javascript:`, `vbscript:`, `file:` schemas, and almost all `data:...` schemas\n\t   * except some embedded image types.\n\t   *\n\t   * You can change this behaviour:\n\t   *\n\t   * ```javascript\n\t   * var md = require('markdown-it')();\n\t   * // enable everything\n\t   * md.validateLink = function () { return true; }\n\t   * ```\n\t   **/ this.validateLink = validateLink;\n\t    /**\n\t   * MarkdownIt#normalizeLink(url) -> String\n\t   *\n\t   * Function used to encode link url to a machine-readable format,\n\t   * which includes url-encoding, punycode, etc.\n\t   **/ this.normalizeLink = normalizeLink;\n\t    /**\n\t   * MarkdownIt#normalizeLinkText(url) -> String\n\t   *\n\t   * Function used to decode link url to a human-readable format`\n\t   **/ this.normalizeLinkText = normalizeLinkText;\n\t    // Expose utils & helpers for easy acces from plugins\n\t    /**\n\t   * MarkdownIt#utils -> utils\n\t   *\n\t   * Assorted utility functions, useful to write plugins. See details\n\t   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/common/utils.mjs).\n\t   **/ this.utils = utils;\n\t    /**\n\t   * MarkdownIt#helpers -> helpers\n\t   *\n\t   * Link components parser functions, useful to write plugins. See details\n\t   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/helpers).\n\t   **/ this.helpers = assign$1({}, helpers);\n\t    this.options = {};\n\t    this.configure(presetName);\n\t    if (options) {\n\t        this.set(options);\n\t    }\n\t}\n\t/** chainable\n\t * MarkdownIt.set(options)\n\t *\n\t * Set parser options (in the same format as in constructor). Probably, you\n\t * will never need it, but you can change options after constructor call.\n\t *\n\t * ##### Example\n\t *\n\t * ```javascript\n\t * var md = require('markdown-it')()\n\t *             .set({ html: true, breaks: true })\n\t *             .set({ typographer, true });\n\t * ```\n\t *\n\t * __Note:__ To achieve the best possible performance, don't modify a\n\t * `markdown-it` instance options on the fly. If you need multiple configurations\n\t * it's best to create multiple instances and initialize each with separate\n\t * config.\n\t **/ MarkdownIt.prototype.set = function(options) {\n\t    assign$1(this.options, options);\n\t    return this;\n\t};\n\t/** chainable, internal\n\t * MarkdownIt.configure(presets)\n\t *\n\t * Batch load of all options and compenent settings. This is internal method,\n\t * and you probably will not need it. But if you will - see available presets\n\t * and data structure [here](https://github.com/markdown-it/markdown-it/tree/master/lib/presets)\n\t *\n\t * We strongly recommend to use presets instead of direct config loads. That\n\t * will give better compatibility with next versions.\n\t **/ MarkdownIt.prototype.configure = function(presets) {\n\t    const self = this;\n\t    if (isString$1(presets)) {\n\t        const presetName = presets;\n\t        presets = config[presetName];\n\t        if (!presets) {\n\t            throw new Error('Wrong `markdown-it` preset \"' + presetName + '\", check name');\n\t        }\n\t    }\n\t    if (!presets) {\n\t        throw new Error('Wrong `markdown-it` preset, can\\'t be empty');\n\t    }\n\t    if (presets.options) {\n\t        self.set(presets.options);\n\t    }\n\t    if (presets.components) {\n\t        Object.keys(presets.components).forEach(function(name) {\n\t            if (presets.components[name].rules) {\n\t                self[name].ruler.enableOnly(presets.components[name].rules);\n\t            }\n\t            if (presets.components[name].rules2) {\n\t                self[name].ruler2.enableOnly(presets.components[name].rules2);\n\t            }\n\t        });\n\t    }\n\t    return this;\n\t};\n\t/** chainable\n\t * MarkdownIt.enable(list, ignoreInvalid)\n\t * - list (String|Array): rule name or list of rule names to enable\n\t * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n\t *\n\t * Enable list or rules. It will automatically find appropriate components,\n\t * containing rules with given names. If rule not found, and `ignoreInvalid`\n\t * not set - throws exception.\n\t *\n\t * ##### Example\n\t *\n\t * ```javascript\n\t * var md = require('markdown-it')()\n\t *             .enable(['sub', 'sup'])\n\t *             .disable('smartquotes');\n\t * ```\n\t **/ MarkdownIt.prototype.enable = function(list, ignoreInvalid) {\n\t    let result = [];\n\t    if (!Array.isArray(list)) {\n\t        list = [\n\t            list\n\t        ];\n\t    }\n\t    [\n\t        'core',\n\t        'block',\n\t        'inline'\n\t    ].forEach(function(chain) {\n\t        result = result.concat(this[chain].ruler.enable(list, true));\n\t    }, this);\n\t    result = result.concat(this.inline.ruler2.enable(list, true));\n\t    const missed = list.filter(function(name) {\n\t        return result.indexOf(name) < 0;\n\t    });\n\t    if (missed.length && !ignoreInvalid) {\n\t        throw new Error('MarkdownIt. Failed to enable unknown rule(s): ' + missed);\n\t    }\n\t    return this;\n\t};\n\t/** chainable\n\t * MarkdownIt.disable(list, ignoreInvalid)\n\t * - list (String|Array): rule name or list of rule names to disable.\n\t * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n\t *\n\t * The same as [[MarkdownIt.enable]], but turn specified rules off.\n\t **/ MarkdownIt.prototype.disable = function(list, ignoreInvalid) {\n\t    let result = [];\n\t    if (!Array.isArray(list)) {\n\t        list = [\n\t            list\n\t        ];\n\t    }\n\t    [\n\t        'core',\n\t        'block',\n\t        'inline'\n\t    ].forEach(function(chain) {\n\t        result = result.concat(this[chain].ruler.disable(list, true));\n\t    }, this);\n\t    result = result.concat(this.inline.ruler2.disable(list, true));\n\t    const missed = list.filter(function(name) {\n\t        return result.indexOf(name) < 0;\n\t    });\n\t    if (missed.length && !ignoreInvalid) {\n\t        throw new Error('MarkdownIt. Failed to disable unknown rule(s): ' + missed);\n\t    }\n\t    return this;\n\t};\n\t/** chainable\n\t * MarkdownIt.use(plugin, params)\n\t *\n\t * Load specified plugin with given params into current parser instance.\n\t * It's just a sugar to call `plugin(md, params)` with curring.\n\t *\n\t * ##### Example\n\t *\n\t * ```javascript\n\t * var iterator = require('markdown-it-for-inline');\n\t * var md = require('markdown-it')()\n\t *             .use(iterator, 'foo_replace', 'text', function (tokens, idx) {\n\t *               tokens[idx].content = tokens[idx].content.replace(/foo/g, 'bar');\n\t *             });\n\t * ```\n\t **/ MarkdownIt.prototype.use = function(plugin /*, params, ... */ ) {\n\t    const args = [\n\t        this\n\t    ].concat(Array.prototype.slice.call(arguments, 1));\n\t    plugin.apply(plugin, args);\n\t    return this;\n\t};\n\t/** internal\n\t * MarkdownIt.parse(src, env) -> Array\n\t * - src (String): source string\n\t * - env (Object): environment sandbox\n\t *\n\t * Parse input string and return list of block tokens (special token type\n\t * \"inline\" will contain list of inline tokens). You should not call this\n\t * method directly, until you write custom renderer (for example, to produce\n\t * AST).\n\t *\n\t * `env` is used to pass data between \"distributed\" rules and return additional\n\t * metadata like reference info, needed for the renderer. It also can be used to\n\t * inject data in specific cases. Usually, you will be ok to pass `{}`,\n\t * and then pass updated object to renderer.\n\t **/ MarkdownIt.prototype.parse = function(src, env) {\n\t    if (typeof src !== 'string') {\n\t        throw new Error('Input data should be a String');\n\t    }\n\t    const state = new this.core.State(src, this, env);\n\t    this.core.process(state);\n\t    return state.tokens;\n\t};\n\t/**\n\t * MarkdownIt.render(src [, env]) -> String\n\t * - src (String): source string\n\t * - env (Object): environment sandbox\n\t *\n\t * Render markdown string into html. It does all magic for you :).\n\t *\n\t * `env` can be used to inject additional metadata (`{}` by default).\n\t * But you will not need it with high probability. See also comment\n\t * in [[MarkdownIt.parse]].\n\t **/ MarkdownIt.prototype.render = function(src, env) {\n\t    env = env || {};\n\t    return this.renderer.render(this.parse(src, env), this.options, env);\n\t};\n\t/** internal\n\t * MarkdownIt.parseInline(src, env) -> Array\n\t * - src (String): source string\n\t * - env (Object): environment sandbox\n\t *\n\t * The same as [[MarkdownIt.parse]] but skip all block rules. It returns the\n\t * block tokens list with the single `inline` element, containing parsed inline\n\t * tokens in `children` property. Also updates `env` object.\n\t **/ MarkdownIt.prototype.parseInline = function(src, env) {\n\t    const state = new this.core.State(src, this, env);\n\t    state.inlineMode = true;\n\t    this.core.process(state);\n\t    return state.tokens;\n\t};\n\t/**\n\t * MarkdownIt.renderInline(src [, env]) -> String\n\t * - src (String): source string\n\t * - env (Object): environment sandbox\n\t *\n\t * Similar to [[MarkdownIt.render]] but for single paragraph content. Result\n\t * will NOT be wrapped into `<p>` tags.\n\t **/ MarkdownIt.prototype.renderInline = function(src, env) {\n\t    env = env || {};\n\t    return this.renderer.render(this.parseInline(src, env), this.options, env);\n\t};\n\n\tlet subscriber = null;\n\tfunction signal(value) {\n\t    const subscriptions = new Set();\n\t    return {\n\t        get value () {\n\t            if (subscriber) {\n\t                subscriptions.add(subscriber);\n\t                subscriber = null;\n\t            }\n\t            return value;\n\t        },\n\t        set value (updated){\n\t            value = updated;\n\t            subscriptions.forEach((fn)=>fn());\n\t        },\n\t        get isSignal () {\n\t            return true;\n\t        },\n\t        unsubscribe (fn) {\n\t            return subscriptions.delete(fn);\n\t        }\n\t    };\n\t}\n\tfunction effect(fn) {\n\t    subscriber = fn;\n\t    fn();\n\t}\n\n\tfunction _class_private_field_loose_base$2(receiver, privateKey) {\n\t    if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {\n\t        throw new TypeError(\"attempted to use private field on non-instance\");\n\t    }\n\t    return receiver;\n\t}\n\tvar id$2 = 0;\n\tfunction _class_private_field_loose_key$2(name) {\n\t    return \"__private_\" + id$2++ + \"_\" + name;\n\t}\n\tconst handler = {\n\t    get: (target, key)=>{\n\t        if (key === \"isProxy\") return true;\n\t        if (typeof target[key] === \"undefined\") return;\n\t        if (target[key].isSignal) return target[key].value;\n\t        if (!target[key].isProxy && typeof target[key] === \"object\") target[key] = new Proxy(target[key], handler);\n\t        return target[key];\n\t    },\n\t    set: (target, key, value)=>{\n\t        if (target[key] && target[key].isSignal) {\n\t            target[key].value = value;\n\t            return true;\n\t        }\n\t        target[key] = value;\n\t        // TODO: make the engine handle pushing history here\n\t        return true;\n\t    },\n\t    ownKeys (target) {\n\t        return Object.keys(target);\n\t    },\n\t    has (target, prop) {\n\t        return prop in target;\n\t    },\n\t    deleteProperty (target, key) {\n\t        let result = false;\n\t        if (key in target) {\n\t            result = Reflect.deleteProperty(target, key);\n\t        }\n\t        return result;\n\t    }\n\t};\n\tvar _store = /*#__PURE__*/ _class_private_field_loose_key$2(\"_store\");\n\tclass State {\n\t    get store() {\n\t        return _class_private_field_loose_base$2(this, _store)[_store];\n\t    }\n\t    constructor(){\n\t        Object.defineProperty(this, _store, {\n\t            writable: true,\n\t            value: void 0\n\t        });\n\t        _class_private_field_loose_base$2(this, _store)[_store] = new Proxy({}, handler);\n\t    }\n\t}\n\t/**\n\t * Gets the value at the given path\n\t */ function getPath(path) {\n\t    if (!isValidPath(path)) {\n\t        console.warn(\"Invalid variable path \" + path);\n\t        return;\n\t    }\n\t    const arr = path.split(\".\");\n\t    let previous = window.State.store;\n\t    for(let i = 0; i < arr.length; i++){\n\t        previous = previous[arr[i]];\n\t        if (typeof previous === \"undefined\") break;\n\t    }\n\t    return previous;\n\t}\n\t/**\n\t * Recursively sets a value in the store at the given path\n\t */ function setPath(path, value) {\n\t    if (!isValidPath(path)) {\n\t        console.warn(\"Invalid variable path \" + path);\n\t        return true;\n\t    }\n\t    const arr = path.split(\".\");\n\t    let previous = window.State.store;\n\t    let fail = false;\n\t    for(let i = 0; i < arr.length - 1; i++){\n\t        if (typeof previous[arr[i]] === \"undefined\") previous[arr[i]] = {};\n\t        if (typeof previous[arr[i]] !== \"object\") {\n\t            // can't set a new property here!\n\t            fail = true;\n\t            console.warn(`Failed to set ${path}: ${arr.slice(0, i + 1).join(\".\")} is not an object.`);\n\t            break;\n\t        }\n\t        previous = previous[arr[i]];\n\t    }\n\t    if (!fail) previous[arr[arr.length - 1]] = value;\n\t    return true;\n\t}\n\tfunction isValidPath(path) {\n\t    const arr = path.split(\".\");\n\t    try {\n\t        arr.forEach((a)=>new Function(`var ${a}`));\n\t    } catch (e) {\n\t        console.error(e);\n\t        return false;\n\t    }\n\t    return true;\n\t}\n\n\t// markdown-it environment\n\tconst md = MarkdownIt({\n\t    html: true,\n\t    xhtmlOut: true\n\t});\n\tclass Markup {\n\t    /**\n\t   * Converts escaped HTML characters back into the original characters\n\t   */ static unescape(text) {\n\t        const unescapeRules = [\n\t            [\n\t                \"&amp;\",\n\t                \"&\"\n\t            ],\n\t            [\n\t                \"&lt;\",\n\t                \"<\"\n\t            ],\n\t            [\n\t                \"&gt;\",\n\t                \">\"\n\t            ],\n\t            [\n\t                \"&quot;\",\n\t                '\"'\n\t            ],\n\t            [\n\t                \"&#x27;\",\n\t                \"'\"\n\t            ],\n\t            [\n\t                \"&#x60;\",\n\t                \"`\"\n\t            ]\n\t        ];\n\t        unescapeRules.forEach(([rule, out])=>{\n\t            text = text.replaceAll(rule, out);\n\t        });\n\t        return text;\n\t    }\n\t    /**\n\t   * Parses raw passage content and returns the rendered passage. It does not handle unescaping.\n\t   */ static parse(source) {\n\t        source = this.variables(source);\n\t        source = this.links(source);\n\t        source = this.snippets(source);\n\t        source = this.markdown(source);\n\t        return source;\n\t    }\n\t    /**\n\t   * Renders markdown and returns the rendered source.\n\t   */ static markdown(source) {\n\t        return md.render(source);\n\t    }\n\t    /**\n\t   * Renders passage link markup and returns the rendered source.\n\t   *\n\t   * NOTE: This does not attach the event listeners to the links, as the links need to be attached to the DOM first.\n\t   */ static links(source) {\n\t        // default twine link\n\t        const twineLink = (dest = \"\", text = \"\", func = \"\")=>`<button data-tw-link data-destination=\"${dest}\" ${func ? `data-onclick=\"${func}\"` : \"\"}>${text}</button>`;\n\t        const linkRules = [\n\t            {\n\t                match: /\\[\\[(.+?)\\|(.+?)\\]\\s?\\[(.+?)\\]\\]/g,\n\t                render: (_, dest, text, func)=>twineLink(dest, text, func)\n\t            },\n\t            {\n\t                match: /\\[\\[(.+?)\\]\\s?\\[(.+?)\\]\\]/g,\n\t                render: (_, dest, func)=>twineLink(dest, dest, func)\n\t            },\n\t            {\n\t                match: /\\[\\[(.+?)\\|(.+?)\\]\\]/g,\n\t                render: (_, dest, text)=>twineLink(dest, text)\n\t            },\n\t            {\n\t                match: /\\[\\[(.+?)\\]\\]/g,\n\t                render: (_, dest)=>twineLink(dest, dest)\n\t            }\n\t        ];\n\t        linkRules.forEach((rule)=>{\n\t            // match and replace each link\n\t            source = source.replaceAll(rule.match, rule.render);\n\t        });\n\t        return source;\n\t    }\n\t    /**\n\t   * Renders passage variable declarations and handles variable declaration and assignments.\n\t   */ static variables(source) {\n\t        const varRules = [\n\t            {\n\t                // @signal() - inside the parentheses is an expression\n\t                // declares a signal and initializes it if it does not exist yet\n\t                match: /(\\\\?)\\@([\\.\\_\\w]+)\\((.*)\\)/g,\n\t                render: (_ = \"\", escape = \"\", key = \"\", expr = \"\")=>{\n\t                    if (escape) return _;\n\t                    if (expr) {\n\t                        try {\n\t                            // retun the value from the expression\n\t                            const value = new Function(`const value = ${expr}; return value;`);\n\t                            if (getPath(key) !== undefined) setPath(key, value());\n\t                            else setPath(key, signal(value()));\n\t                        } catch (e) {\n\t                            console.error(e);\n\t                        }\n\t                    }\n\t                    return \"\";\n\t                }\n\t            },\n\t            {\n\t                match: /(\\\\?)\\@([\\.\\_\\w]+)/g,\n\t                render: (_ = \"\", escape = \"\", key = \"\")=>{\n\t                    if (escape) return _.replace(\"\\\\\", \"\");\n\t                    effect(()=>{\n\t                        document.querySelectorAll(`tw-var[data-signal=\"${key}\"]`).forEach((i)=>i.innerText = getPath(key));\n\t                    });\n\t                    let print = getPath(key);\n\t                    if (typeof print === \"object\") print = JSON.stringify(print);\n\t                    return `<tw-var data-signal=\"${key}\" style=\"display: contents; \">${print}</tw-var>`;\n\t                }\n\t            }\n\t        ];\n\t        varRules.forEach((rule)=>{\n\t            source = source.replaceAll(rule.match, rule.render);\n\t        });\n\t        return source;\n\t    }\n\t    /**\n\t   * Parses snippet blocks and renders them recursively. Returns the rendered source.\n\t   */ static snippets(source) {\n\t        const snippetRules = [\n\t            {\n\t                match: /<%(\\\\?)([a-z][a-z0-9\\-]*)(\\s+([\\s\\S]*?))?%>(([\\s\\S]*?)<%\\/\\2%>)/g,\n\t                render: (m, escape, name, _2, attrs = \"\", _4, content = \"\")=>{\n\t                    if (escape) return m.replace(escape, \"\");\n\t                    return renderSnippet(escape, name, attrs, content);\n\t                }\n\t            },\n\t            {\n\t                match: /<%(\\\\?)([a-z][a-z0-9\\-]*)(\\s+([\\s\\S]*?))?\\/%>/g,\n\t                render: (m, escape, name, _2, attrs = \"\")=>{\n\t                    if (escape) return m.replace(escape, \"\");\n\t                    return renderSnippet(escape, name, attrs);\n\t                }\n\t            }\n\t        ];\n\t        // this gets called recursively as long as the latest snippet has content\n\t        function snippet(source) {\n\t            snippetRules.forEach((snippetRule)=>{\n\t                // match and replace each snippet tag\n\t                source = source.replaceAll(snippetRule.match, snippetRule.render);\n\t            });\n\t            return source;\n\t        }\n\t        const renderSnippet = (escape = \"\", name = \"\", attrs = \"\", content = \"\")=>{\n\t            // this shouldn't happen, but just in case.\n\t            if (!name) return \"\";\n\t            let snip = null;\n\t            try {\n\t                snip = window.Story.snippet(name);\n\t            } catch (e) {\n\t                // failing to find a snippet by name throws an error, so we catch it here\n\t                console.error(new Error(`Could not render snippet: ${e.message}`));\n\t            }\n\t            if (!snip) return \"\";\n\t            let context = {};\n\t            let attrRegex = /([\\w\\-]+)\\s*\\=\\s*\"([\\s\\S]*?)\"/g;\n\t            let regexArray;\n\t            // [...attrs.matchAll(attrRegex)] does not return what we want. thanks typescript\n\t            // so we iterate over the attributes this way instead.\n\t            while((regexArray = attrRegex.exec(attrs)) !== null){\n\t                context[regexArray[1]] = regexArray[2];\n\t            }\n\t            // render snippet content as well, to allow for nesting\n\t            if (content) context.content = snippet(content);\n\t            return this.snippet(snip.source, context);\n\t        };\n\t        source = snippet(source);\n\t        return source;\n\t    }\n\t    /**\n\t   * Renders a snippet and returns the rendered html\n\t   */ static snippet(source, context = {}) {\n\t        source = this.nunjucks.renderString(source, context);\n\t        source = this.variables(source);\n\t        return source;\n\t    }\n\t    /**\n\t   * Adds event listeners to to make elements like passage links functional.\n\t   */ static addListeners() {\n\t        // TODO: move each listener type to its own method\n\t        document.querySelectorAll(\"[data-tw-link]\").forEach((l)=>{\n\t            // get each link's attribute\n\t            const dest = l.attributes.getNamedItem(\"data-destination\")?.value;\n\t            const text = l.innerText;\n\t            const funcStr = l.attributes.getNamedItem(\"data-onclick\")?.value;\n\t            if (!dest) {\n\t                console.warn(`Could not find destination for link with text \"${text}\"`);\n\t            }\n\t            l.addEventListener(\"click\", function() {\n\t                if (funcStr) new Function(funcStr)();\n\t                if (dest) window.Engine.jump(dest);\n\t            });\n\t        });\n\t    }\n\t    /**\n\t   * Finds and executes any script element in the passage body\n\t   */ static executeScriptElements() {\n\t        const containerElement = document.querySelector(\"tw-passage\");\n\t        // taken from https://stackoverflow.com/a/69190644\n\t        const scriptElements = containerElement?.querySelectorAll(\"script\");\n\t        scriptElements?.forEach((scriptElement)=>{\n\t            const clonedElement = document.createElement(\"script\");\n\t            Array.from(scriptElement.attributes).forEach((attribute)=>{\n\t                clonedElement.setAttribute(attribute.name, attribute.value);\n\t            });\n\t            clonedElement.text = scriptElement.text;\n\t            scriptElement.parentNode?.replaceChild(clonedElement, scriptElement);\n\t        });\n\t    }\n\t}\n\t// nunjucks environment\n\tMarkup.nunjucks = nj.configure({\n\t    autoescape: true\n\t});\n\n\tfunction _class_private_field_loose_base$1(receiver, privateKey) {\n\t    if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {\n\t        throw new TypeError(\"attempted to use private field on non-instance\");\n\t    }\n\t    return receiver;\n\t}\n\tvar id$1 = 0;\n\tfunction _class_private_field_loose_key$1(name) {\n\t    return \"__private_\" + id$1++ + \"_\" + name;\n\t}\n\tvar _passageEl = /*#__PURE__*/ _class_private_field_loose_key$1(\"_passageEl\");\n\tclass Engine {\n\t    start() {\n\t        this.jump(window.Story.startPassage);\n\t    }\n\t    /**\n\t   * Finds, renders and displays the passage by the given name. Optionally ignores the history.\n\t   */ jump(name) {\n\t        let passage;\n\t        try {\n\t            passage = window.Story.passage(name);\n\t        } catch (e) {\n\t            // catch the error if one is thrown\n\t            console.error(new Error(`Could not jump to passage: ${e.message}`));\n\t            return;\n\t        }\n\t        let html = passage.render();\n\t        this.show(html);\n\t    }\n\t    /**\n\t   * Displays the given html as the current passage. Does not handle history or state.\n\t   */ show(html) {\n\t        _class_private_field_loose_base$1(this, _passageEl)[_passageEl].innerHTML = html;\n\t        Markup.addListeners();\n\t        Markup.executeScriptElements();\n\t    }\n\t    constructor(){\n\t        Object.defineProperty(this, _passageEl, {\n\t            writable: true,\n\t            value: void 0\n\t        });\n\t        // init with the passage element\n\t        const passageEl = document.querySelector(\"tw-passage\");\n\t        if (!passageEl) throw new Error(\"tw-passage element is missing!\");\n\t        _class_private_field_loose_base$1(this, _passageEl)[_passageEl] = passageEl;\n\t    }\n\t}\n\n\tclass Passage {\n\t    /**\n\t   * Renders the passage contents and returns the rendered html.\n\t   */ render() {\n\t        return Markup.parse(this.source);\n\t    }\n\t    constructor(name, tags, source){\n\t        this.name = name;\n\t        this.tags = tags;\n\t        this.source = source;\n\t    }\n\t}\n\n\tclass Snippet extends Passage {\n\t    render() {\n\t        let rendered = this.source;\n\t        try {\n\t            rendered = Markup.snippet(rendered, {});\n\t        } catch (e) {\n\t            console.error(new Error(`Could not render snippet: ${e.message}`));\n\t        }\n\t        return rendered;\n\t    }\n\t}\n\n\tfunction _class_private_field_loose_base(receiver, privateKey) {\n\t    if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {\n\t        throw new TypeError(\"attempted to use private field on non-instance\");\n\t    }\n\t    return receiver;\n\t}\n\tvar id = 0;\n\tfunction _class_private_field_loose_key(name) {\n\t    return \"__private_\" + id++ + \"_\" + name;\n\t}\n\tvar _storydata = /*#__PURE__*/ _class_private_field_loose_key(\"_storydata\"), _ifid = /*#__PURE__*/ _class_private_field_loose_key(\"_ifid\"), _startPassage = /*#__PURE__*/ _class_private_field_loose_key(\"_startPassage\"), _getStartPassage = /*#__PURE__*/ _class_private_field_loose_key(\"_getStartPassage\");\n\tclass Story {\n\t    get ifid() {\n\t        return _class_private_field_loose_base(this, _ifid)[_ifid];\n\t    }\n\t    get startPassage() {\n\t        return _class_private_field_loose_base(this, _startPassage)[_startPassage].name;\n\t    }\n\t    /**\n\t   * Returns a story attribute's value by the given attribute name\n\t   */ getStoryAttr(attr) {\n\t        return _class_private_field_loose_base(this, _storydata)[_storydata]?.attributes.getNamedItem(attr)?.value || null;\n\t    }\n\t    /**\n\t   * Finds all passages with a certain tag.\n\t   */ passagesByTag(tag) {\n\t        return this.passages.filter((p)=>p.tags.includes(tag));\n\t    }\n\t    /**\n\t   * Gets a snippet by its name Throws an error if it cannot find a snippet with the given name.\n\t   */ snippet(name) {\n\t        const snippet = this.snippets.find((p)=>{\n\t            return p.name.split(\" \").join(\"-\").toLowerCase() === name.trim();\n\t        });\n\t        if (!snippet) throw new Error(`No passage with name \"${name}\" found.`);\n\t        return snippet;\n\t    }\n\t    /**\n\t   * Gets a regular passage by its name. Throws an error if it cannot find a passage with the given name.\n\t   */ passage(name) {\n\t        const passage = this.passages.find((p)=>{\n\t            return p.name === name.trim();\n\t        });\n\t        if (!passage) throw new Error(`No snippet with name \"${name}\" found.`);\n\t        return passage;\n\t    }\n\t    constructor(){\n\t        Object.defineProperty(this, _getStartPassage, {\n\t            value: getStartPassage\n\t        });\n\t        Object.defineProperty(this, _storydata, {\n\t            writable: true,\n\t            value: void 0\n\t        });\n\t        Object.defineProperty(this, _ifid, {\n\t            writable: true,\n\t            value: void 0\n\t        });\n\t        Object.defineProperty(this, _startPassage, {\n\t            writable: true,\n\t            value: void 0\n\t        });\n\t        this.name = this.getStoryAttr(\"name\") || \"A Malachite Story\";\n\t        this.passages = [];\n\t        this.snippets = [];\n\t        // init the story data, get the story name\n\t        const dataEl = document.querySelector(\"tw-storydata\");\n\t        if (!dataEl) throw Error(\"Story data element is missing!\");\n\t        _class_private_field_loose_base(this, _storydata)[_storydata] = dataEl;\n\t        // same for the ifid\n\t        const ifid = this.getStoryAttr(\"ifid\");\n\t        if (!ifid) throw Error(\"Story data ifid field is missing!\");\n\t        _class_private_field_loose_base(this, _ifid)[_ifid] = ifid;\n\t        // get all the passage elements and add them to the passage array\n\t        _class_private_field_loose_base(this, _storydata)[_storydata]?.querySelectorAll(\"tw-passagedata\").forEach((p)=>{\n\t            let name = p.attributes.getNamedItem(\"name\")?.value || \"Passage\";\n\t            let tags = p.attributes.getNamedItem(\"tags\")?.value.split(\" \");\n\t            let source = Markup.unescape(p.innerHTML);\n\t            if (!tags || !tags?.includes(\"snippet\")) {\n\t                this.passages.push(new Passage(name, tags || [], source));\n\t            } else {\n\t                this.snippets.push(new Snippet(name, tags || [], source));\n\t            }\n\t        });\n\t        // get the start passage\n\t        _class_private_field_loose_base(this, _startPassage)[_startPassage] = _class_private_field_loose_base(this, _getStartPassage)[_getStartPassage]();\n\t    }\n\t}\n\tfunction getStartPassage() {\n\t    // check if we at leats have a story data element. throw an error if not\n\t    if (!_class_private_field_loose_base(this, _storydata)[_storydata]) throw Error(\"No story data element found.\");\n\t    // get the passage id of the starting passage\n\t    const startPassageId = parseInt(_class_private_field_loose_base(this, _storydata)[_storydata]?.attributes.getNamedItem(\"startnode\")?.value || \"nah\");\n\t    // and throw an error if it doesn't return a valid id (\"nah\")\n\t    if (isNaN(startPassageId)) throw Error(\"No start passage ID found.\");\n\t    // get the starting passage name\n\t    const startPassageName = document.querySelector(`[pid=\"${startPassageId}\"]`)?.attributes.getNamedItem(\"name\")?.value || null;\n\t    // get the starting passage\n\t    let startPassage;\n\t    try {\n\t        startPassage = this.passage(startPassageName || \"\");\n\t    } catch (e) {\n\t        throw Error(\"Starting passage does not exist!\");\n\t    }\n\t    return startPassage;\n\t}\n\n\t// initialize globals\n\twindow.Engine = new Engine();\n\twindow.Story = new Story();\n\twindow.State = new State();\n\twindow.s = window.State.store;\n\t// start the story\n\twindow.Engine.start();\n\n})();\n\n    </script>\n  </body>\n</html>\n"});